{
    "ClassEval_0_1": [
        "def is_start_with(self, request_uri):\n        predefined_prefixes = ['/admin', '/dashboard', '/settings']\n        for prefix in predefined_prefixes:\n            if request_uri.startswith(prefix):\n                return True\n        return False",
        false
    ],
    "ClassEval_0_2": [
        "def get_jwt_user(self, request):\n    jwt_token = request.get('headers', {}).get('Authorization', None)\n    if jwt_token:\n        # Validate and decode the JWT token\n        try:\n            decoded_token = decode_jwt_token(jwt_token)\n            if decoded_token:\n                # Check if the token is expired\n                if decoded_token.get('exp', 0) >= datetime.datetime.utcnow().timestamp():\n                    return decoded_token.get('user', None)\n        except Exception as e:\n            logging.error(f\"Error decoding JWT token: {e}\")\n    return None",
        false
    ],
    "ClassEval_10_0": [
        "def clean_non_binary_chars(self):\n    self.binary_string = ''.join(filter(lambda x: x in ['0', '1'], self.binary_string))",
        true
    ],
    "ClassEval_10_3": [
        "def convert_to_utf8(self):\n    utf8_string = \"\"\n    binary_chunks = [self.binary_string[i:i+8] for i in range(0, len(self.binary_string), 8)]\n    for chunk in binary_chunks:\n        utf8_string += chr(int(chunk, 2))\n    return utf8_string",
        true
    ],
    "ClassEval_11_0": [
        "def add(states, stat):\n        return states | stat",
        true
    ],
    "ClassEval_11_1": [
        "def has(states, stat):\n    \n    return (states & stat) == stat\n    \n    ",
        true
    ],
    "ClassEval_12_1": [
        "def calculate_hand_value(self, hand):\n        total_value = 0\n        ace_count = hand.count('A')\n        \n        for card in hand:\n            if card.isdigit():\n                total_value += int(card)\n            elif card in ['J', 'Q', 'K']:\n                total_value += 10\n            elif card == 'A':\n                total_value += 11\n        \n        while total_value > 21 and ace_count > 0:\n            total_value -= 10\n            ace_count -= 1\n        \n        return total_value",
        false
    ],
    "ClassEval_12_2": [
        "def check_winner(self, player_hand, dealer_hand):\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n\n        if player_value <= 21 and dealer_value <= 21:\n            if player_value == dealer_value:\n                return \"Dealer wins\" if player_value < dealer_value else \"Player wins\"\n            else:\n                return \"Player wins\" if player_value > dealer_value else \"Dealer wins\"\n        else:\n            return \"Player wins\" if player_value <= 21 else \"Dealer wins\"",
        false
    ],
    "ClassEval_13_0": [
        "def add_book(self, title, quantity=1):\n        if title in self.inventory:\n            self.inventory[title] += quantity\n        else:\n            self.inventory[title] = quantity",
        true
    ],
    "ClassEval_13_1": [
        "def remove_book(self, title, quantity):\n        if title in self.inventory:\n            if self.inventory[title] >= quantity:\n                self.inventory[title] -= quantity\n                if self.inventory[title] == 0:\n                    del self.inventory[title]\n            else:\n                return False\n        else:\n            return False",
        false
    ],
    "ClassEval_14_0": [
        "def create_table(self):\n        self.cursor.execute('''CREATE TABLE IF NOT EXISTS book (\n                                id INTEGER PRIMARY KEY,\n                                title TEXT NOT NULL,\n                                author TEXT NOT NULL,\n                                borrowed INTEGER DEFAULT 0\n                                )''')\n        self.connection.commit()\n\n",
        false
    ],
    "ClassEval_14_2": [
        "def remove_book(self, book_id):\n    self.cursor.execute(\"DELETE FROM book WHERE id = ?\", (book_id,))\n    self.connection.commit()",
        false
    ],
    "ClassEval_15_0": [
        "def match_in_pattern(self, char):\n        for i in range(self.patLen - 1, -1, -1):\n            if self.pattern[i] == char:\n                return i\n        return -1",
        true
    ],
    "ClassEval_15_2": [
        "def bad_character_heuristic(self):\n        bad_character = {}\n        for i in range(self.patLen):\n            bad_character[self.pattern[i]] = i\n        return bad_character\n\n",
        false
    ],
    "ClassEval_16_1": [
        "def precedence(self, operator):\n        if operator == '^':\n            return 3\n        elif operator in ['/', '*']:\n            return 2\n        elif operator in ['+', '-']:\n            return 1\n        else:\n            return 0",
        true
    ],
    "ClassEval_16_2": [
        "def apply_operator(self, operand_stack, operator_stack):\n    operator = operator_stack.pop()\n    operand2 = operand_stack.pop()\n    operand1 = operand_stack.pop()\n    result = self.operators[operator](operand1, operand2)\n    operand_stack.append(result)",
        true
    ],
    "ClassEval_17_2": [
        "def get_events(self, date):\n        events_on_date = [event for event in self.events if event['date'].date() == date.date()]\n        return events_on_date",
        true
    ],
    "ClassEval_17_5": [
        "def get_upcoming_events(self, num_events):\n        today = datetime.now()\n        upcoming_events = []\n        for event in self.events:\n            event_date = event['date']\n            if event_date >= today and len(upcoming_events) < num_events:\n                upcoming_events.append(event)\n        return upcoming_events",
        true
    ],
    "ClassEval_18_1": [
        "def __setitem__(self, key, value):\n        camel_key = self._to_camel_case(key)\n        self._data[camel_key] = value",
        true
    ],
    "ClassEval_18_5": [
        "def _convert_key(self, key):\n    if isinstance(key, str):\n        parts = key.split('_')\n        return parts[0] + ''.join(word.capitalize() for word in parts[1:])\n    return key",
        true
    ],
    "ClassEval_19_0": [
        "def generate_primes(self):\n        primes = []\n        sieve = [True] * (self.n + 1)\n        for p in range(2, self.n + 1):\n            if sieve[p]:\n                primes.append(p)\n                for i in range(p * p, self.n + 1, p):\n                    sieve[i] = False\n        return primes",
        true
    ],
    "ClassEval_19_1": [
        "def get_primes(self):\n    primes_list = []\n    for num in range(2, self.n + 1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes_list.append(num)\n    return primes_list",
        true
    ],
    "ClassEval_1_1": [
        "def calculate_sphere_area(self):\n        return 4 * math.pi * self.radius ** 2\n\n",
        true
    ],
    "ClassEval_1_4": [
        "def calculate_annulus_area(self, inner_radius, outer_radius):\n        return math.pi * (outer_radius**2 - inner_radius**2)",
        true
    ],
    "ClassEval_20_0": [
        "def add_user(self, username):\n    if username in self.users:\n        return False\n    else:\n        self.users[username] = []\n        return True",
        true
    ],
    "ClassEval_20_3": [
        "def get_messages(self, username):\n        if username in self.users:\n            messages = []\n            for message in self.users[username]['messages']:\n                messages.append({\n                    'sender': message['sender'],\n                    'receiver': message['receiver'],\n                    'message': message['message'],\n                    'timestamp': message['timestamp']\n                })\n            return messages\n        else:\n            return []",
        false
    ],
    "ClassEval_21_0": [
        "def add_course(self, course):\n        if course not in self.courses and not self.check_course_conflict(course):\n            self.courses.append(course)\n\n",
        false
    ],
    "ClassEval_21_1": [
        "def remove_course(self, course):\n    if course in self.courses:\n        self.courses.remove(course)",
        true
    ],
    "ClassEval_22_1": [
        "def register_class(self, student_name, class_name):\n        for student in self.students:\n            if student['name'] == student_name:\n                if student_name in self.students_registration_classes:\n                    self.students_registration_classes[student_name].append(class_name)\n                else:\n                    self.students_registration_classes[student_name] = [class_name]\n                return self.students_registration_classes[student_name]",
        false
    ],
    "ClassEval_22_3": [
        "def get_all_major(self):\n        return list(set([student['major'] for student in self.students]))",
        false
    ],
    "ClassEval_23_1": [
        "def count_all(n: int) -> int:\n        if n < 0 or n > 63:\n            return False\n        elif n == 63:\n            return float('inf')\n        else:\n            return 2 ** n\n\n",
        false
    ],
    "ClassEval_23_3": [
        "def select_all(self) -> List[List[str]]:\n        return self.select(len(self.datas))",
        false
    ],
    "ClassEval_24_1": [
        "def subtract(c1, c2):\n        real = c1.real - c2.real\n        imag = c1.imag - c2.imag\n        return complex(real, imag)",
        true
    ],
    "ClassEval_24_2": [
        "def multiply(c1, c2):\n        real_part = c1.real * c2.real - c1.imag * c2.imag\n        imag_part = c1.real * c2.imag + c1.imag * c2.real\n        return complex(real_part, imag_part)",
        true
    ],
    "ClassEval_25_0": [
        "def get_cookies(self, reponse):\n        cookies = reponse.get('cookies')\n        if cookies:\n            self.cookies = cookies\n            self._save_cookies()\n\n",
        true
    ],
    "ClassEval_25_2": [
        "def _save_cookies(self):\n    if self.cookies:\n        try:\n            with open(self.cookies_file, 'w') as file:\n                json.dump(self.cookies, file)\n            return True\n        except Exception as e:\n            print(f\"Error saving cookies: {e}\")\n            return False\n    else:\n        return False",
        true
    ],
    "ClassEval_26_0": [
        "def read_csv(self, file_name):\n    with open(file_name, 'r') as file:\n        csv_reader = csv.reader(file)\n        data = list(csv_reader)\n        title = data[0]\n        data = data[1:]\n    return title, data",
        true
    ],
    "ClassEval_26_2": [
        "def process_csv_data(self, N, save_file_name):\n        data = self.read_csv(save_file_name)\n        if data:\n            processed_data = []\n            for row in data:\n                processed_row = [row[N].upper() if i == N else cell for i, cell in enumerate(row)]\n                processed_data.append(processed_row)\n            new_file_name = save_file_name.split('.')[0] + '_process.' + save_file_name.split('.')[1]\n            self.write_csv(processed_data, new_file_name)\n            return 1\n        else:\n            return 0",
        false
    ],
    "ClassEval_27_2": [
        "def add_currency_rate(self, currency, rate):\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate",
        true
    ],
    "ClassEval_27_3": [
        "def update_currency_rate(self, currency, new_rate):\n        if currency in self.rates:\n            self.rates[currency] = new_rate\n            return None\n        else:\n            return False",
        true
    ],
    "ClassEval_28_0": [
        "def create_table(self, table_name, key1, key2):\n        connection = sqlite3.connect(self.database_name)\n        cursor = connection.cursor()\n        cursor.execute(f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\")\n        connection.commit()\n        connection.close()",
        true
    ],
    "ClassEval_28_1": [
        "def insert_into_database(self, table_name, data):\n        conn = sqlite3.connect(self.database_name)\n        df = pd.DataFrame(data)\n        df.to_sql(table_name, conn, if_exists='append', index=False)\n        conn.close()",
        true
    ],
    "ClassEval_29_0": [
        "def mean(self, data):\n        return round(sum(data) / len(data), 2)",
        true
    ],
    "ClassEval_29_1": [
        "def median(self, data):\n        data.sort()\n        n = len(data)\n        if n % 2 == 0:\n            median_value = (data[n // 2 - 1] + data[n // 2]) / 2\n        else:\n            median_value = data[n // 2]\n        return round(median_value, 2)",
        true
    ],
    "ClassEval_2_0": [
        "def parse_arguments(self, command_string):\n        args_list = command_string.split()[1:]\n        for i in range(0, len(args_list), 2):\n            arg = args_list[i]\n            value = args_list[i + 1] if i + 1 < len(args_list) else None\n            if arg.startswith(\"--\"):\n                key = arg[2:]\n            elif arg.startswith(\"-\"):\n                key = arg[1:]\n            else:\n                return (False, {arg})\n            self.arguments[key] = self._convert_type(key, value)\n\n        missing_args = self.required - set(self.arguments.keys())\n        if missing_args:\n            return (False, missing_args)\n        return (True, None)",
        false
    ],
    "ClassEval_2_1": [
        "def get_argument(self, key):\n        return self.arguments.get(key, None)",
        true
    ],
    "ClassEval_30_2": [
        "def get_max(self):\n    \n    return float(np.max(self.data))\n    \n    ",
        true
    ],
    "ClassEval_30_4": [
        "def get_std_deviation(self):\n    \n    return round(np.std(self.data), 2)\n    \n    ",
        true
    ],
    "ClassEval_31_0": [
        "def correlation_coefficient(data1, data2):\n        n = len(data1)\n        mean_data1 = sum(data1) / n\n        mean_data2 = sum(data2) / n\n\n        numerator = sum((data1[i] - mean_data1) * (data2[i] - mean_data2) for i in range(n))\n        denominator_data1 = math.sqrt(sum((data1[i] - mean_data1) ** 2 for i in range(n)))\n        denominator_data2 = math.sqrt(sum((data2[i] - mean_data2) ** 2 for i in range(n))\n\n        correlation_coefficient = numerator / (denominator_data1 * denominator_data2)\n        return correlation_coefficient\n\n",
        false
    ],
    "ClassEval_31_2": [
        "def kurtosis(data):\n        n = len(data)\n        mean = sum(data) / n\n        variance = sum((x - mean) ** 2 for x in data) / n\n        kurtosis = sum((x - mean) ** 4 for x in data) / (n * variance ** 2)\n        return kurtosis",
        false
    ],
    "ClassEval_32_0": [
        "def caesar_decipher(self, ciphertext, shift):\n        deciphered_text = \"\"\n        for char in ciphertext:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                deciphered_text += chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)\n            else:\n                deciphered_text += char\n        return deciphered_text",
        true
    ],
    "ClassEval_32_2": [
        "def rail_fence_decipher(self, encrypted_text, rails):\n        if rails < 2:\n            return encrypted_text\n        fence = ['' for _ in range(rails)]\n        rail = 0\n        direction = 1\n        for char in encrypted_text:\n            fence[rail] += char\n            rail += direction\n            if rail == rails - 1 or rail == 0:\n                direction = -direction\n        result = ''\n        for rail in fence:\n            result += rail\n        return result",
        false
    ],
    "ClassEval_33_0": [
        "def total(self):\n        total = sum(item['quantity'] * item['price'] for item in self.cart)\n        if self.promotion:\n            total -= self.promotion(self.cart)\n        return total",
        true
    ],
    "ClassEval_33_2": [
        "def FidelityPromo(order):\n    discount = 0\n    if order.customer['fidelity'] > 1000:\n        discount = order.due() * 0.05\n    return discount",
        false
    ],
    "ClassEval_34_0": [
        "def read_text(self):\n    doc = Document(self.file_path)\n    full_text = []\n    for paragraph in doc.paragraphs:\n        full_text.append(paragraph.text)\n    return '\\n'.join(full_text)",
        true
    ],
    "ClassEval_34_2": [
        "def add_heading(self, heading, level=1):\n    doc = Document(self.file_path)\n    if level == 1:\n        doc.add_heading(heading, level=1)\n    elif level == 2:\n        doc.add_heading(heading, level=2)\n    elif level == 3:\n        doc.add_heading(heading, level=3)\n    elif level == 4:\n        doc.add_heading(heading, level=4)\n    elif level == 5:\n        doc.add_heading(heading, level=5)\n    elif level == 6:\n        doc.add_heading(heading, level=6)\n    elif level == 7:\n        doc.add_heading(heading, level=7)\n    elif level == 8:\n        doc.add_heading(heading, level=8)\n    elif level == 9:\n        doc.add_heading(heading, level=9)\n    doc.save(self.file_path)\n    return True",
        true
    ],
    "ClassEval_35_0": [
        "def find_blank(self, state):\n        for i in range(3):\n            for j in range(3):\n                if state[i][j] == 0:\n                    return i, j",
        true
    ],
    "ClassEval_35_2": [
        "def get_possible_moves(self, state):\n        moves = []\n        row, col = self.find_blank(state)\n        if row > 0:\n            moves.append('up')\n        if row < 2:\n            moves.append('down')\n        if col > 0:\n            moves.append('left')\n        if col < 2:\n            moves.append('right')\n        return moves",
        true
    ],
    "ClassEval_36_2": [
        "def is_full_with_one_more_email(self, size):\n        if self.get_occupied_size() + size > self.capacity:\n            return True\n        else:\n            return False",
        true
    ],
    "ClassEval_36_4": [
        "def clear_inbox(self, size):\n        while self.get_occupied_size() + size > self.capacity:\n            oldest_email = min(self.inbox, key=lambda x: x['date'])\n            self.inbox.remove(oldest_email)",
        false
    ],
    "ClassEval_37_1": [
        "def vigenere_cipher(self, plaintext):\n        key_length = len(self.key)\n        key_as_int = [ord(i) for i in self.key]\n        plaintext_as_int = [ord(i) for i in plaintext]\n        ciphertext = \"\"\n        for i in range(len(plaintext_as_int)):\n            value = (plaintext_as_int[i] + key_as_int[i % key_length]) % 26\n            ciphertext += chr(value + 65)\n        return ciphertext",
        false
    ],
    "ClassEval_37_2": [
        "def rail_fence_cipher(self,plain_text, rails):\n    \n    def rail_fence_cipher(self, plain_text, rails):\n            rail = [''] * rails\n            direction = -1\n            row = 0\n    \n            for char in plain_text:\n                rail[row] += char\n                if row == 0 or row == rails - 1:\n                    direction *= -1\n                row += direction\n    \n            return ''.join(rail)\n    \n    ",
        false
    ],
    "ClassEval_38_1": [
        "def write_excel(self, data, file_name):\n        try:\n            workbook = openpyxl.Workbook()\n            sheet = workbook.active\n            for row in data:\n                sheet.append(row)\n            workbook.save(file_name)\n            return 1\n        except:\n            return 0",
        true
    ],
    "ClassEval_38_2": [
        "def process_excel_data(self, N, save_file_name):\n        wb = self.read_excel(save_file_name)\n        sheet = wb.active\n        for row in sheet.iter_rows(values_only=True):\n            row[N - 1] = str(row[N - 1]).upper()\n        return self.write_excel(wb, save_file_name), save_file_name",
        false
    ],
    "ClassEval_39_2": [
        "def is_operator(c):\n        return c in {'+', '-', '*', '/', '(', ')', '%'}\n\n",
        true
    ],
    "ClassEval_39_5": [
        "def transform(expression):\n    return expression.replace(\" \", \"\").rstrip(\"=\")",
        false
    ],
    "ClassEval_3_0": [
        "def count(n, m=None):\n",
        false
    ],
    "ClassEval_3_1": [
        "def count_all(n):\n        return 2**n - 1",
        false
    ],
    "ClassEval_40_1": [
        "def condition_judge(self):\n        bmi = self.get_BMI()\n        if self.sex == \"male\":\n            if bmi < 20:\n                return -1\n            elif bmi > 25:\n                return 1\n            else:\n                return 0\n        elif self.sex == \"female\":\n            if bmi < 19:\n                return -1\n            elif bmi > 24:\n                return 1\n            else:\n                return 0",
        true
    ],
    "ClassEval_40_2": [
        "def calculate_calorie_intake(self):\n        if self.sex == \"male\":\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\n        else:\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\n\n        if self.condition_judge() == 1:\n            return BMR * 1.2\n        elif self.condition_judge() == -1:\n            return BMR * 1.6\n        else:\n            return BMR * 1.4\n\n",
        true
    ],
    "ClassEval_41_1": [
        "def check_winner(self):\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    if self._check_five_in_a_row(row, col, (0, 1)) or self._check_five_in_a_row(row, col, (1, 0)) or self._check_five_in_a_row(row, col, (1, 1)) or self._check_five_in_a_row(row, col, (1, -1)):\n                        return self.board[row][col]\n        return None",
        true
    ],
    "ClassEval_41_2": [
        "def _check_five_in_a_row(self, row, col, direction):\n        symbol = self.board[row][col]\n        count = 1\n        dx, dy = direction\n\n        # Check in the positive direction\n        r, c = row + dx, col + dy\n        while 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] == symbol:\n            count += 1\n            r += dx\n            c += dy\n\n        # Check in the negative direction\n        r, c = row - dx, col - dy\n        while 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] == symbol:\n            count += 1\n            r -= dx\n            c -= dy\n\n        return count >= 5",
        true
    ],
    "ClassEval_42_0": [
        "def book_room(self, room_type, room_number, name):\n        if room_type in self.available_rooms:\n            if self.available_rooms[room_type] >= room_number:\n                if room_type not in self.booked_rooms:\n                    self.booked_rooms[room_type] = {name: room_number}\n                else:\n                    if name in self.booked_rooms[room_type]:\n                        self.booked_rooms[room_type][name] += room_number\n                    else:\n                        self.booked_rooms[room_type][name] = room_number\n                self.available_rooms[room_type] -= room_number\n                return 'Success!'\n            else:\n                return self.available_rooms[room_type]\n        else:\n            return False",
        true
    ],
    "ClassEval_42_1": [
        "def check_in(self, room_type, room_number, name):\n        if room_type not in self.booked_rooms or name not in self.booked_rooms[room_type] or room_number > self.booked_rooms[room_type][name]:\n            return False\n        elif room_number == self.booked_rooms[room_type][name]:\n            del self.booked_rooms[room_type][name]\n        else:\n            self.booked_rooms[room_type][name] -= room_number",
        true
    ],
    "ClassEval_43_1": [
        "def remove_employee(self, employee_id):\n        if employee_id in self.employees:\n            del self.employees[employee_id]\n            return True\n        else:\n            return False",
        true
    ],
    "ClassEval_43_3": [
        "def get_employee(self, employee_id):\n    if employee_id in self.employees:\n        return self.employees[employee_id]\n    else:\n        return False",
        true
    ],
    "ClassEval_44_1": [
        "def format_line_html_text(self, html_text):\n        soup = BeautifulSoup(html_text, 'html.parser')\n        for code_block in soup.find_all('code'):\n            code_block.replace_with(self.CODE_MARK)\n        return str(soup)\n\n",
        false
    ],
    "ClassEval_44_2": [
        "def extract_code_from_html_text(self, html_text):\n        soup = BeautifulSoup(html_text, 'html.parser')\n        code_snippets = []\n        for code_tag in soup.find_all('code'):\n            code_snippets.append(code_tag.get_text())\n        return code_snippets",
        false
    ],
    "ClassEval_45_0": [
        "def load_image(self, image_path):\n        self.image = Image.open(image_path)",
        true
    ],
    "ClassEval_45_3": [
        "def rotate_image(self, degrees):\n    if self.image:\n        self.image = self.image.rotate(degrees)",
        true
    ],
    "ClassEval_46_0": [
        "def interpolate_1d(x, y, x_interp):\n        y_interp = []\n        for x_val in x_interp:\n            if x_val <= x[0]:\n                y_interp.append(y[0])\n            elif x_val >= x[-1]:\n                y_interp.append(y[-1])\n            else:\n                for i in range(len(x) - 1):\n                    if x[i] <= x_val < x[i + 1]:\n                        y_val = y[i] + (y[i + 1] - y[i]) * (x_val - x[i]) / (x[i + 1] - x[i])\n                        y_interp.append(y_val)\n                        break\n        return y_interp",
        false
    ],
    "ClassEval_46_1": [
        "def interpolate_2d(x, y, z, x_interp, y_interp):\n    interpolated_z = []\n    for i in range(len(x_interp)):\n        x0, x1 = find_surrounding_points(x, x_interp[i])\n        y0, y1 = find_surrounding_points(y, y_interp[i])\n        z00, z01, z10, z11 = find_surrounding_values(x, y, z, x0, x1, y0, y1)\n        z_interp = interpolate_2d_points(x0, x1, y0, y1, z00, z01, z10, z11, x_interp[i], y_interp[i])\n        interpolated_z.append(z_interp)\n    return interpolated_z",
        false
    ],
    "ClassEval_47_0": [
        "def is_valid(self):\n    octets = self.get_octets()\n    if len(octets) != 4:\n        return False\n    for octet in octets:\n        if not octet.isdigit():\n            return False\n        if not 0 <= int(octet) <= 255:\n            return False\n    return True",
        false
    ],
    "ClassEval_47_1": [
        "def get_octets(self):\n    if self.is_valid():\n        return self.ip_address.split('.')\n    else:\n        return []",
        true
    ],
    "ClassEval_48_0": [
        "def is_valid_ipv4(ip_address):\n    try:\n        socket.inet_pton(socket.AF_INET, ip_address)\n        return True\n    except socket.error:\n        return False",
        true
    ],
    "ClassEval_48_2": [
        "def get_hostname(ip_address):\n    try:\n        hostname = socket.gethostbyaddr(ip_address)[0]\n        return hostname\n    except socket.herror:\n        return None",
        true
    ],
    "ClassEval_49_0": [
        "def post_job(self, job_title, company, requirements):\n        self.job_listings.append({\"job_title\": job_title, \"company\": company, \"requirements\": requirements})",
        true
    ],
    "ClassEval_49_3": [
        "def withdraw_resume(self, resume):\n        if resume in self.resumes:\n            self.resumes.remove(resume)",
        true
    ],
    "ClassEval_4_1": [
        "def add_course_score(self, name, course, score):\n        if name in self.students:\n            if course in self.students[name]['courses']:\n                self.students[name]['courses'][course] = score\n            else:\n                self.students[name]['courses'][course] = score\n        else:\n            self.students[name] = {'grade': None, 'major': None, 'courses': {course: score}}",
        true
    ],
    "ClassEval_4_2": [
        "def get_gpa(self, name):\n    if name in self.students:\n        student = self.students[name]\n        if student[\"courses\"]:\n            total_score = sum(student[\"courses\"].values())\n            num_courses = len(student[\"courses\"])\n            return total_score / num_courses\n    return None",
        true
    ],
    "ClassEval_50_1": [
        "def write_json(self, data, file_path):\n    try:\n        with open(file_path, 'w') as file:\n            json.dump(data, file)\n        return 1\n    except Exception as e:\n        return -1",
        true
    ],
    "ClassEval_50_2": [
        "def process_json(self, file_path, remove_key):\n        data = self.read_json(file_path)\n        if data:\n            if remove_key in data:\n                del data[remove_key]\n                self.write_json(data, file_path)\n                return 1\n        return 0",
        false
    ],
    "ClassEval_51_0": [
        "def kappa(testData, k):\n        total_agreement = np.trace(testData)\n        total_chance_agreement = KappaCalculator.fleiss_kappa(testData, np.sum(testData), k, np.sum(testData, axis=0))\n        return (total_agreement - total_chance_agreement) / (np.sum(testData) - total_chance_agreement)",
        false
    ],
    "ClassEval_51_1": [
        "def fleiss_kappa(testData, N, k, n):\n        observed_agreement = np.sum(np.sum(testData * (testData - 1), axis=1) / (n * (n - 1)))\n        expected_agreement = np.sum(np.sum(testData, axis=0) ** 2 / (n * (n - 1)))\n        fleiss_kappa = (observed_agreement - expected_agreement) / (1 - expected_agreement)\n        return fleiss_kappa",
        false
    ],
    "ClassEval_52_0": [
        "def lemmatize_sentence(self, sentence):\n        sentence = self.remove_punctuation(sentence)\n        pos_tags = self.get_pos_tag(sentence)\n        lemmatized_words = []\n        for word, pos in pos_tags:\n            pos = pos[0].lower()\n            pos = pos if pos in ['a', 'r', 'n', 'v'] else None\n            lemmatized_word = self.lemmatizer.lemmatize(word, pos=pos) if pos else self.lemmatizer.lemmatize(word)\n            lemmatized_words.append(lemmatized_word)\n        return lemmatized_words",
        false
    ],
    "ClassEval_52_1": [
        "def get_pos_tag(self, sentence):\n        sentence = self.remove_punctuation(sentence)\n        tokenized_sentence = word_tokenize(sentence)\n        pos_tags = pos_tag(tokenized_sentence)\n        return pos_tags",
        false
    ],
    "ClassEval_53_0": [
        "def add_word(self, word):\n    self.word_list.append(word)",
        true
    ],
    "ClassEval_53_1": [
        "def find_longest_word(self, sentence):\n        sentence = re.sub('['+string.punctuation+']', '', sentence)\n        words = sentence.split()\n        longest_word = ''\n        for word in words:\n            if word.lower() in self.word_list:\n                if len(word) > len(longest_word):\n                    longest_word = word\n        return longest_word",
        false
    ],
    "ClassEval_54_2": [
        "def has_path(self, pos1, pos2):\n        pass\n\n",
        false
    ],
    "ClassEval_54_3": [
        "def remove_icons(self, pos1, pos2):\n    self.board[pos1[0]][pos1[1]] = None\n    self.board[pos2[0]][pos2[1]] = None",
        false
    ],
    "ClassEval_55_0": [
        "def palindromic_length(self, center, diff, string):\n        length = 0\n        while center - diff >= 0 and center + diff < len(string) and string[center - diff] == string[center + diff]:\n            length += 1\n            diff += 1\n        return length",
        true
    ],
    "ClassEval_55_1": [
        "def palindromic_string(self):\n        if len(self.input_string) == 0:\n            return \"\"\n        \n        modified_string = \"@#\" + \"#\".join(self.input_string) + \"#$\"\n        p = [0] * len(modified_string)\n        center = right = 0\n        \n        for i in range(1, len(modified_string) - 1):\n            mirror = 2 * center - i\n            if right > i:\n                p[i] = min(right - i, p[mirror])\n            while modified_string[i + 1 + p[i]] == modified_string[i - 1 - p[i]]:\n                p[i] += 1\n            if i + p[i] > right:\n                center, right = i, i + p[i]\n        \n        max_length = max(p)\n        center_index = p.index(max_length)\n        start = (center_index - max_length) // 2\n        return self.input_string[start:start + max_length]",
        true
    ],
    "ClassEval_56_1": [
        "def precision(self, predicted_labels, true_labels):\n        true_positives = sum([1 for p, t in zip(predicted_labels, true_labels) if p == 1 and t == 1])\n        false_positives = sum([1 for p, t in zip(predicted_labels, true_labels) if p == 1 and t == 0])\n        \n        if true_positives + false_positives == 0:\n            return 0.0\n        else:\n            return true_positives / (true_positives + false_positives)\n\n",
        true
    ],
    "ClassEval_56_3": [
        "def f1_score(self, predicted_labels, true_labels):\n        self.update(predicted_labels, true_labels)\n        precision_val = self.precision(predicted_labels, true_labels)\n        recall_val = self.recall(predicted_labels, true_labels)\n        if precision_val + recall_val == 0:\n            return 0.0\n        return 2 * (precision_val * recall_val) / (precision_val + recall_val)",
        true
    ],
    "ClassEval_57_0": [
        "def mrr(data):\n        if isinstance(data, tuple):\n            data = [data]\n        reciprocal_ranks = []\n        for d in data:\n            rank = 1\n            for i, val in enumerate(d[0]):\n                if val == 1:\n                    reciprocal_ranks.append(1 / rank)\n                    break\n                rank += 1\n        mean_reciprocal_rank = np.mean(reciprocal_ranks)\n        return mean_reciprocal_rank, reciprocal_ranks",
        false
    ],
    "ClassEval_57_1": [
        "def map(data):\n        if isinstance(data, tuple):\n            actual_results, ground_truth_num = data\n            precision = np.cumsum(actual_results) / np.arange(1, len(actual_results) + 1)\n            average_precision = np.sum(precision * actual_results) / ground_truth_num\n            return average_precision\n        elif isinstance(data, list):\n            map_values = []\n            individual_maps = []\n            for item in data:\n                actual_results, ground_truth_num = item\n                precision = np.cumsum(actual_results) / np.arange(1, len(actual_results) + 1)\n                average_precision = np.sum(precision * actual_results) / ground_truth_num\n                map_values.append(average_precision)\n                individual_maps.append(precision[-1])\n            return np.mean(map_values), individual_maps",
        false
    ],
    "ClassEval_58_2": [
        "def check_won(self,map):\n        for row in self.player_map:\n            for cell in row:\n                if cell != 'X' and cell != ' ':\n                    return False\n        return True\n\n",
        false
    ],
    "ClassEval_58_3": [
        "def sweep(self, x, y):\n        if self.minesweeper_map[x][y] == -1:\n            return False\n        self.player_map[x][y] = self.minesweeper_map[x][y]\n        if self.player_map[x][y] == 0:\n            self.reveal_empty(x, y)\n        if self.check_won(self.player_map):\n            return True\n        return self.player_map",
        false
    ],
    "ClassEval_59_0": [
        "def add_movie(self, name, price, start_time, end_time, n):\n        new_movie = {\n            'name': name,\n            'price': price,\n            'start_time': datetime.strptime(start_time, '%Y-%m-%d %H:%M'),\n            'end_time': datetime.strptime(end_time, '%Y-%m-%d %H:%M'),\n            'seats': np.zeros((n, n))\n        }\n        self.movies.append(new_movie)",
        false
    ],
    "ClassEval_59_1": [
        "def book_ticket(self, name, seats_to_book):\n        for movie in self.movies:\n            if movie['name'] == name:\n                for seat in seats_to_book:\n                    if movie['seats'][seat[0]][seat[1]] == 0:\n                        movie['seats'][seat[0]][seat[1]] = 1\n                    else:\n                        return \"Booking failed.\"\n                return \"Booking success.\"\n        return \"Movie not found.\"",
        true
    ],
    "ClassEval_5_0": [
        "def interpret(self, display=False):\n        score_segments = []\n        # Logic to interpret the music score and create segments\n        if display:\n            for segment in score_segments:\n                self.display(segment[\"Chord\"], segment[\"Tune\"])\n        return score_segments",
        false
    ],
    "ClassEval_5_1": [
        "def display(self, key, value):\n        print(\"Normal Guitar Playing -- Chord: %s, Play Tune: %s\" % (key, value)",
        false
    ],
    "ClassEval_60_1": [
        "def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        self.cursor.execute(\"INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name) VALUES (?, ?, ?, ?)\", (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()",
        true
    ],
    "ClassEval_60_2": [
        "def search_tickets_by_customer(self, customer_name):\n        self.cursor.execute(\"SELECT * FROM tickets WHERE customer_name = ?\", (customer_name,))\n        return self.cursor.fetchall()",
        true
    ],
    "ClassEval_61_0": [
        "def add_song(self, song):\n    self.playlist.append(song)",
        true
    ],
    "ClassEval_61_1": [
        "def remove_song(self, song):\n    if song in self.playlist:\n        self.playlist.remove(song)",
        true
    ],
    "ClassEval_62_1": [
        "def remove_stop_words(self, string_list, stop_word_list):\n        return [word for word in string_list if word not in stop_word_list]",
        false
    ],
    "ClassEval_62_2": [
        "def process(self, string_list):\n        stop_word_list = self.construct_stop_word_list()\n        return self.remove_stop_words(string_list, stop_word_list)",
        true
    ],
    "ClassEval_63_0": [
        "def process_data(self, string_list):\n        words_list = []\n        for string in string_list:\n            clean_string = re.sub(r'[^a-zA-Z\\s]', '', string).lower()\n            words_list.append(clean_string.split())\n        return words_list",
        true
    ],
    "ClassEval_63_1": [
        "def calculate_word_frequency(self, words_list):\n        word_freq = Counter(words_list)\n        sorted_word_freq = dict(sorted(word_freq.items(), key=lambda x: x[1], reverse=True))\n        return dict(list(sorted_word_freq.items())[:5])",
        false
    ],
    "ClassEval_64_0": [
        "def decimal_to_binary(decimal_num):\n        return bin(decimal_num)[2:]\n\n",
        true
    ],
    "ClassEval_64_5": [
        "def hex_to_decimal(hex_num):\n    return int(hex_num, 16)",
        true
    ],
    "ClassEval_65_2": [
        "def trans_two(self, s):\n    if int(s) < 10:\n        return self.NUMBER[int(s)]\n    elif int(s) < 20:\n        return self.NUMBER_TEEN[int(s) - 10]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + (\" \" + self.NUMBER[int(s[1])]).strip()",
        false
    ],
    "ClassEval_65_3": [
        "def trans_three(self, s):\n        if len(s) == 3:\n            if s[0] != '0':\n                result = self.NUMBER[int(s[0])] + \" HUNDRED\"\n                if s[1:] != '00':\n                    result += \" AND \" + self.trans_two(s[1:])\n            else:\n                result = self.trans_two(s[1:])\n        else:\n            result = self.trans_two(s)\n        return result",
        true
    ],
    "ClassEval_66_0": [
        "def replace(self, string):\n        return re.sub(r'&#(x?)([0-9a-fA-F]+);', lambda m: chr(int(m.group(2), 16) if m.group(1) == 'x' else int(m.group(2))), string)",
        false
    ],
    "ClassEval_66_1": [
        "def is_hex_char(char):\n    return char.isdigit() or char.lower() in 'abcdef'",
        true
    ],
    "ClassEval_67_0": [
        "def add_dish(self, dish):\n        for item in self.menu:\n            if item[\"dish\"] == dish[\"dish\"] and item[\"count\"] >= dish[\"count\"]:\n                self.selected_dishes.append(dish)\n                return True\n        return False",
        false
    ],
    "ClassEval_67_2": [
        "def checkout(self):\n    if self.selected_dishes:\n        return self.calculate_total()\n    else:\n        return False",
        false
    ],
    "ClassEval_68_0": [
        "def get_page(self, page_number):\n        start_index = (page_number - 1) * self.page_size\n        end_index = min(start_index + self.page_size, self.total_items)\n        return self.data[start_index:end_index]\n\n",
        true
    ],
    "ClassEval_68_1": [
        "def get_page_info(self, page_number):\n        current_page = page_number\n        per_page = self.page_size\n        total_pages = self.total_pages\n        total_items = self.total_items\n        has_previous = current_page > 1\n        has_next = current_page < total_pages\n        page_data = self.get_page(page_number)\n        \n        return {\n            'current_page': current_page,\n            'per_page': per_page,\n            'total_pages': total_pages,\n            'total_items': total_items,\n            'has_previous': has_previous,\n            'has_next': has_next,\n            'page_data': page_data\n        }",
        false
    ],
    "ClassEval_69_0": [
        "def merge_pdfs(self, output_filepath):\n    merger = PyPDF2.PdfFileMerger()\n    for reader in self.readers:\n        merger.append(reader)\n    merger.write(output_filepath)\n    merger.close()\n    return f\"Merged PDFs saved at {output_filepath}\"",
        false
    ],
    "ClassEval_69_1": [
        "def extract_text_from_pdfs(self):\n        pdf_texts = []\n        for reader in self.readers:\n            text = \"\"\n            for page_num in range(reader.numPages):\n                page = reader.getPage(page_num)\n                text += page.extract_text()\n            pdf_texts.append(text)\n        return pdf_texts",
        true
    ],
    "ClassEval_6_0": [
        "def setNum(self):\n        block_size, remainder = divmod(len(self.lst), self.limit)\n        return block_size, remainder",
        true
    ],
    "ClassEval_6_1": [
        "def get(self, index):\n        size = len(self.lst) // self.limit\n        remainder = len(self.lst) % self.limit\n        start = index * size + min(index, remainder)\n        end = start + size + (1 if index < remainder else 0)\n        return self.lst[start:end]",
        true
    ],
    "ClassEval_70_1": [
        "def _validate_sex(self, sex: str) -> str:\n        if sex not in [\"Man\", \"Woman\", \"UGM\"]:\n            return None\n        return sex",
        true
    ],
    "ClassEval_70_2": [
        "def _validate_phoneNumber(self, phoneNumber: str) -> str:\n    if phoneNumber == \"\" or len(phoneNumber) != 11 or not phoneNumber.isdigit():\n        return None\n    return phoneNumber",
        true
    ],
    "ClassEval_71_0": [
        "def init_game(self):\n        for i in range(len(self.map)):\n            for j in range(len(self.map[0])):\n                if self.map[i][j] == 'O':\n                    self.player_row = i\n                    self.player_col = j\n                elif self.map[i][j] == 'G':\n                    self.targets.append((i, j))\n                elif self.map[i][j] == 'X':\n                    self.boxes.append((i, j))\n                    self.target_count += 1",
        true
    ],
    "ClassEval_71_2": [
        "def move(self, direction):\n        def move_player(row, col):\n            self.map[self.player_row] = self.map[self.player_row][:self.player_col] + ' ' + self.map[self.player_row][self.player_col + 1:]\n            self.player_row = row\n            self.player_col = col\n            self.map[self.player_row] = self.map[self.player_row][:self.player_col] + 'O' + self.map[self.player_row][self.player_col + 1:]\n\n        def move_box(row, col, box_row, box_col):\n            self.map[box_row] = self.map[box_row][:box_col] + ' ' + self.map[box_row][box_col + 1:]\n            self.boxes.remove((box_row, box_col))\n            self.map[row] = self.map[row][:col] + 'X' + self.map[row][col + 1:]\n            self.boxes.append((row, col))\n\n        def is_valid_move(row, col):\n            return 0 <= row < len(self.map) and 0 <= col < len(self.map[0]) and self.map[row][col] != '#'\n\n        def get_next_position(row, col, direction):\n            if direction == 'w':\n                return row - 1, col\n            elif direction == 's':\n                return row + 1, col\n            elif direction == 'a':\n                return row, col - 1\n            elif direction == 'd':\n                return row, col + 1\n\n        next_row, next_col = get_next_position(self.player_row, self.player_col, direction)\n\n        if is_valid_move(next_row, next_col):\n            if (next_row, next_col) in self.boxes:\n                box_row, box_col = get_next_position(next_row, next_col, direction)\n                if is_valid_move(box_row, box_col) and (box_row, box_col) not in self.boxes:\n                    move_box(next_row, next_col, box_row, box_col)\n                    move_player(next_row, next_col)\n            else:\n                move_player(next_row, next_col)\n\n        return self.check_win()",
        false
    ],
    "ClassEval_72_1": [
        "def findall(self, pattern, text):\n    return re.findall(pattern, text)",
        true
    ],
    "ClassEval_72_7": [
        "def split_sentences(self, text):\n    pattern = self.generate_split_sentences_pattern()\n    return re.split(pattern, text)",
        true
    ],
    "ClassEval_73_3": [
        "def level_up(self):\n    if self.exp >= 100:\n        self.level += 1\n        self.hp += 20\n        self.attack_power += 5\n        self.defense += 5\n        self.exp = 0\n    return (self.level, self.hp, self.attack_power, self.defense)",
        false
    ],
    "ClassEval_73_4": [
        "def is_alive(self):\n    \n    return self.hp > 0\n    \n    ",
        true
    ],
    "ClassEval_74_3": [
        "def send(self, info):\n        if \"addr\" in info and \"content\" in info:\n            self.send_struct[info[\"addr\"]] = info[\"content\"]\n        else:\n            return \"Error: Incorrect structure of information dictionary.\"",
        false
    ],
    "ClassEval_74_4": [
        "def show(self, type):\n    if type == 'send':\n        return self.send_struct\n    elif type == 'receive':\n        return self.receive_struct\n    else:\n        return False",
        true
    ],
    "ClassEval_75_0": [
        "def add_item(self, item, price, quantity=1):\n    if item in self.items:\n        self.items[item]['quantity'] += quantity\n    else:\n        self.items[item] = {'price': price, 'quantity': quantity}",
        true
    ],
    "ClassEval_75_1": [
        "def remove_item(self, item, quantity=1):\n    if item in self.items:\n        self.items[item] -= quantity\n        if self.items[item] <= 0:\n            del self.items[item]",
        false
    ],
    "ClassEval_76_1": [
        "def sign_in(self, username):\n        if username in self.users:\n            self.users[username] = True\n            return True\n        else:\n            return False",
        true
    ],
    "ClassEval_76_2": [
        "def check_sign_in(self, username):\n        if username in self.users:\n            return self.users[username]\n        else:\n            return False",
        true
    ],
    "ClassEval_77_2": [
        "def reset(self):\n        self.length = 1\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.random_food_position()",
        true
    ],
    "ClassEval_77_3": [
        "def eat_food(self):\n        self.length += 1\n        self.score += 100\n        self.random_food_position()",
        true
    ],
    "ClassEval_78_0": [
        "def split_sentences(self, sentences_string):\n    return re.split(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s', sentences_string)",
        true
    ],
    "ClassEval_78_2": [
        "def process_text_file(self, sentences_string):\n        sentences = self.split_sentences(sentences_string)\n        max_word_count = 0\n        for sentence in sentences:\n            word_count = self.count_words(sentence)\n            if word_count > max_word_count:\n                max_word_count = word_count\n        return max_word_count",
        true
    ],
    "ClassEval_79_4": [
        "def select_female_under_age(self, age):\n    return f\"SELECT * FROM {self.table_name} WHERE gender = 'female' AND age < {age};\"",
        false
    ],
    "ClassEval_79_5": [
        "def select_by_age_range(self, min_age, max_age):\n    \n    return f\"SELECT * FROM {self.table_name} WHERE age >= {min_age} AND age <= {max_age};\"\n    \n    ",
        false
    ],
    "ClassEval_7_0": [
        "def clear_expr(self):\n        self.expr = ''.join(char for char in self.expr if char in ['(', ')', '{', '}', '[', ']'])",
        true
    ],
    "ClassEval_7_1": [
        "def check_balanced_brackets(self):\n        for char in self.expr:\n            if char in self.left_brackets:\n                self.stack.append(char)\n            elif char in self.right_brackets:\n                if not self.stack:\n                    return False\n                top = self.stack.pop()\n                if self.left_brackets.index(top) != self.right_brackets.index(char):\n                    return False\n        return not self.stack",
        true
    ],
    "ClassEval_80_2": [
        "def delete(table, where=None):\n    query = \"DELETE FROM \" + table\n    if where:\n        query += \" WHERE \"\n        conditions = [f\"{key}='{value}'\" for key, value in where.items()]\n        query += \" AND \".join(conditions)\n    return query",
        true
    ],
    "ClassEval_80_3": [
        "def update(table, data, where=None):\n        query = f\"UPDATE {table} SET \"\n        query += \", \".join([f\"{key} = '{value}'\" for key, value in data.items()])\n        if where:\n            query += \" WHERE \"\n            query += \" AND \".join([f\"{key} = '{value}'\" for key, value in where.items()])\n        return query",
        false
    ],
    "ClassEval_81_1": [
        "def mode(data):\n    mode_dict = {}\n    for item in data:\n        if item in mode_dict:\n            mode_dict[item] += 1\n        else:\n            mode_dict[item] = 1\n\n    max_freq = max(mode_dict.values())\n    modes = [key for key, value in mode_dict.items() if value == max_freq]\n\n    return modes",
        true
    ],
    "ClassEval_81_2": [
        "def correlation(x, y):\n    n = len(x)\n    mean_x = Statistics3.mean(x)\n    mean_y = Statistics3.mean(y)\n    std_dev_x = Statistics3.standard_deviation(x)\n    std_dev_y = Statistics3.standard_deviation(y)\n\n    if n <= 1:\n        return None\n\n    sum_product = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\n    correlation = sum_product / (n * std_dev_x * std_dev_y)\n\n    return correlation\n\n",
        false
    ],
    "ClassEval_82_3": [
        "def sell_stock(self, stock):\n        for item in self.portfolio:\n            if item[\"name\"] == stock[\"name\"]:\n                if item[\"quantity\"] >= stock[\"quantity\"]:\n                    self.cash_balance += stock[\"quantity\"] * item[\"price\"]\n                    item[\"quantity\"] -= stock[\"quantity\"]\n                    if item[\"quantity\"] == 0:\n                        self.portfolio.remove(item)\n                    return True\n                else:\n                    return False\n        return False",
        true
    ],
    "ClassEval_82_6": [
        "def get_stock_value(self, stock):\n        return stock[\"price\"] * stock[\"quantity\"]",
        true
    ],
    "ClassEval_83_0": [
        "def create_student_table(self):\n    connection = sqlite3.connect(self.database_name)\n    cursor = connection.cursor()\n    cursor.execute('''CREATE TABLE IF NOT EXISTS students (\n                        ID INTEGER PRIMARY KEY,\n                        name TEXT,\n                        age INTEGER,\n                        gender TEXT,\n                        grade INTEGER\n                    )''')\n    connection.commit()\n    connection.close()",
        true
    ],
    "ClassEval_83_3": [
        "def delete_student_by_name(self, name):\n        connection = sqlite3.connect(self.database_name)\n        cursor = connection.cursor()\n        cursor.execute(\"DELETE FROM students WHERE name = ?\", (name,))\n        connection.commit()\n        connection.close()",
        true
    ],
    "ClassEval_84_0": [
        "def read_file_as_json(self):\n        with open(self.file_path, 'r') as file:\n            try:\n                data = json.load(file)\n            except json.JSONDecodeError:\n                file.seek(0)\n                data = file.read()\n        return data\n\n",
        true
    ],
    "ClassEval_84_1": [
        "def read_file(self):\n        with open(self.file_path, 'r') as file:\n            return file.read()\n\n",
        true
    ],
    "ClassEval_85_5": [
        "def auto_check_conflict(self):\n        if self.mode == \"heat\" and self.current_temperature >= self.target_temperature:\n            self.mode = \"off\"\n            return False\n        elif self.mode == \"cool\" and self.current_temperature <= self.target_temperature:\n            self.mode = \"off\"\n            return False\n        else:\n            return True",
        false
    ],
    "ClassEval_85_6": [
        "def simulate_operation(self):\n        start_time = time.time()\n        self.auto_set_mode()\n        while self.current_temperature != self.target_temperature:\n            if self.current_temperature < self.target_temperature:\n                self.current_temperature += 1\n            else:\n                self.current_temperature -= 1\n            time.sleep(1)\n        end_time = time.time()\n        return int(end_time - start_time)",
        false
    ],
    "ClassEval_86_0": [
        "def make_move(self, row, col):\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        else:\n            return False",
        true
    ],
    "ClassEval_86_2": [
        "def is_board_full(self):\n        return all([all([cell != ' ' for cell in row]) for row in self.board])\n\n",
        true
    ],
    "ClassEval_87_1": [
        "def get_current_date(self):\n    return self.datetime.strftime(\"%Y-%m-%d\")",
        true
    ],
    "ClassEval_87_4": [
        "def datetime_to_string(self, datetime):\n    \n    return datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    \n    ",
        true
    ],
    "ClassEval_88_0": [
        "def cos(self, x):\n        x = x * pi / 180\n        result = 0\n        for i in range(10):\n            result += ((-1) ** i) * (x ** (2 * i)) / self.factorial(2 * i)\n        return round(result, 10)",
        false
    ],
    "ClassEval_88_1": [
        "def factorial(self, a):\n    if a == 0:\n        return 1\n    else:\n        return a * self.factorial(a - 1)",
        true
    ],
    "ClassEval_89_0": [
        "def _generate_cards(self):\n        self.nums = [random.randint(1, 9) for _ in range(4)]\n\n",
        true
    ],
    "ClassEval_89_3": [
        "def evaluate_expression(self, expression):\n        return eval(expression) == 24",
        true
    ],
    "ClassEval_8_1": [
        "def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient balance.\")\n        self.balance -= amount\n        return self.balance",
        true
    ],
    "ClassEval_8_2": [
        "def view_balance(self):\n    return self.balance",
        true
    ],
    "ClassEval_90_0": [
        "def get_scheme(self):\n    return self.url.split(\"://\")[0]",
        false
    ],
    "ClassEval_90_1": [
        "def get_host(self):\n    url_parts = self.url.split(\"://\")\n    if len(url_parts) > 1:\n        return url_parts[1].split(\"/\")[0]\n    return \"\"",
        false
    ],
    "ClassEval_91_1": [
        "def parse(self, path, charset):\n        decoded_path = urllib.parse.unquote(path, encoding=charset)\n        self.segments = self.fix_path(decoded_path).split('/')",
        false
    ],
    "ClassEval_91_2": [
        "def fix_path(path):\n    return path.strip('/')",
        true
    ],
    "ClassEval_92_0": [
        "def insert_user(self, username, password):\n        self.cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n        self.connection.commit()\n\n",
        true
    ],
    "ClassEval_92_1": [
        "def search_user_by_username(self, username):\n        self.cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))\n        return self.cursor.fetchall()",
        false
    ],
    "ClassEval_93_1": [
        "def cosine_similarities(vector_1, vectors_all):\n    similarities = []\n    for vector in vectors_all:\n        similarity = dot(matutils.unitvec(vector_1), matutils.unitvec(vector))\n        similarities.append(similarity)\n    return array(similarities)",
        true
    ],
    "ClassEval_93_2": [
        "def n_similarity(vector_list_1, vector_list_2):\n    return np.array([VectorUtil.similarity(vector_1, vector_2) for vector_1, vector_2 in zip(vector_list_1, vector_list_2)])",
        false
    ],
    "ClassEval_94_1": [
        "def insert_coin(self, amount):\n    self.balance += amount\n    return self.balance",
        true
    ],
    "ClassEval_94_2": [
        "def purchase_item(self, item_name):\n        if item_name in self.inventory and self.inventory[item_name][\"quantity\"] > 0 and self.inventory[item_name][\"price\"] <= self.balance:\n            self.inventory[item_name][\"quantity\"] -= 1\n            self.balance -= self.inventory[item_name][\"price\"]\n            return self.balance\n        else:\n            return False",
        true
    ],
    "ClassEval_95_0": [
        "def add_product(self, product_id, name, quantity):\n        if product_id in self.inventory:\n            self.update_product_quantity(product_id, quantity)\n        else:\n            self.inventory[product_id] = Product(product_id, name, quantity)",
        false
    ],
    "ClassEval_95_4": [
        "def change_order_status(self, order_id, status):\n        if order_id in self.orders:\n            self.orders[order_id]['status'] = status\n        else:\n            return False",
        true
    ],
    "ClassEval_96_0": [
        "def query(self, weather_list, tmp_units = 'celsius'):\n        if self.city in weather_list:\n            self.temperature, self.weather = weather_list[self.city]\n            if tmp_units == 'fahrenheit':\n                self.temperature = self.celsius_to_fahrenheit()\n            return (self.temperature, self.weather)\n        else:\n            return None",
        false
    ],
    "ClassEval_96_2": [
        "def celsius_to_fahrenheit(self):\n        return (self.temperature * 9/5) + 32",
        true
    ],
    "ClassEval_97_0": [
        "def text2int(self, textnum):\n        if self.is_valid_input(textnum):\n            current = result = 0\n            for word in textnum.split():\n                if word not in self.numwords:\n                    raise ValueError(\"Invalid input\")\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            return str(result + current)\n        else:\n            raise ValueError(\"Invalid input\")",
        false
    ],
    "ClassEval_97_1": [
        "def is_valid_input(self, textnum):\n        words = textnum.split()\n        for word in words:\n            if word not in self.numwords and word not in self.ordinal_words and word not in self.scales and word not in self.units and word not in self.tens:\n                return False\n        return True",
        false
    ],
    "ClassEval_98_1": [
        "def write_xml(self, file_name):\n    try:\n        tree = ET.ElementTree(self.root)\n        tree.write(file_name)\n        return True\n    except:\n        return False",
        true
    ],
    "ClassEval_98_2": [
        "def process_xml_data(self, file_name):\n        self.read_xml()\n        if self.root is not None:\n            for elem in self.root.iter():\n                elem.text = elem.text.upper()\n            return self.write_xml(file_name)\n        return False",
        true
    ],
    "ClassEval_99_2": [
        "def extract_file(self, file_name, output_path):\n        with zipfile.ZipFile(self.file_name, 'r') as zip_ref:\n            try:\n                zip_ref.extract(file_name, output_path)\n                return True\n            except:\n                return False",
        false
    ],
    "ClassEval_99_3": [
        "def create_zip_file(self, files, output_file_name):\n        try:\n            with zipfile.ZipFile(output_file_name, 'w') as zipf:\n                for file in files:\n                    zipf.write(file)\n            return True\n        except:\n            return False",
        true
    ],
    "ClassEval_9_0": [
        "def add(num1, num2):\n    return str(int(num1) + int(num2))",
        true
    ],
    "ClassEval_9_1": [
        "def subtract(num1, num2):\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        diff = []\n        borrow = 0\n        for i in range(len(num2)):\n            d = int(num1[i]) - int(num2[i]) - borrow\n            borrow = 0\n            if d < 0:\n                d += 10\n                borrow = 1\n            diff.append(str(d))\n        for i in range(len(num2), len(num1)):\n            d = int(num1[i]) - borrow\n            borrow = 0\n            if d < 0:\n                d += 10\n                borrow = 1\n            diff.append(str(d))\n        diff = diff[::-1]\n        return ''.join(diff).lstrip('0') or '0'",
        false
    ]
}