;Unnamed: 0.1;Unnamed: 0;Topic;Count;Name;Representation;Representative_Docs;Task;LLM-Easy (Global);LLM-Hard (Global);LLM-Easy (Llama);LLM-Hard (Llama);LLM-Easy (Deepseek);LLM-Hard (Deepseek);LLM-Easy (MagiCoder);LLM-Hard (MagiCoder);LLM-Easy (CodeGemma);LLM-Hard (CodeGemma);LLM-Easy (GPT);LLM-Hard (GPT)
0;0;0;0;20;0_game_player_map_score_cards;['game', 'player_map', 'score', 'cards', 'check', 'points', 'if', 'wins', 'indicating', 'row'];"['Determines the winner of a game by comparing the hand values of ""player_hand"" and ""dealer_hand"". If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21. Otherwise, the winner is the one with the lower hand value. Return \'Dealer wins\' or \'Player wins\'.', 'Calculate the value of the poker cards stored in the ""hand"" list according to the rules of the Blackjack Game. If the card is a digit, its value is added to the total hand value. Value of \'J\', \'Q\', or \'K\' is 10, while Aces are worth 11. If the total hand value exceeds 21 and there are Aces present, one Ace is treated as having a value of 1 instead of 11, until the hand value is less than or equal to 21, or all Aces have been counted as a value of 1.', 'Move the player in the ""PushBoxGame"" class based on the specified ""direction"" and check if the game is won. The ""direction"" parameter can be \'w\', \'s\', \'a\', or \'d\' representing up, down, left, or right respectively. Return ""True"" if the game is won, otherwise return ""False"".']";33, 38, 41, 60, 61, 75, 79, 84, 85, 88, 90, 113, 125, 158, 162, 186, 188, 189, 194, 197;33,38,41,60,79,84,85,88,113,125,158,162,188,194;61,75,90,186,189,197;33,38,41,60,79,84,85,88,113,125,158,162,186,188,194;61,75,90,189,197;33,38,41,60,79,84,88,113,125,158,162,188,194;61,75,85,90,186,189,197;33,38,41,60,79,84,85,88,113,125,158,162,188,189,194;61,75,90,186,197;33,38,41,60,79,84,85,88,113,125,158,162,186,188,194,197;61,75,90,189;33,38,41,60,61,79,84,85,88,113,125,158,162,188,194;75,90,186,189,197
1;1;1;1;17;1_cash_balance_amount_exchange_currency;['cash_balance', 'amount', 'exchange', 'currency', 'calculate_total', 'account', 'addition', 'quantity', 'stock', 'customer'];"['Sell a specific ""stock"" and update ""self.portfolio"" by removing it and adjusting ""self.cash_balance"" accordingly. The ""stock"" parameter is a dictionary with keys ""name"", ""price"", and ""quantity"". Return ""True"" if the stock was sold successfully, otherwise ""False"" if the operation failed due to insufficient stock quantity.', 'Withdraw a specified ""amount"" from the bank account, reducing the current balance. If ""amount"" is negative, raise a ""ValueError"" with the message ""Invalid amount"". If ""amount"" exceeds the current balance, raise a ""ValueError"" with the message ""Insufficient balance."". Return the updated balance.', 'Purchase a product specified by ""item_name"" from the vending machine and update the balance accordingly. Return the updated balance if the purchase is successful, otherwise return ""False"" if the product is out of stock or insufficient balance.']";9, 25, 46, 62, 65, 86, 87, 95, 100, 107, 109, 119, 135, 143, 145, 147, 168;9,25,46,62,65,86,87,95,100,107,109,119,135,143,145,147,168;;46,62,65,86,95,100,107,109,119,135,143,145,147,168;9,25,87;9,25,62,65,86,87,95,100,107,109,119,135,143,145,147,168;46;9,25,46,62,65,86,87,95,100,107,109,135,143,145,147,168;119;9,25,46,62,65,86,87,95,100,107,109,119,135,143,145,147,168;;9,46,62,65,86,87,95,100,107,109,119,135,143,145,147,168;25
2;2;2;2;13;2_ip_address_ipv4_ip_html_text;['ip_address', 'ipv4', 'ip', 'html_text', 'command_string', 'check', '_convert_type', 'string', 'code', 'octets'];"['Determine if the IP address is valid by checking if it consists of four decimal octets separated by dots (\'.\'). Each octet should be a number from 0 to 255. Return ""True"" if the IP address is valid, otherwise return ""False"".', 'Parse the given command string ""command_string"" into arguments and check if all required arguments are present. Use the ""_convert_type"" function to ensure each argument is stored with the correct type in the ""arguments"" dictionary. Return a tuple where the first element is ""True"" if all required arguments are present, otherwise ""False"", and the second element is ""None"" if no arguments are missing, otherwise a set of missing argument names.', 'Check if the given IP address ""ip_address"" is a valid IPv4 address. Return ""True"" if the IP address is valid, otherwise return ""False"".']";29, 45, 48, 49, 94, 103, 131, 146, 156, 159, 164, 182, 198;48,49,94,103,131,159,164,182,198;29,45,146,156;48,49,94,103,131,146,159,164,182,198;29,45,156;48,49,94,103,131,159,164,182,198;29,45,146,156;48,49,94,103,131,146,159,164,182,198;29,45,156;48,49,94,103,131,159,164,182,198;29,45,146,156;48,94,103,131,146,159,164,182,198;29,45,49,156
3;3;3;3;12;3_interpolation_calculate_computed_compute;['interpolation', 'calculate', 'computed', 'compute', 'x_interp', 'calculated', 'interpolated', 'vector_1', 'vectors', 'coefficient'];"[' Calculate the calorie intake based on ""BMR"" (Basal Metabolic Rate) and the user\'s condition. The ""BMR"" is computed differently depending on the user\'s ""sex"". For a male, the ""BMR"" is calculated with the formula `10 * self.weight + 6.25 * self.height - 5 * self.age + 5`, and for a female, it is `10 * self.weight + 6.25 * self.height - 5 * self.age - 161`. Depending on the user\'s condition, based on an integer 1, -1 or 0, if too fat, multiply ""BMR"" by 1.2; if too thin, multiply by 1.6; if normal, multiply by 1.4. Return the calculated calorie intake as a float.', 'Perform linear interpolation on two-dimensional data using the given coordinates and values. Specifically, for each interpolation point specified by ""x_interp"" and ""y_interp"", compute the interpolated z-value using the surrounding original data points provided in ""x"", ""y"", and ""z"".', 'Compute the Mean Reciprocal Rank (MRR) of the input data. The MRR measures the average of the reciprocal ranks of results. The input ""data"" should be a tuple representing a single list of binary values and its corresponding total count, or a list of such tuples. Each binary value (1 or 0) corresponds to whether an answer is correct or incorrect. The function returns the mean reciprocal rank if ""data"" is a tuple, and the average MRR across all provided tuples if ""data"" is a list. The second return value is a list containing the reciprocal ranks for each individual tuple in the input.']";3, 5, 19, 30, 36, 40, 50, 96, 140, 165, 181, 183;3,96,181,183;5,19,30,36,40,50,140,165;3,181,183;5,19,30,36,40,50,96,140,165;3,30,96,165,181,183;5,19,36,40,50,140;3,96,165,181,183;5,19,30,36,40,50,140;3,96,181,183;5,19,30,36,40,50,140,165;3,30,96,181,183;5,19,36,40,50,140,165
4;4;4;4;11;4_stop_word_list_word_list_sentences_string_punctuations;['stop_word_list', 'word_list', 'sentences_string', 'punctuations', 'punctuation', 'lemmatize', 'string_list', 'tokenize', 'word', 'substring'];"['Remove punctuations from the input ""sentence"", tokenize it, assign part-of-speech tags to each word, lemmatize each word based on its part-of-speech, and return the list of lemmatized words.', 'Construct a stop word list including ""a"", ""an"", ""the"", and remove all the stop words from the list of strings ""string_list"". Return a list of words without stop words.', 'Remove punctuation marks and split a sentence ""sentence"" into words. Find the longest word from the split that exists in the ""self.word_list"". Words are case-insensitive. If no word in ""self.word_list"" matches, return an empty string """".']";0, 4, 13, 22, 24, 71, 83, 115, 116, 153, 180;0,4,13,22,24,83,116,180;71,115,153;4,13,22,83,116;0,24,71,115,153,180;0,4,13,22,24,83,116,153,180;71,115;0,4,13,22,116,180;24,71,83,115,153;0,4,13,22,24,83,116,180;71,115,153;0,4,13,22,24,83,116,153,180;71,115
5;5;5;5;10;5_save_file_name_output_file_name_file_name_output_filepath;['save_file_name', 'output_file_name', 'file_name', 'output_filepath', 'file', '_process', 'file_path', 'csv', 'output_path', 'files'];"['Modify the data in XML elements by capitalizing the elements\' text and write the updated XML data to a new file specified by ""file_name"". Return ""True"" if the write operation is successful, otherwise ""False"".', 'Write data to the specified Excel file by accepting two parameters ""data"" and ""file_name"". The ""data"" parameter should contain a list of tuples representing rows, and the ""file_name"" parameter should be a string indicating the file name of the Excel file to write to. Return 1 if the writing process is successful, otherwise return 0.', 'Write the XML data to the specified file ""file_name"". Return ""True"" if the write operation is successful, otherwise return ""False"".']";14, 37, 47, 63, 73, 111, 118, 167, 176, 192;37,63,73,111,167,176,192;14,47,118;37,63,111,167,176,192;14,47,73,118;37,63,73,111,167,176,192;14,47,118;37,63,73,111,167,176,192;14,47,118;37,63,73,111,118,167,176,192;14,47;37,63,73,111,167,176,192;14,47,118
6;6;6;6;9;6_permutations_algorithm_combinations_factorial;['permutations', 'algorithm', 'combinations', 'factorial', 'counts', 'count', 'calculate', 'numbers', 'division', 'partitioning'];"['Counts the total number of all possible arrangements by choosing at least 1 item and at most ""n"" items from ""n"" items. It returns the cumulative count of these arrangements.', 'Calculate the number of all possible combinations for a given number of elements ""n"". Return an integer indicating the number of combinations or False if ""n"" is negative or greater than 63. If the number of combinations equals 2^63-1, return ""float(\'inf\')"".', 'Counts the number of arrangements by choosing ""m"" items from ""n"" items (permutations). If ""m"" is not provided or ""n"" equals ""m"", returns the factorial of ""n"".']";8, 34, 72, 98, 144, 154, 169, 187, 196;8,72,98,144,154,169,187;34,196;8,72,98,144,154,169,187;34,196;8,34,98,144,154,169,187;72,196;8,34,72,98,144,154,169,187;196;8,98,144,154,187;34,72,169,196;8,72,98,144,154,169,187,196;34
7;7;7;7;9;7_calculate_decimal_median_calculated;['calculate', 'decimal', 'median', 'calculated', 'data', 'precision', 'kurtosis', 'dataset', 'compute', 'average'];"['Calculate the median of a group of data ""data"", accurate to two digits after the Decimal separator. Return the median value as a float.', 'Calculate the average value of a group of data ""data"", accurate to two digits after the decimal separator. Return the mean value as a float.', 'Compute the Mean Average Precision (MAP) of the input ""data"". MAP measures the mean of average precisions (AP) where AP is computed from the input data. The ""data"" must be either a tuple (representing actual results and ground truth number) or a list of such tuples. Each element in the tuple should represent whether an answer is correct (1) or incorrect (0), and the total count of ground truth responses. The function should return the MAP value if the input is a single tuple, or the average MAP value along with a list of individual MAP values if the input is a list of tuples.']";16, 23, 31, 59, 78, 80, 129, 163, 195;16,31,78,80,129,163;23,59,195;16,23,31,78,80,129,163;59,195;16,31,78,80,129,163;23,59,195;16,31,78,80,129,163;23,59,195;16,31,78,80,129,163;23,59,195;16,31,78,80,129,163;23,59,195
8;8;8;8;9;12_sql_select_female_under_age_table_name_query;['sql', 'select_female_under_age', 'table_name', 'query', 'database', 'select', 'generate', 'generates', 'min_age', 'table'];"['Generate the DELETE SQL statement for the specified ""table"" and optional conditions in ""where"". Return the constructed SQL query string.', 'Generate a SQL statement to select records within a specified age range using the ""min_age"" and ""max_age"" parameters. Return the generated SQL statement as a string.', 'Generate the UPDATE SQL statement based on the provided ""table"", ""data"", and ""where"" parameters. The function constructs a query that updates the specified ""table"" using the key-value pairs in ""data"", and optionally filters the records to be updated using the conditions specified in ""where"".']";74, 97, 104, 139, 142, 155, 193, 130, 166;74,155,193,130,166;97,104,139,142;74,155,193,130,166;97,104,139,142;74,104,155,193,130,166;97,139,142;74,155,193,130,166;97,104,139,142;74,155,193,130,166;97,104,139,142;74,155,193,130,166;97,104,139,142
9;9;9;9;7;9_decimal_num_hex_num_textnum_digit;['decimal_num', 'hex_num', 'textnum', 'digit', 'integer', 'decimal', 'numbers', 'number', 'convert', 'binary'];"['Convert the word string ""textnum"" to the corresponding integer string. The function should take a single parameter ""textnum"", which is a string of numbers written in words, and return a string where these textual representations are converted to their numerical equivalents.', 'Convert a number from hex format to decimal format. Accept the hex number as a string parameter ""hex_num"" and return its decimal representation as an integer.', 'Convert the input ""decimal_num"" from decimal format to binary format and return the binary representation as a string. ']";44, 70, 89, 106, 133, 136, 174;70,106,136,174;44,89,133;70,106,136,174;44,89,133;70,106,136,174;44,89,133;70,106,136,174;44,89,133;70,106,136,174;44,89,133;70,89,106,133,136,174;44
10;10;10;10;7;10_users_user_username_employee_id;['users', 'user', 'username', 'employee_id', 'check', 'checking', 'message', 'retrieve', 'employee', 'sender'];"['Search for and retrieve user information from the ""users"" table based on the provided ""username"". Return the user details as a list of tuples.', 'Check if a user is signed in based on their ""username"". Return ""True"" if the user is currently signed in, otherwise return ""False"".', 'Sign in a user ""username"" if the user is in ""self.users"" and change their state to ""True"". Return ""True"" if the user is signed in successfully, otherwise ""False"".']";11, 28, 43, 58, 148, 160, 199;11,28,43,58,148;160,199;28,43,58,148,160;11,199;11,43,58,148;28,160,199;11,43,58,148,160;28,199;28,43,58,148;11,160,199;28,43,58,148;11,160,199
11;11;11;11;6;11_subtracts_subtract_subtraction_calculate;['subtracts', 'subtract', 'subtraction', 'calculate', 'multiply', 'operand_stack', 'num2', 'numbers', 'sum', 'operator_stack'];"['Use the operator at the top of the ""operator_stack"" to perform the operation on the two numbers at the top of the ""operand_stack"", and store the result at the top of the ""operand_stack"". ', 'Subtract ""num1"" from ""num2"", both represented as strings of large numbers, and return their difference as a string.', 'Adds two big numbers ""num1"" and ""num2"", both represented as strings, and returns their sum also as a string.']";51, 101, 161, 170, 184, 191;51,101,161,170,184;191;101,161,170,184,191;51;101,161,170,184;51,191;101,161,170,184;51,191;101,161,170,184;51,191;51,101,161,170,184,191;
12;12;12;12;5;8_employee_id_remove_deleting_removed;['employee_id', 'remove', 'deleting', 'removed', 'deletes', 'book_id', 'resume', 'withdraw', 'id', 'resumes'];"['Clear the email box by deleting the oldest emails until the email box has enough space to accommodate the given ""size"". ', 'This function is used to withdraw resumes, and remove the resume information from the ""self.resumes"" list.', 'Create a ""students"" table in the database if it does not exist already with fields ID of type int, name of type str, age of type int, gender of type str, and grade of type int. This function should return ""None"".']";35, 92, 102, 110, 152;35,92,102,152;110;35,92,102,152;110;35,92,102,152;110;35,92,102,152;110;35,92,102,152;110;35,92,102;110,152
13;13;13;13;6;13_file_extracting_file_path_file_name;['file', 'extracting', 'file_path', 'file_name', 'csv', 'files', 'extract', 'pdf', 'format', 'read'];"['Read and return the content of the ""self.file_path"" file.', 'Read the CSV file specified by ""file_name"", extracting the title and the remaining data. Return these as a tuple where the first element is a list representing the title (column headers) and the second element is a list of lists, each containing the data for a row.', 'Read the file specified by ""self.file_path"" and interpret its contents as JSON. If the file content doesn\'t follow JSON format, an error will be raised.']";26, 52, 121, 122, 124, 151;26,52,121,122,124,151;;26,52,121,122,124,151;;26,52,121,122,124,151;;26,52,121,122,124,151;;26,52,121,122,124,151;;26,52,121,122,124,151;
14;14;14;14;5;14_ciphertext_decryption_cipher_encrypted_text;['ciphertext', 'decryption', 'cipher', 'encrypted_text', 'plaintext', 'deciphers', 'encrypted', 'encrypt', 'deciphered', 'vigenere'];"['Encrypt the plaintext ""plaintext"" using the Vigenere cipher. Return the resulting ciphertext.', 'Encrypt the plaintext ""plaintext"" using the Rail Fence cipher and the number of rails ""rails"". Return the ciphertext as a string.', 'Deciphers the given ciphertext using the Rail Fence cipher. The function receives ""encrypted_text"", a string representing the encrypted message, and ""rails"", an integer specifying the number of rails used for decryption. It returns the deciphered plaintext as a string.']";12, 128, 132, 138, 175;12,138,175;128,132;175;12,128,132,138;12,138,175;128,132;12,128,138,175;132;12,138,175;128,132;12,175;128,132,138
15;15;15;15;5;15_add_student_name_class_name_adds;['add', 'student_name', 'class_name', 'adds', 'student', 'list', 'playlist', 'classes', 'class', 'available'];"['Add a course to the ""self.courses"" list if the course is not already in it.', 'Register a class ""class_name"" for a student ""student_name"". The function returns the list of all classes the student has registered.', 'Add the course score for a specific student in the ""self.students"" dictionary. If the student\'s name exists in the dictionary, update the course score accordingly.']";7, 17, 20, 21, 123;7,17,20,123;21;7,17,20,123;21;17,20,21,123;7;7,17,20,123;21;7,17,20,21,123;;7,17,20,21,123;
16;16;16;16;5;16_unicode_utf_binary_string_string;['unicode', 'utf', 'binary_string', 'string', 'convert', 'whitespace', 'binary', 'encoded', 'replace', 'removing'];"['Replace numeric character references in the input string ""string"" with their corresponding Unicode characters.', 'Clean the ""self.binary_string"" by removing all non-0 or 1 characters.', 'Transform the given ""expression"" by removing all whitespace characters and ensuring it does not end with an equals sign. Return the processed string.']";64, 91, 108, 112, 117;64,108,117;91,112;108,117;64,91,112;64,108,117;91,112;64,108,117;91,112;64,108,117;91,112;64,108,117;91,112
17;17;17;17;4;17_page_number_retrieve_upcoming_list;['page_number', 'retrieve', 'upcoming', 'list', 'get', 'scheduled', 'date', 'information', 'data', 'following'];"['Get all events scheduled on a specific ""date"" from the event list ""self.events"". Each event is represented as a dictionary with at least a ""date"" key. This function returns a list of all such events that match the given ""date"".', 'Retrieve information about a specific page ""page_number"". Return a dictionary containing the following page information: current page number, per page number of items, total pages, total items, if the page has a previous page, if the page has a next page and the page data.', 'Retrieve a specific page of data based on the ""page_number"". Return the data on the specified page as a list.']";1, 56, 171, 177;1,56,171,177;;1,56,171,177;;1,56,171,177;;1,56,171,177;;1,56,171,177;;1,56,171,177;
18;18;18;18;4;18_celsius_to_fahrenheit_current_temperature_target_temperature_temperature;['celsius_to_fahrenheit', 'current_temperature', 'target_temperature', 'temperature', 'celsius', 'thermostat', 'fahrenheit', 'weather_list', 'tmp_units', 'auto_set_mode'];"['Query the weather and temperature for the specified ""city"" in the ""weather_list"", and convert the temperature to the desired ""tmp_units"". Return the temperature and weather of the city as a tuple.', 'Simulate the operation of the ""Thermostat"" by adjusting the ""self.current_temperature"" towards the ""self.target_temperature"" based on the ""self.mode"". It automatically sets the mode using the ""auto_set_mode"" method, then adjusts the temperature step by step until the target temperature is reached. Return the time it took for the simulation to complete in integer seconds.', 'Check if there is a conflict between the ""mode"" and the relationship between ""self.current_temperature"" and ""self.target_temperature"". If there is a conflict, the operating mode will be adjusted automatically. Return ""True"" if the mode isn\'t in conflict with the relationship between the current temperature and the target temperature, or ""False"" otherwise.']";10, 66, 137, 178;137;10,66,178;137;10,66,178;137;10,66,178;137;10,66,178;137;10,66,178;137;10,66,178
19;19;19;19;4;19_brackets_textnum_if_check;['brackets', 'textnum', 'if', 'check', 'input', 'operator', 'expression', 'valid', 'is', 'contains'];"['Check if the input text ""textnum"" contains only valid words that can be converted into numbers. Return ""True"" if the input is valid, otherwise return ""False"".', ' Checks if the expression has balanced brackets. Returns ""True"" if the brackets are balanced, otherwise returns ""False"".', 'Returns the priority of the specified operator ""operator"" using a predefined set of priorities where \'^\' has the highest priority, followed by \'/\' and \'*\', and \'+\' and \'-\' have the lowest priority. If the operator is not recognized, return 0.']";15, 42, 67, 150;42,67,150;15;67,150;15,42;42,67,150;15;42,67,150;15;42,67,150;15;42,67,150;15
20;20;20;20;3;20_booked_rooms_booked_booking_tickets;['booked_rooms', 'booked', 'booking', 'tickets', 'available_rooms', 'ticket', 'room_type', 'room_number', 'check', 'room'];"['Add a new movie into the list ""self.movies"". The function accepts five parameters: ""name"" (movie name), ""price"" (price for one ticket), ""start_time"", ""end_time"", and ""n"" (the size of the seating area as n*n).', 'Book tickets for a specified movie by changing the seat values in ""self.movies"". If the booking is successful, return ""Booking success."". If the seat is already booked, return ""Booking failed."". If the movie is not found, return ""Movie not found."".', ' Check if rooms of the specified type ""room_type"" are available. If the desired number of rooms ""room_number"" can be booked for the guest ""name"", modify ""self.available_rooms"" and ""self.booked_rooms"" appropriately and return \'Success!\'. If the ""room_number"" exceeds the number available but is not zero, return the number of remaining rooms. If the room type is not found or no rooms are left, return False.']";39, 54, 185;39,54,185;;39,54,185;;39,54,185;;39,54,185;;39,54,185;;39,54,185;
