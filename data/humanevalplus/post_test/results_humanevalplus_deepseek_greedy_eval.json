{"0": ["\ndef has_close_elements(nums, threshold):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if abs(nums[i] - nums[i + 1]) < threshold:\n            return True\n    return False\n", true], "1": ["\ndef separate_paren_groups(s):\n    s = s.replace(\" \", \"\")  # remove spaces\n    groups = []\n    stack = []\n    start = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            if not stack:\n                start = i\n            stack.append(c)\n        elif c == ')':\n            stack.pop()\n            if not stack:\n                groups.append(s[start:i+1])\n    return groups\n", true], "2": ["\ndef truncate_number(n):\n    return n - int(n)\n", true], "3": ["\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", true], "4": ["\ndef mean_absolute_deviation(lst):\n    mean = sum(lst) / len(lst)\n    return sum(abs(x - mean) for x in lst) / len(lst)\n", true], "5": ["\ndef intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n", true], "6": ["\ndef parse_nested_parens(s):\n    result = []\n    for group in s.split(' '):\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        result.append(max_count)\n    return result\n", false], "7": ["\ndef filter_by_substring(lst, substr):\n    return [s for s in lst if substr in s]\n", true], "8": ["\ndef sum_product(lst):\n    if not lst:\n        return 0, 1\n    else:\n        return sum(lst), functools.reduce(lambda x, y: x * y, lst)\n", false], "9": ["\ndef rolling_max(lst):\n    if not lst:\n        return []\n    max_lst = [lst[0]]\n    for i in range(1, len(lst)):\n        max_lst.append(max(lst[i], max_lst[i-1]))\n    return max_lst\n", true], "10": ["\ndef make_palindrome(s):\n    n = len(s)\n    rev_s = s[::-1]\n    for i in range(n):\n        if s.startswith(rev_s[i:]):\n            return s + rev_s[:i]\n    return s + rev_s\n", false], "11": ["\ndef string_xor(a, b):\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", true], "12": ["\ndef longest(strings):\n    if not strings:\n        return None\n    max_length = len(max(strings, key=len))\n    for string in strings:\n        if len(string) == max_length:\n            return string\n", true], "13": ["\ndef greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n", true], "14": ["\ndef all_prefixes(s):\n    return [s[:i] for i in range(1, len(s)+1)]\n", true], "15": ["\ndef string_sequence(n):\n    return ' '.join(str(i) for i in range(n+1))\n", true], "16": ["\ndef count_distinct_characters(s):\n    return len(set(s.lower()))\n", true], "17": ["\ndef parse_music(music_string):\n    notes = music_string.split('|')\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o.':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats\n", false], "18": ["\ndef how_many_times(substring, string):\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n", false], "19": ["\ndef sort_numbers(numbers_str):\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers_str.split()\n    sorted_list = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_list)\n", true], "20": ["\ndef find_closest_elements(lst):\n    lst.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(lst)):\n        diff = lst[i] - lst[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (lst[i-1], lst[i])\n    return result\n", true], "21": ["\ndef rescale_to_unit(lst):\n    min_val = min(lst)\n    max_val = max(lst)\n    return [(x - min_val) / (max_val - min_val) for x in lst]\n", false], "22": ["\ndef filter_integers(lst):\n    return [i for i in lst if isinstance(i, int)]\n", false], "23": ["\ndef strlen(s):\n    return len(s)\n", true], "24": ["\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", true], "25": ["\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", true], "26": ["\ndef remove_duplicates(lst):\n    result = []\n    for i in lst:\n        if lst.count(i) == 1:\n            result.append(i)\n    return result\n", true], "27": ["\ndef flip_case(s):\n    return s.swapcase()\n", true], "28": ["\ndef concatenate(lst):\n    return ''.join(lst)\n", true], "29": ["\ndef filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n", true], "30": ["\ndef get_positive(numbers):\n    return [num for num in numbers if num > 0]\n", true], "31": ["\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", true], "32": ["\ndef find_zero(coefficients):\n    n = len(coefficients)\n    if n % 2 != 0:\n        return None\n    a = max(coefficients)\n    return -a / 2\n", false], "33": ["\ndef sort_third(lst):\n    sorted_third = sorted(lst[i] for i in range(len(lst)) if i % 3 == 0)\n    for i, val in enumerate(sorted_third):\n        lst[i*3] = val\n    return lst\n", true], "34": ["\ndef unique(lst):\n    return sorted(set(lst))\n", true], "35": ["\ndef max_element(lst):\n    return max(lst)\n", true], "36": ["\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", true], "37": ["\ndef sort_even(lst):\n    even_indices_elements = [lst[i] for i in range(0, len(lst), 2)]\n    even_indices_elements.sort()\n    new_lst = [even_indices_elements.pop(0) if i % 2 == 0 else lst[i] for i in range(len(lst))]\n    return new_lst\n", true], "38": ["\ndef encode_cyclic(s):\n    return ''.join(s[i+2] + s[i] + s[i+1] for i in range(0, len(s), 3))\n\ndef decode_cyclic(s):\n    return ''.join(s[i+2] + s[i] + s[i+1] for i in range(0, len(s), 3))\n", false], "39": ["\ndef prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        fib_sequence = [0, 1]\n        while len(fib_sequence) <= num:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence[num]\n\n    count = 0\n    num = 0\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n        num += 1\n    return fibonacci(num - 1)\n", false], "40": ["\ndef triples_sum_to_zero(lst):\n    n = len(lst)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if lst[i] + lst[j] + lst[k] == 0:\n                    return True\n    return False\n", true], "41": ["\ndef car_race_collision(n):\n    return n**2\n", true], "42": ["\ndef incr_list(lst):\n    return [i+1 for i in lst]\n", true], "43": ["\ndef pairs_sum_to_zero(lst):\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", true], "44": ["\ndef change_base(x, base):\n    if base < 2 or base > 10:\n        return \"Invalid base. Base should be between 2 and 10.\"\n    else:\n        return str(int(x, 10)).zfill(len(str(int(x, 10))))[::-1]\n\n", false], "45": ["\ndef triangle_area(base, height):\n    return 0.5 * base * height\n", true], "46": ["\ndef fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", true], "47": ["\ndef median(lst):\n    sorted_lst = sorted(lst)\n    lst_length = len(lst)\n    if lst_length % 2 == 0:\n        return (sorted_lst[lst_length//2] + sorted_lst[lst_length//2 - 1]) / 2\n    else:\n        return sorted_lst[lst_length//2]\n", true], "48": ["\ndef is_palindrome(s):\n    return s == s[::-1]\n", true], "49": ["\ndef modp(n, p):\n    return pow(2, n, p)\n", true], "50": ["\ndef decode_shift(s):\n    decoded = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            decoded += chr((ord(char) - ascii_offset - 5) % 26 + ascii_offset)\n        else:\n            decoded += char\n    return decoded\n", false], "51": ["\ndef remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in s if c not in vowels])\n", true], "52": ["\ndef below_threshold(lst, threshold):\n    return all(i < threshold for i in lst)\n", true], "53": ["\ndef add(x, y):\n    return x + y\n", true], "54": ["\ndef same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)\n", false], "55": ["\ndef fib(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", false], "56": ["\ndef correct_bracketing(s):\n    stack = []\n    for bracket in s:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack\n", true], "57": ["\ndef monotonic(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        increasing = all(i < j for i, j in zip(lst, lst[1:]))\n        decreasing = all(i > j for i, j in zip(lst, lst[1:]))\n        return increasing or decreasing\n", false], "58": ["\ndef common(list1, list2):\n    return sorted(set(list1) & set(list2))\n", true], "59": ["\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", true], "60": ["\ndef sum_to_n(n):\n    return sum(range(1, n+1))\n", true], "61": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n", true], "62": ["\ndef derivative(coefficients):\n    # Initialize an empty list to store the derivative coefficients\n    derivative_coefficients = []\n\n    # Loop through the coefficients\n    for i in range(1, len(coefficients)):\n        # The derivative of a term with power n is n * coefficient\n        # Append this to the derivative_coefficients list\n        derivative_coefficients.append(i * coefficients[i])\n\n    # Return the derivative_coefficients list\n    return derivative_coefficients\n", true], "63": ["\ndef fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n", false], "64": ["\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n", false], "65": ["\ndef circular_shift(x, shift):\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n", false], "66": ["\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", true], "67": ["\ndef fruit_distribution(total_fruits, fruits_string):\n    apples, oranges = map(int, fruits_string.split()[0::2])\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n", false], "68": ["\ndef pluck(lst):\n    even_numbers = [(i, num) for i, num in enumerate(lst) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    else:\n        even_numbers.sort(key=lambda x: x[1])\n        return [even_numbers[0][1], even_numbers[0][0]]\n", true], "69": ["\ndef search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    greatest_integer = -1\n    for num, count in count_dict.items():\n        if num <= count and num > greatest_integer:\n            greatest_integer = num\n    return greatest_integer\n", true], "70": ["\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n", true], "71": ["\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n", true], "72": ["\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", true], "73": ["\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n", true], "74": ["\ndef total_match(list1, list2):\n    total_chars1 = sum(len(word) for word in list1)\n    total_chars2 = sum(len(word) for word in list2)\n    if total_chars1 <= total_chars2:\n        return list1\n    else:\n        return list2\n", true], "75": ["\ndef is_multiply_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    count = 0\n    for i in primes:\n        if n % i == 0:\n            count += 1\n            n //= i\n            if count > 3 or (count == 3 and i != primes[-1]):\n                return False\n    return count == 3\n", false], "76": ["\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1 or x == 0:\n        return True\n    if x == 0 or n == 0:\n        return False\n    if x < 0 or n < 0:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x // n\n    return True\n", false], "77": ["\ndef iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", true], "78": ["\ndef hex_key(hex_num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in hex_num if digit in prime_hex_digits)\n", true], "79": ["\ndef decimal_to_binary(n):\n    return 'db' + bin(n)[2:] + 'db'\n", true], "80": ["\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", true], "81": ["\ndef numerical_letter_grade(gpa_list):\n    letter_grades = []\n    for gpa in gpa_list:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", true], "82": ["\ndef prime_length(s):\n    length = len(s)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n", true], "83": ["\ndef starts_one_ends(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return 8 * 2 * (10 ** (n - 2))\n", false], "84": ["\ndef solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    # Convert the sum to its binary representation and return it as a string\n    return bin(digit_sum)[2:]\n", true], "85": ["\ndef add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n", true], "86": ["\ndef anti_shuffle(s):\n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)\n", true], "87": ["\ndef get_row(lst, num):\n    coords = []\n    for i, sub_lst in enumerate(lst):\n        for j, val in enumerate(sub_lst):\n            if val == num:\n                coords.append((i, j))\n    return sorted(coords, key=lambda x: (x[0], -x[1]))\n", true], "88": ["\ndef sort_array(arr):\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n", true], "89": ["\ndef encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n", true], "90": ["\ndef next_smallest(lst):\n    unique_elements = list(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    else:\n        unique_elements.sort()\n        return unique_elements[1]\n", true], "91": ["\ndef is_bored(s):\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', s) if sentence]\n    \n    # Count the number of sentences that start with \"I\"\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    \n    return count\n", false], "92": ["\ndef any_int(a, b, c):\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        if a == b + c or b == a + c or c == a + b:\n            return True\n    return False\n", true], "93": ["\ndef encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel, vowels[vowel])\n\n    return encoded_message\n", true], "94": ["\ndef skjkasdkd(numbers):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in numbers if is_prime(num)]\n    if not primes:\n        return None\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n", true], "95": ["\ndef check_dict_case(d):\n    if not d:\n        return True\n    keys = list(d.keys())\n    if not all(isinstance(k, str) for k in keys):\n        return False\n    lower = [k.islower() for k in keys]\n    upper = [k.isupper() for k in keys]\n    return all(lower) or all(upper)\n", false], "96": ["\ndef count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, possiblePrime):\n            if possiblePrime % num == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n", false], "97": ["\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n", false], "98": ["\ndef count_upper(s):\n    vowels = \"AEIOU\"\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n", true], "99": ["\ndef closest_integer(num_str):\n    num = float(num_str)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n", true], "100": ["\ndef make_a_pile(n):\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(2 * (i + 1))\n        else:\n            result.append(2 * (i + 1) - 1)\n    return result\n", false], "101": ["\ndef words_string(s):\n    return s.replace(',', '').split()\n", false], "102": ["\ndef choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", true], "103": ["\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))[2:]\n", false], "104": ["\ndef unique_digits(lst):\n    def has_odd_digits(n):\n        return all(int(d) % 2 == 1 for d in str(n))\n\n    return sorted([n for n in lst if has_odd_digits(n)])\n", true], "105": ["\ndef by_length(arr):\n    # Mapping of numbers to their corresponding English word representation\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    # Filter out numbers outside the range 1-9 and convert to their word representation\n    word_arr = [num_to_word[i] for i in arr if 1 <= i <= 9]\n\n    # Sort the array in reverse order\n    word_arr.sort(reverse=True)\n\n    return word_arr\n", false], "106": ["\ndef f(n):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result\n", true], "107": ["\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:  # The number is odd\n                odd_count += 1\n    return (even_count, odd_count)\n", true], "108": ["\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n", false], "109": ["\ndef move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n", false], "110": ["\ndef exchange(list1, list2):\n    odd_list1 = [num for num in list1 if num % 2 != 0]\n    even_list2 = [num for num in list2 if num % 2 == 0]\n    if len(odd_list1) <= len(even_list2):\n        return \"YES\"\n    else:\n        return \"NO\"\n", true], "111": ["\ndef histogram(s):\n    word_list = s.split()\n    word_freq = {word: word_list.count(word) for word in word_list}\n    max_freq = max(word_freq.values())\n    return {word: count for word, count in word_freq.items() if count == max_freq}\n", false], "112": ["\ndef reverse_delete(s1, s2):\n    for ch in s2:\n        s1 = s1.replace(ch, '')\n    is_palindrome = s1 == s1[::-1]\n    return (s1, is_palindrome)\n", true], "113": ["\ndef odd_count(lst):\n    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\"the number of odd elements in the string {} of the input.\".format(count_odd(s)) for s in lst]\n", false], "114": ["\ndef minSubArraySum(nums):\n    current_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n", true], "115": ["\ndef max_fill(grid, bucket_capacity):\n    total_wells = sum(sum(row) for row in grid)\n    return (total_wells + bucket_capacity - 1) // bucket_capacity\n", false], "116": ["\ndef sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n", true], "117": ["\ndef select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n", true], "118": ["\ndef get_closest_vowel(word):\n    vowels = 'aeiou'\n    word = word[1:-1]  # Exclude first and last characters\n    for i in range(len(word) - 1, -1, -1):  # Iterate from right to left\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''\n", false], "119": ["\ndef match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for string in lst:\n        for char in string:\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                close_count += 1\n    return 'Yes' if open_count == close_count else 'No'\n", false], "120": ["\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", false], "121": ["\ndef solution(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)\n", true], "122": ["\ndef add_elements(arr, k):\n    return sum(arr[i] for i in range(k) if len(str(arr[i])) <= 2)\n", false], "123": ["\ndef get_odd_collatz(n):\n    def collatz(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = collatz(n)\n\n    return sorted(odd_numbers)\n", false], "124": ["\nfrom datetime import datetime\n\ndef valid_date(date_string):\n    try:\n        if date_string == \"\":\n            return False\n        date = datetime.strptime(date_string, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False\n", false], "125": ["\ndef split_words(s):\n    if ' ' in s:\n        return s.split(' ')\n    elif ',' in s:\n        return s.split(',')\n    else:\n        return sum(1 for c in s if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n", false], "126": ["\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n", false], "127": ["\ndef intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is prime\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n", false], "128": ["\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs = 1\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n            prod_signs *= 1\n        elif num < 0:\n            sum_magnitudes += -num\n            prod_signs *= -1\n        else:\n            sum_magnitudes += 0\n            prod_signs *= 0\n    return sum_magnitudes * prod_signs\n", true], "129": ["\nfrom heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[0][0], 0, 0)]\n    visited = [[0]*n for _ in range(n)]\n    res = []\n    while heap:\n        val, x, y = heappop(heap)\n        if len(res) == k:\n            break\n        if visited[x][y] == 0:\n            res.append(val)\n            visited[x][y] = 1\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and visited[nx][ny] == 0:\n                    heappush(heap, (grid[nx][ny], nx, ny))\n    return res\n", false], "130": ["\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i//2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + 1 + (i+1)//2)\n        return sequence\n", true], "131": ["\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n", false], "132": ["\ndef is_nested(s):\n    stack = []\n    for bracket in s:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return bool(stack)\n", false], "133": ["\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)\n", true], "134": ["\ndef check_if_last_char_is_a_letter(s):\n    if s[-1].isalpha() and not s[-2].isalpha() if len(s) > 1 else False\n", false], "135": ["\ndef can_arrange(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return i-1\n    return -1\n", false], "136": ["\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", true], "137": ["\ndef compare_one(val1, val2):\n    if isinstance(val1, str):\n        val1 = float(val1.replace(',', '.'))\n    if isinstance(val2, str):\n        val2 = float(val2.replace(',', '.'))\n\n    if val1 > val2:\n        return val1\n    elif val2 > val1:\n        return val2\n    else:\n        return None\n", false], "138": ["\ndef is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True\n", true], "139": ["\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n", false], "140": ["\ndef fix_spaces(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            count = 1\n            i += 1\n            while i < len(s) and s[i] == ' ':\n                count += 1\n                i += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_' * count)\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n", true], "141": ["\ndef file_name_check(file_name):\n    if file_name.count('.') != 1 or file_name.count('') > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0].isalpha() or not parts[0]:\n        return 'No'\n    if not parts[1].isdigit() and parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", false], "142": ["\ndef sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n", true], "143": ["\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    return [word for word in words if is_prime(len(word))]\n", false], "144": ["\ndef simplify(fraction1, fraction2):\n    num1, denom1 = map(int, fraction1.split('/'))\n    num2, denom2 = map(int, fraction2.split('/'))\n    product_num = num1 * num2\n    product_denom = denom1 * denom2\n    if product_num % product_denom == 0:\n        return True\n    else:\n        return False\n", true], "145": ["\ndef order_by_points(lst):\n    return sorted(lst, key=lambda x: sum(int(digit) for digit in str(x)))\n", false], "146": ["\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) in [1, 3, 5, 7, 9] and int(str_num[-1]) in [1, 3, 5, 7, 9]:\n                count += 1\n    return count\n", true], "147": ["\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", true], "148": ["\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])\n", true], "149": ["\ndef sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n\n    return lst\n", true], "150": ["\ndef x_or_y(n):\n    if n <= 1:\n        return 'y'\n    for i in range(2, n):\n        if n % i == 0:\n            return 'y'\n    return 'x'\n", false], "151": ["\ndef double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_squares = [x**2 for x in lst if x >= 0 and x % 2 != 0]\n    return sum(odd_squares)\n", false], "152": ["\ndef compare(actual, guess):\n    return [abs(a-g) for a, g in zip(actual, guess)]\n", true], "153": ["\ndef Strongest_Extension(className, extensions):\n    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{className}.{strongest_extension}\"\n", true], "154": ["\ndef cycpattern_check(word1, word2):\n    for i in range(len(word2)):\n        if word2 in word1:\n            return True\n        word2 = word2[1:] + word2[0]\n    return False\n", false], "155": ["\ndef even_odd_count(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", false], "156": ["\ndef int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_t.m(roman_num)\n", false], "157": ["\ndef right_angle_triangle(a, b, c):\n    # sort the sides\n    sides = sorted([a, b, c])\n\n    # check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n", true], "158": ["\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word\n", true], "159": ["\ndef eat(eaten, need, remaining):\n    if remaining >= need:\n        return [eaten + need, remaining - need]\n    else:\n        return [eaten + remaining, 0]\n", true], "160": ["\ndef do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i+1])\n    return eval(expression)\n", true], "161": ["\ndef solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n", true], "162": ["\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", true], "163": ["\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]\n", false]}