{"0": ["\ndef has_close_elements(nums, threshold):\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if abs(nums[i] - nums[j]) <= threshold:\n        return True\n  return False\n", false], "1": ["\ndef separate_paren_groups(str):\n    groups = []\n    current_group = []\n    depth = 0\n    for char in str:\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                groups.append(''.join(current_group))\n                current_group = []\n        elif char != ' ':\n            current_group.append(char)\n    if current_group:\n        groups.append(''.join(current_group))\n    return groups\n", false], "2": ["\ndef truncate_number(num):\n    return num - int(num)\n", true], "3": ["\ndef below_zero(operations):\n  balance = 0\n  for operation in operations:\n    if operation < 0 and balance + operation < 0:\n      return True\n    balance += operation\n  return False\n", true], "4": ["\ndef mean_absolute_deviation(num_list):\n    \"\"\"\n    Calculates the Mean Absolute Deviation (MAD) for a given list of numbers.\n\n    Args:\n    num_list: A list of numbers.\n\n    Returns:\n    The MAD of the list.\n    \"\"\"\n    mean = sum(num_list) / len(num_list)\n    abs_diff = [abs(num - mean) for num in num_list]\n    return sum(abs_diff) / len(abs_diff)\n", true], "5": ["\ndef intersperse(numbers, delimeter):\n    return [num for i, num in enumerate(numbers) if i % 2 == 0] + [delimeter] + [num for i, num in enumerate(numbers) if i % 2 == 1]\n", false], "6": ["\ndef parse_nested_parens(text):\n  \"\"\"\n  Parses a string of nested parentheses and returns a list of integers representing the deepest level of nesting within each group of parentheses.\n\n  Args:\n    text: A string representing multiple groups of nested parentheses separated by spaces.\n\n  Returns:\n    A list of integers where each integer represents the deepest level of nesting within each group of parentheses.\n  \"\"\"\n  def get_deepest_level(text):\n    \"\"\"\n    Returns the deepest level of nesting within a string of nested parentheses.\n\n    Args:\n      text: A string representing a group of nested parentheses.\n\n    Returns:\n      An integer representing the deepest level of nesting within the parentheses.\n    \"\"\"\n    level = 0\n    for char in text:\n      if char == '(':\n        level += 1\n      elif char == ')':\n        level -= 1\n    return level\n\n  groups = text.split()\n  return [get_deepest_level(group) for group in groups]\n", false], "7": ["\ndef filter_by_substring(str_list, substring):\n  return [string for string in str_list if substring in string]\n", true], "8": ["\ndef sum_product(nums):\n    \"\"\"\n    This function takes a list of integers and returns a tuple containing the sum and product of the elements in the list.\n    \"\"\"\n    if not nums:\n        return 0, 1\n    sum_nums = 0\n    product_nums = 1\n    for num in nums:\n        sum_nums += num\n        product_nums *= num\n    return sum_nums, product_nums\n", true], "9": ["\ndef rolling_max(nums):\n    max_values = []\n    current_max = float('-inf')\n    for num in nums:\n        current_max = max(current_max, num)\n        max_values.append(current_max)\n    return max_values\n", true], "10": ["\ndef make_palindrome(text):\n    def is_palindrome(text):\n        return text == text[::-1]\n\n    for i in range(len(text), 0, -1):\n        if is_palindrome(text[:i]):\n            return text + text[:i][::-1]\n", false], "11": ["\ndef string_xor(a, b):\n  return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b))\n", true], "12": ["\ndef longest(str_list):\n  if not str_list:\n    return None\n  max_len = 0\n  max_str = None\n  for string in str_list:\n    if len(string) > max_len:\n      max_len = len(string)\n      max_str = string\n  return max_str\n", true], "13": ["\ndef greatest_common_divisor(a, b):\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n", true], "14": ["\ndef all_prefixes(str):\n  prefixes = []\n  for i in range(len(str)):\n    prefixes.append(str[:i+1])\n  return prefixes\n", true], "15": ["\ndef string_sequence(n):\n    return \" \".join([str(i) for i in range(n + 1)])\n", true], "16": ["\ndef count_distinct_characters(str):\n    return len(set([ch.lower() for ch in str]))\n", true], "17": ["\ndef parse_music(notes):\n    \"\"\"\n    Parses musical notes in a special ASCII format and returns a list of durations in beats.\n    \"\"\"\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n", false], "18": ["\ndef how_many_times(str, substr):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+len(substr)] == substr:\n            count += 1\n    return count\n", true], "19": ["\ndef sort_numbers(str):\n    if not str:\n        return \"\"\n    num_words = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n    num_list = [num_words[word] for word in str.split()]\n    num_list.sort()\n    return \" \".join([str(num) for num in num_list])\n", false], "20": ["\ndef find_closest_elements(nums):\n  nums.sort()\n  min_diff = float('inf')\n  closest_pair = None\n  for i in range(len(nums) - 1):\n    diff = abs(nums[i + 1] - nums[i])\n    if diff < min_diff:\n      min_diff = diff\n      closest_pair = (nums[i], nums[i + 1])\n  return closest_pair\n", true], "21": ["\ndef rescale_to_unit(num_list):\n  if len(num_list) < 2:\n    raise ValueError(\"List must have at least two elements\")\n  min_num = min(num_list)\n  max_num = max(num_list)\n  return [(num - min_num) / (max_num - min_num) for num in num_list]\n", false], "22": ["\ndef filter_integers(lst):\n    return [i for i in lst if isinstance(i, int)]\n", false], "23": ["\ndef strlen(str):\n  return len(str)\n", true], "24": ["\ndef largest_divisor(n):\n  for i in range(n - 1, 0, -1):\n    if n % i == 0:\n      return i\n  return None\n", true], "25": ["\ndef factorize(num):\n    \"\"\"\n    This function takes an integer and returns a list of its prime factors in ascending order.\n    The output list should include each prime factor the number of times it appears in the factorization of the input integer,\n    and the product of all factors listed should equal the input number.\n    \"\"\"\n    factors = []\n    for i in range(2, int(num**0.5) + 1):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n    if num > 1:\n        factors.append(num)\n    return factors\n", true], "26": ["\ndef remove_duplicates(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n", false], "27": ["\ndef flip_case(text):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in text])\n", true], "28": ["\ndef concatenate(str_list):\n  return ''.join(str_list)\n", true], "29": ["\ndef filter_by_prefix(str_list, prefix):\n  return [string for string in str_list if string.startswith(prefix)]\n", true], "30": ["\ndef get_positive(nums):\n  return [num for num in nums if num > 0]\n", true], "31": ["\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n", true], "32": ["\ndef find_zero(coefficients):\n    if len(coefficients) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    if all(coeff == 0 for coeff in coefficients):\n        raise ValueError(\"The polynomial is the zero polynomial.\")\n    \n    if coefficients[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must ensure a solution.\")\n    \n    x = 0\n    for i in range(len(coefficients) - 1):\n        x = x - coefficients[i] / coefficients[i + 1]\n    \n    return x\n", false], "33": ["\ndef sort_third(nums):\n    for i in range(0, len(nums), 3):\n        nums[i:i+3] = sorted(nums[i:i+3])\n    return nums\n", false], "34": ["\ndef unique(arr):\n    return sorted(set(arr))\n", true], "35": ["\ndef max_element(nums):\n  max_num = float('-inf')\n  for num in nums:\n    if num > max_num:\n      max_num = num\n  return max_num\n", true], "36": ["\ndef fizz_buzz(n):\n  count = 0\n  for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n      if '7' in str(i):\n        count += 1\n  return count\n", false], "37": ["\ndef sort_even(nums):\n    even_nums = sorted([num for i, num in enumerate(nums) if i % 2 == 0])\n    return [num if i % 2 == 1 else even_nums.pop(0) for i, num in enumerate(nums)]\n", true], "38": ["\ndef encode_cyclic(text):\n    encoded = []\n    for i in range(0, len(text), 3):\n        group = text[i:i+3]\n        encoded.append(group[-1] + group[0] + group[1])\n    return ''.join(encoded)\n\ndef decode_cyclic(text):\n    decoded = []\n    for i in range(0, len(text), 3):\n        group = text[i:i+3]\n        decoded.append(group[1] + group[2] + group[0])\n    return ''.join(decoded)\n", false], "39": ["\ndef prime_fib(n):\n    \"\"\"\n    Returns the n-th number that is both a Fibonacci number and a prime.\n    \"\"\"\n    fib_nums = [0, 1]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n    for num in fib_nums:\n        if is_prime(num):\n            return num\n    return None\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n", false], "40": ["\ndef triples_sum_to_zero(nums):\n  \"\"\"\n  Checks if there are any three distinct elements in a list that sum up to zero.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if a combination of three elements exists that sums up to zero, False otherwise.\n  \"\"\"\n\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      for k in range(j + 1, len(nums)):\n        if nums[i] + nums[j] + nums[k] == 0:\n          return True\n\n  return False\n", true], "41": ["\ndef car_race_collision(n):\n  return n**2\n", true], "42": ["\ndef incr_list(nums):\n  return [num + 1 for num in nums]\n", true], "43": ["\ndef pairs_sum_to_zero(nums):\n    seen = set()\n    for num in nums:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n", true], "44": ["\ndef change_base(x, base):\n    if base < 2 or base > 9:\n        return \"Invalid base.\"\n    \n    result = []\n    \n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    \n    return ''.join(result[::-1])\n", false], "45": ["\ndef triangle_area(base, height):\n    area = 0.5 * base * height\n    return area\n", true], "46": ["\ndef fib4(n):\n    if n < 0:\n        return \"Invalid input. n must be a non-negative integer.\"\n    elif n < 4:\n        return [0, 0, 2, 0][n]\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c\n        return d\n", false], "47": ["\ndef median(values):\n  values.sort()\n  size = len(values)\n  if size % 2 == 0:\n    return (values[size//2 - 1] + values[size//2]) / 2\n  else:\n    return values[size//2]\n", true], "48": ["\ndef is_palindrome(word):\n  return word == word[::-1]\n", true], "49": ["\ndef modp(n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p\n    else:\n        return (modp(n//2, p) * modp(n%2, p)) % p\n", false], "50": ["\ndef decode_shift(text):\n    decoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                decoded_text += chr(((ord(char) - ord('a') - 5 + 26) % 26 + ord('a'))\n            else:\n                decoded_text += chr(((ord(char) - ord('A') - 5 + 26) % 26 + ord('A'))\n        else:\n            decoded_text += char\n    return decoded_text\n", false], "51": ["\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([ch for ch in text if ch not in vowels])\n", true], "52": ["\ndef below_threshold(nums, threshold):\n  return all(num < threshold for num in nums)\n", true], "53": ["\ndef add(x, y):\n  return x + y\n", true], "54": ["\ndef same_chars(word1, word2):\n  return sorted(word1) == sorted(word2)\n", false], "55": ["\ndef fib(n):\n    if n in (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n", false], "56": ["\ndef correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack\n", true], "57": ["\ndef monotonic(nums):\n    if not nums:\n        return True\n    \n    increasing = nums[1:] > nums[:-1]\n    decreasing = nums[1:] < nums[:-1]\n    \n    return increasing.all() or decreasing.all()\n", false], "58": ["\ndef common(list1, list2):\n    return sorted(set(list1) & set(list2))\n", true], "59": ["\ndef largest_prime_factor(n):\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            n //= i\n    return n\n", false], "60": ["\ndef sum_to_n(n):\n    return (n * (n + 1)) // 2\n", true], "61": ["\ndef correct_bracketing(str):\n    stack = []\n    for char in str:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n", true], "62": ["\ndef derivative(coefficients):\n    return [i * c for i, c in enumerate(coefficients)][1:]\n", true], "63": ["\ndef fibfib(n):\n    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n", false], "64": ["\ndef vowels_count(text):\n  count = 0\n  for i in text.lower():\n    if i in \"aeiou\":\n      if i == \"y\" and i == text[-1]:\n        count += 1\n      else:\n        count += 1\n  return count\n", false], "65": ["\ndef circular_shift(x, shift):\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    else:\n        return str_x[len(str_x) - shift:] + str_x[:len(str_x) - shift]\n", true], "66": ["\ndef digitSum(str):\n  sum = 0\n  for char in str:\n    if char.isupper():\n      sum += ord(char)\n  return sum\n", true], "67": ["\ndef fruit_distribution(total_fruits, fruit_string):\n  \"\"\"\n  Calculates the number of mango fruits in a basket.\n\n  Args:\n    total_fruits: The total number of fruits in the basket.\n    fruit_string: A string in the format \"x apples and y oranges\".\n\n  Returns:\n    The number of mango fruits in the basket.\n  \"\"\"\n  apples, oranges = map(int, fruit_string.split()[:2])\n  mangoes = total_fruits - apples - oranges\n  return mangoes\n", false], "68": ["\ndef pluck(nums):\n  min_even = float('inf')\n  result = []\n  for i, num in enumerate(nums):\n    if num % 2 == 0 and num < min_even:\n      min_even = num\n      result = [num, i]\n  return result\n", true], "69": ["\ndef search(nums):\n    nums.sort(reverse=True)\n    for i in range(len(nums)):\n        if nums[i] <= nums.count(nums[i]):\n            return nums[i]\n    return -1\n", true], "70": ["\ndef strange_sort_list(nums):\n    \"\"\"\n    This function takes a list of integers and returns a list sorted in a strange order.\n    In this strange sorting order, the list begins with the smallest value,\n    followed by the largest of the remaining integers, then the next smallest,\n    and so on until all elements are used.\n    \"\"\"\n    nums.sort()\n    result = []\n    while nums:\n        result.append(nums.pop(0))\n        if nums:\n            result.append(nums.pop())\n    return result\n", true], "71": ["\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n", true], "72": ["\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", true], "73": ["\ndef smallest_change(arr):\n  \"\"\"\n  Calculates the minimum number of changes required to make an array of integers palindromic.\n\n  Args:\n    arr: An array of integers.\n\n  Returns:\n    The minimum number of changes required to make the array palindromic.\n  \"\"\"\n\n  # Create a copy of the array in reverse order.\n  arr_rev = arr[::-1]\n\n  # Create a new array to store the number of changes for each element.\n  changes = [0] * len(arr)\n\n  # Iterate over the elements of the array and calculate the number of changes for each element.\n  for i in range(len(arr)):\n    if arr[i] != arr_rev[i]:\n      changes[i] = 1\n\n  # Return the sum of the number of changes for all elements.\n  return sum(changes)\n", false], "74": ["\ndef total_match(list1, list2):\n    total_chars1 = sum(len(word) for word in list1)\n    total_chars2 = sum(len(word) for word in list2)\n    if total_chars1 < total_chars2:\n        return list1\n    elif total_chars2 < total_chars1:\n        return list2\n    else:\n        return list1\n", true], "75": ["\ndef is_multiply_prime(num):\n  if num < 2 or num % 2 == 0:\n    return False\n  for i in range(3, int(num**0.5) + 1, 2):\n    if num % i == 0:\n      return False\n  return True\n", false], "76": ["\ndef is_simple_power(x):\n  for i in range(2, int(x**0.5) + 1):\n    if x == i**int(x**0.5):\n      return True\n  return False\n", false], "77": ["\ndef iscube(a):\n  if a**0.33 == int(a**0.33):\n    return True\n  else:\n    return False\n", false], "78": ["\ndef hex_key(hex_str):\n    count = 0\n    for digit in hex_str:\n        if digit in \"2357BD\":\n            count += 1\n    return count\n", true], "79": ["\ndef decimal_to_binary(decimal):\n  binary = \"\"\n  while decimal > 0:\n    binary = str(decimal % 2) + binary\n    decimal //= 2\n  return \"db\" + binary + \"db\"\n", false], "80": ["\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n", false], "81": ["\ndef numerical_letter_grade(gp):\n  \"\"\"\n  Converts a list of numerical GPAs into letter grades based on the following correspondences:\n  4.0 A+; >3.7 A; >3.3 A-; >3.0 B+; >2.7 B; >2.3 B-; >2.0 C+; >1.7 C; >1.3 C-; >1.0 D+; >0.7 D; >0.0 D-; 0.0 E.\n  The function should return a list of letter grades corresponding to each GPA in the input list.\n  \"\"\"\n  if not isinstance(gp, list):\n    raise TypeError(\"Input must be a list of GPAs\")\n  if not all(isinstance(gpa, (int, float)) for gpa in gp):\n    raise TypeError(\"All elements in the list must be numbers\")\n  if not all(0 <= gpa <= 4 for gpa in gp):\n    raise ValueError(\"All elements in the list must be between 0 and 4\")\n  \n  letter_grades = []\n  for gpa in gp:\n    if gpa >= 4.0:\n      letter_grades.append(\"A+\")\n    elif gpa >= 3.7:\n      letter_grades.append(\"A\")\n    elif gpa >= 3.3:\n      letter_grades.append(\"A-\")\n    elif gpa >= 3.0:\n      letter_grades.append(\"B+\")\n    elif gpa >= 2.7:\n      letter_grades.append(\"B\")\n    elif gpa >= 2.3:\n      letter_grades.append(\"B-\")\n    elif gpa >= 2.0:\n      letter_grades.append(\"C+\")\n    elif gpa >= 1.7:\n      letter_grades.append(\"C\")\n    elif gpa >= 1.3:\n      letter_grades.append(\"C-\")\n    elif gpa >= 1.0:\n      letter_grades.append(\"D+\")\n    elif gpa >= 0.7:\n      letter_grades.append(\"D\")\n    else:\n      letter_grades.append(\"E\")\n  return letter_grades\n", false], "82": ["\ndef prime_length(str):\n  if len(str) == 1:\n    return True\n  for i in range(2, int(len(str))):\n    if len(str) % i == 0:\n      return False\n  return True\n", false], "83": ["\ndef starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**(n-1)+1):\n        if i % 10 == 1 or i // 10**(n-1) == 1:\n            count += 1\n    return count\n", false], "84": ["\ndef solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]\n", true], "85": ["\ndef add(nums):\n    return sum(num for i, num in enumerate(nums) if i % 2 and not num % 2)\n", true], "86": ["\ndef anti_shuffle(s):\n    return ' '.join(sorted([word for word in s.split()], key=lambda x: [ord(c) for c in x]))\n", false], "87": ["\ndef get_row(matrix, target):\n    \"\"\"\n    Searches for a target integer in a two-dimensional list and returns a list of tuples representing its coordinates.\n\n    Args:\n        matrix: A two-dimensional list of varying lengths.\n        target: The integer to search for.\n\n    Returns:\n        A list of tuples representing the coordinates of the found integer, in ascending order of row indices and descending order of column indices.\n    \"\"\"\n    result = []\n    for i, row in enumerate(matrix):\n        for j, num in enumerate(row):\n            if num == target:\n                result.append((i, j))\n    return sorted(result)\n", false], "88": ["\ndef sort_array(arr):\n  \"\"\"\n  Sorts an array in ascending order if the sum of the first and last element is odd,\n  and in descending order if the sum is even.\n\n  Args:\n    arr: An array of non-negative integers.\n\n  Returns:\n    A sorted copy of the array.\n  \"\"\"\n  if (arr[0] + arr[-1]) % 2 == 1:\n    return sorted(arr)\n  else:\n    return sorted(arr, reverse=True)\n", true], "89": ["\ndef encrypt(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                encrypted_text += chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            else:\n                encrypted_text += chr(((ord(char) - ord('A') + 4) % 26) + ord('A'))\n        else:\n            encrypted_text += char\n    return encrypted_text\n", true], "90": ["\ndef next_smallest(nums):\n    if len(set(nums)) < 2:\n        return None\n    return sorted(set(nums))[1]\n", true], "91": ["\ndef is_bored(text):\n    count = 0\n    for sentence in text.split(\".?\"):\n        if sentence.split(\" \")[0].lower() == \"i\":\n            count += 1\n    return count\n", false], "92": ["\ndef any_int(a, b, c):\n    if a == b + c or b == a + c or c == a + b:\n        return True\n    return False\n", true], "93": ["\ndef encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        elif char in \"aeiouAEIOU\":\n            encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message\n", false], "94": ["\ndef skjkasdkd(nums):\n    largest_prime = max(num for num in nums if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits\n", false], "95": ["\ndef check_dict_case(dictionary):\n  if not dictionary or not all(isinstance(key, str) for key in dictionary):\n    return False\n  return all(key.islower() for key in dictionary.keys()) or all(key.isupper() for key in dictionary.keys())\n", true], "96": ["\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n", true], "97": ["\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n", false], "98": ["\ndef count_upper(text):\n  count = 0\n  for i in range(0, len(text), 2):\n    if text[i].isupper() and text[i] in \"AEIOU\":\n      count += 1\n  return count\n", true], "99": ["\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string representing a number and returns the closest integer to it.\n    If the number is exactly halfway between two integers, the function should round it away from zero.\n    \"\"\"\n    num = float(num)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n", true], "100": ["\ndef make_a_pile(n):\n    \"\"\"\n    This function creates a list of stone counts for each of n levels.\n    The first level starts with n stones, and each subsequent level increases in a sequence by the next odd number if n is odd or the next even number if n is even.\n    The function should return this list.\n    \"\"\"\n    pile = [n]\n    if n % 2 == 0:\n        for i in range(n - 1):\n            pile.append(pile[i] + 2)\n    else:\n        for i in range(n - 1):\n            pile.append(pile[i] + 2)\n    return pile\n", true], "101": ["\ndef words_string(str):\n  return str.split(\", \") or str.split()\n", false], "102": ["\ndef choose_num(x, y):\n  if x % 2 == 1:\n    x += 1\n  while x <= y:\n    if x % 2 == 0:\n      return x\n    x += 2\n  return -1\n", false], "103": ["\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return (n + m + 1) // 2\n", false], "104": ["\ndef unique_digits(nums):\n  return sorted([num for num in nums if all(int(digit) % 2 for digit in str(num))])\n", true], "105": ["\ndef by_length(arr):\n  result = []\n  for num in arr:\n    if 1 <= num <= 9:\n      result.append(num)\n  result.sort()\n  result.reverse()\n  return [str(num).replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\") for num in result]\n", true], "106": ["\ndef f(n):\n    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n", true], "107": ["\ndef even_odd_palindrome(n):\n  even_count = 0\n  odd_count = 0\n  for i in range(1, n + 1):\n    str_i = str(i)\n    if str_i == str_i[::-1]:\n      if int(str_i) % 2 == 0:\n        even_count += 1\n      else:\n        odd_count += 1\n  return even_count, odd_count\n", true], "108": ["\ndef count_nums(nums):\n    count = 0\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(abs(num)):\n            sum_of_digits += int(digit)\n        if sum_of_digits > 0:\n            count += 1\n    return count\n", false], "109": ["\ndef move_one_ball(arr):\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            return True\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n", false], "110": ["\ndef exchange(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] % 2 != 0:\n            if list2:\n                list1[i], list2[0] = list2[0], list1[i]\n                list2.pop(0)\n            else:\n                return \"NO\"\n    return \"YES\"\n", false], "111": ["\ndef histogram(text):\n    \"\"\"\n    This function takes a string of space-separated lowercase words and returns a dictionary.\n    This dictionary should contain only the words that appear most frequently in the input string and their respective counts.\n    If multiple words have the same highest frequency, all should be included in the result.\n    \"\"\"\n    word_counts = {}\n    for word in text.split():\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    max_count = max(word_counts.values())\n    return {word: count for word, count in word_counts.items() if count == max_count}\n", false], "112": ["\ndef reverse_delete(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, \"\", 1)\n    return str1, str1 == str1[::-1]\n", false], "113": ["\ndef odd_count(str_list):\n  result = []\n  for i, s in enumerate(str_list):\n    count = sum(int(digit) % 2 for digit in s)\n    result.append(f\"the number of odd elements in the string {i + 1} of the input is {count}.\")\n  return result\n", false], "114": ["\ndef minSubArraySum(arr):\n  min_sum = float('inf')\n  current_sum = 0\n  for num in arr:\n    current_sum += num\n    if current_sum < min_sum:\n      min_sum = current_sum\n    if current_sum > 0:\n      current_sum = 0\n  return min_sum\n", true], "115": ["\ndef max_fill(grid, bucket):\n    \"\"\"\n    Calculates the number of times buckets need to be lowered to empty a grid of wells.\n\n    Args:\n      grid: A 2D list representing the grid of wells, where '1' indicates a unit of water.\n      bucket: The capacity of the bucket.\n\n    Returns:\n      The number of times the buckets are lowered.\n    \"\"\"\n\n    rows, cols = len(grid), len(grid[0])\n    filled = [[False] * cols for _ in range(rows)]\n    count = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1 and not filled[i][j]:\n                count += 1\n                for di in range(-bucket, bucket + 1):\n                    for dj in range(-bucket, bucket + 1):\n                        if 0 <= i + di < rows and 0 <= j + dj < cols and grid[i + di][j + dj] == 1 and not filled[i + di][j + dj]:\n                            filled[i + di][j + dj] = True\n\n    return count\n", false], "116": ["\ndef sort_array(arr):\n    def count_ones(num):\n        return bin(num).count(\"1\")\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n", true], "117": ["\ndef select_words(s, n):\n    \"\"\"\n    Returns a list of all words from a given string 's' that contain exactly 'n' consonants.\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    \n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() in consonants and char.isalpha():\n                count += 1\n        if count == n:\n            result.append(word)\n    \n    return result\n", true], "118": ["\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels and word[i + 2] not in vowels:\n            return word[i + 1]\n    return \"\"\n", false], "119": ["\ndef match_parens(str_list):\n    stack = []\n    for string in str_list:\n        for char in string:\n            if char in '([{':\n                stack.append(char)\n            elif char in ')]}':\n                if not stack or stack.pop() != {'(': ')', '{': '}', '[': ']'}[char]:\n                    return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n", false], "120": ["\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", false], "121": ["\ndef solution(nums):\n  return sum([num for i, num in enumerate(nums) if i % 2 == 0 and num % 2 != 0])\n", true], "122": ["\ndef add_elements(arr, k):\n  sum = 0\n  for i in range(k):\n    if len(str(arr[i])) <= 2:\n      sum += arr[i]\n  return sum\n", false], "123": ["\ndef get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)\n", false], "124": ["\ndef valid_date(date):\n    if not date:\n        return False\n    if not re.match(r\"\\d{2}-\\d{2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split(\"-\"))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > (29 if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else (30 if month in [4, 6, 9, 11] else 31)):\n        return False\n    return True\n", false], "125": ["\ndef split_words(str):\n  if str.find(\" \") != -1 or str.find(\",\") != -1:\n    return str.split(\" \")\n  else:\n    count = 0\n    for i in range(len(str)):\n      if str[i].islower() and (ord(str[i]) - ord('a')) % 2 == 1:\n        count += 1\n    return count\n", false], "126": ["\ndef is_sorted(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n", false], "127": ["\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determines if the length of the intersection of two given intervals is a prime number.\n\n    Args:\n        interval1: A pair of integers representing the start and end points of the first interval.\n        interval2: A pair of integers representing the start and end points of the second interval.\n\n    Returns:\n        \"YES\" if the length of the intersection is prime, \"NO\" otherwise.\n    \"\"\"\n    # Get the start and end points of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if there is an intersection\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is prime\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\"\n", false], "128": ["\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sum_mag = 0\n    product_sign = 1\n    for num in arr:\n        sum_mag += abs(num)\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        else:\n            product_sign *= 0\n    return sum_mag * product_sign\n", true], "129": ["\ndef minPath(grid, k):\n    N = len(grid)\n    min_path = [0] * (k + 1)\n    min_path[0] = 1\n\n    for i in range(1, k + 1):\n        for j in range(1, N + 1):\n            if i == j:\n                min_path[i] = min(min_path[i], grid[i - 1][j - 1])\n            else:\n                min_path[i] = min(min_path[i], min_path[i - 1] + grid[i - 1][j - 1])\n\n    return min_path[k]\n", false], "130": ["\ndef tri(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    elif n % 2 == 0:\n        return 1 + n // 2\n    else:\n        return tri(n - 1) + tri(n - 2) + 1 + (n + 1) // 2\n", false], "131": ["\ndef digits(n):\n  product = 1\n  while n > 0:\n    digit = n % 10\n    if digit % 2 != 0:\n      product *= digit\n    n //= 10\n  return product\n", false], "132": ["\ndef is_nested(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n", false], "133": ["\ndef sum_squares(nums):\n    return sum(int(round(num)) ** 2 for num in nums)\n", false], "134": ["\ndef check_if_last_char_is_a_letter(text):\n    if not text:\n        return False\n    if not text[-1].isalpha():\n        return False\n    if text[-1].isspace():\n        return True\n    if text[-2].isspace():\n        return True\n    return False\n", false], "135": ["\ndef can_arrange(arr):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i - 1]:\n      return i - 1\n  return -1\n", false], "136": ["\ndef largest_smallest_integers(nums):\n  largest_negative = None\n  smallest_positive = None\n\n  for num in nums:\n    if num < 0 and (largest_negative is None or num > largest_negative):\n      largest_negative = num\n    elif num > 0 and (smallest_positive is None or num < smallest_positive):\n      smallest_positive = num\n\n  return largest_negative, smallest_positive\n", true], "137": ["\ndef compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, str) and a.replace(',', '').replace('.', '').isdigit() and isinstance(b, str) and b.replace(',', '').replace('.', '').isdigit():\n        a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        return a if a > b else b\n    else:\n        return None\n", false], "138": ["\ndef is_equal_to_sum_even(n):\n  for a in range(1, n//2 + 1, 2):\n    for b in range(a + 2, n//2 + 1, 2):\n      for c in range(b + 2, n//2 + 1, 2):\n        for d in range(c + 2, n//2 + 1, 2):\n          if a + b + c + d == n:\n            return True\n  return False\n", false], "139": ["\ndef special_factorial(n):\n  if n < 0:\n    return -1\n  elif n == 0:\n    return 1\n  else:\n    return n * special_factorial(n - 1)\n", false], "140": ["\ndef fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count == 1:\n                new_text += \"_\"\n            elif count == 2:\n                new_text += \"_\"\n            else:\n                new_text += \"-\"\n        else:\n            new_text += char\n            count = 0\n    return new_text\n", false], "141": ["\ndef file_name_check(file_name):\n  if file_name.count('.') != 1:\n    return 'No'\n  if not file_name.split('.')[0].isalnum() or not file_name.split('.')[0]:\n    return 'No'\n  if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes'\n", false], "142": ["\ndef sum_squares(nums):\n  total_sum = 0\n  for i, num in enumerate(nums):\n    if i % 3 == 0:\n      total_sum += num ** 2\n    elif i % 4 == 0 and i % 3 != 0:\n      total_sum += num ** 3\n  return total_sum\n", false], "143": ["\ndef words_in_sentence(sentence):\n    def is_prime(word):\n        if len(word) <= 1:\n            return False\n        for i in range(2, int(len(word) ** 0.5) + 1):\n            if len(word) % i == 0:\n                return False\n        return True\n    \n    return \" \".join([word for word in sentence.split() if is_prime(word)])\n", true], "144": ["\ndef simplify(frac1, frac2):\n    \"\"\"\n    Determines if the product of two string-formatted fractions results in a whole number.\n\n    Args:\n        frac1: The first fraction string in the format 'numerator/denominator'.\n        frac2: The second fraction string in the format 'numerator/denominator'.\n\n    Returns:\n        True if the product is a whole number, False otherwise.\n    \"\"\"\n    num1, denom1 = map(int, frac1.split('/'))\n    num2, denom2 = map(int, frac2.split('/'))\n\n    product_num = num1 * num2\n    product_denom = denom1 * denom2\n\n    return product_num % product_denom == 0\n", true], "145": ["\ndef order_by_points(num_list):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    return sorted(num_list, key=sum_of_digits)\n", false], "146": ["\ndef specialFilter(arr):\n  count = 0\n  for num in arr:\n    if num > 10 and (num // 10 % 2 == 1 or num % 10 % 2 == 1):\n      count += 1\n  return count\n", false], "147": ["\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", true], "148": ["\ndef bf(planet1, planet2):\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets[planet1]\n        planet2_index = planets[planet2]\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return list(planets.keys())[planet1_index + 1:planet2_index]\n", false], "149": ["\ndef sorted_list_sum(str_list):\n  filtered_list = [str for str in str_list if len(str) % 2 == 0]\n  filtered_list.sort(key=len)\n  filtered_list.sort()\n  return filtered_list\n", false], "150": ["\ndef x_or_y(n):\n  if n < 2:\n    return \"y\"\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return \"y\"\n  return \"x\"\n", false], "151": ["\ndef double_the_difference(nums):\n  sum_of_squares = 0\n  for num in nums:\n    if num % 2 != 0 and num >= 0 and isinstance(num, int):\n      sum_of_squares += num ** 2\n  return sum_of_squares\n", true], "152": ["\ndef compare(actual_results, guesses):\n  \"\"\"\n  Compares the actual results and the guesses of a person and returns a list of the absolute differences between them.\n\n  Args:\n    actual_results: A list of the actual results of the matches.\n    guesses: A list of the guesses of the person.\n\n  Returns:\n    A list of the absolute differences between the actual results and the guesses.\n  \"\"\"\n  return [abs(actual - guess) for actual, guess in zip(actual_results, guesses)]\n", true], "153": ["\ndef Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    return f\"{class_name}.{max(extensions, key=strength)}\"\n", true], "154": ["\ndef cycpattern_check(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    if str2 in str1 or str1 in str2:\n        return True\n    \n    for i in range(len(str2)):\n        str2 = str2[-1] + str2[:-1]\n        if str2 in str1:\n            return True\n    \n    return False\n", false], "155": ["\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count\n", false], "156": ["\ndef int_to_mini_roman(num):\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    if num < 1 or num > 1000:\n        raise ValueError(\"Input must be between 1 and 1000\")\n    \n    roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\",\n    }\n    \n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        while num >= value:\n            result += numeral\n            num -= value\n    \n    return result\n", true], "157": ["\ndef right_angle_triangle(side1, side2, side3):\n  \"\"\"\n  Determines if three given side lengths can form a right-angled triangle.\n\n  Args:\n    side1: The length of the first side.\n    side2: The length of the second side.\n    side3: The length of the third side.\n\n  Returns:\n    True if one angle is a right angle (90 degrees), and False otherwise.\n  \"\"\"\n\n  # Check if the sum of the squares of the two smaller sides equals the square of the largest side.\n  if (side1 ** 2 + side2 ** 2 == side3 ** 2) or (side1 ** 2 + side3 ** 2 == side2 ** 2) or (side2 ** 2 + side3 ** 2 == side1 ** 2):\n    return True\n\n  # Otherwise, the triangle is not right-angled.\n  return False\n", true], "158": ["\ndef find_max(words):\n  max_unique = 0\n  max_word = None\n  for word in words:\n    unique_chars = set(word)\n    if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n      max_unique = len(unique_chars)\n      max_word = word\n  return max_word\n", false], "159": ["\ndef eat(carrots_eaten, additional_carrots, remaining_carrots):\n    if additional_carrots <= remaining_carrots:\n        carrots_eaten += additional_carrots\n        remaining_carrots -= additional_carrots\n    else:\n        carrots_eaten += remaining_carrots\n        additional_carrots -= remaining_carrots\n        remaining_carrots = 0\n    return [carrots_eaten, remaining_carrots]\n", true], "160": ["\ndef do_algebra(operators, operands):\n    \"\"\"\n    Constructs an algebraic expression from two lists, one containing operators and the other containing operands.\n    Evaluates this expression and returns the result.\n    The operators include basic mathematical operations such as addition, subtraction, multiplication, floor division, and exponentiation.\n    \"\"\"\n    from math import floor\n    from operator import add, sub, mul, truediv, pow\n    op_dict = {\"+\": add, \"-\": sub, \"*\": mul, \"/\": truediv, \"//\": floor, \"^\": pow}\n    return eval(\" \".join([str(op_dict[op]) for op in operators] + [str(op) for op in operands]), {\"__builtins__\": None}, {\"floor\": floor})\n", false], "161": ["\ndef solve(s):\n    res = []\n    for i in s:\n        if i.isalpha():\n            res.append(i.swapcase())\n        else:\n            res.append(i)\n    if not any(i.isalpha() for i in s):\n        return ''.join(res[::-1])\n    return ''.join(res)\n", true], "162": ["\nimport hashlib\n\ndef string_to_md5(text):\n  if not text:\n    return None\n  return hashlib.md5(text.encode()).hexdigest()\n", true], "163": ["\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0 and i <= 10]\n", false]}