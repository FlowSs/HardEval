{"0": ["\ndef has_close_elements(nums, threshold):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) < threshold:\n                return True\n    return False\n", true], "1": ["\ndef separate_paren_groups(s):\n    result = []\n    stack = []\n    current_group = \"\"\n    \n    for char in s:\n        if char == '(':\n            if not stack:\n                if current_group:\n                    result.append(current_group)\n                    current_group = \"\"\n            stack.append('(')\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n        else:\n            current_group += char\n    \n    if current_group:\n        result.append(current_group)\n    \n    return result\n", false], "2": ["\ndef truncate_number(num):\n    return num - int(num)\n", true], "3": ["\ndef below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", true], "4": ["\ndef mean_absolute_deviation(nums):\n    mean = sum(nums) / len(nums)\n    return sum(abs(num - mean) for num in nums) / len(nums)\n", true], "5": ["\ndef intersperse(numbers, delimiter):\n    return [val for pair in zip(numbers, [delimiter] * (len(numbers) - 1)) for val in pair] + [numbers[-1]]\n", false], "6": ["\ndef parse_nested_parens(s):\n    depths = []\n    for group in s.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths\n", true], "7": ["\ndef filter_by_substring(lst, substring):\n    return [s for s in lst if substring in s]\n", true], "8": ["\ndef sum_product(lst):\n    if not lst:\n        return (0, 1)\n    \n    total_sum = sum(lst)\n    total_product = 1\n    for num in lst:\n        total_product *= num\n    \n    return (total_sum, total_product)\n", true], "9": ["\ndef rolling_max(nums):\n    max_values = []\n    current_max = float('-inf')\n    for num in nums:\n        current_max = max(current_max, num)\n        max_values.append(current_max)\n    return max_values\n", true], "10": ["\ndef make_palindrome(s):\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(s), 0, -1):\n        if is_palindrome(s[:i]):\n            return s + s[:i-1][::-1]\n", false], "11": ["\ndef string_xor(a, b):\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", true], "12": ["\ndef longest(lst):\n    if not lst:\n        return None\n    return max(lst, key=len)\n", true], "13": ["\ndef greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n", true], "14": ["\ndef all_prefixes(s):\n    return [s[:i] for i in range(len(s)+1)]\n", false], "15": ["\ndef string_sequence(n):\n    return ' '.join(map(str, range(n+1)))\n", true], "16": ["\ndef count_distinct_characters(s):\n    s = s.lower()\n    return len(set(s))\n", true], "17": ["\ndef parse_music(s):\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in s.split()]\n", true], "18": ["\ndef how_many_times(string, substring):\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count\n", true], "19": ["\ndef sort_numbers(s):\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    if not s:\n        return ''\n    else:\n        return ' '.join(sorted(s.split(), key=lambda x: words.index(x)))\n", true], "20": ["\ndef find_closest_elements(lst):\n    lst.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(lst) - 1):\n        diff = abs(lst[i] - lst[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = [lst[i], lst[i+1]]\n    return result\n", false], "21": ["\ndef rescale_to_unit(lst):\n    min_val = min(lst)\n    max_val = max(lst)\n    \n    if min_val == max_val:\n        return \"Cannot rescale. Minimum and maximum values are the same.\"\n    \n    rescaled_lst = [(x - min_val) / (max_val - min_val) for x in lst]\n    \n    return rescaled_lst\n", false], "22": ["\ndef filter_integers(lst):\n    return [x for x in lst if isinstance(x, int)]\n", false], "23": ["\ndef strlen(s):\n    return len(s)\n", true], "24": ["\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", true], "25": ["\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", true], "26": ["\ndef remove_duplicates(nums):\n    return [num for num in nums if nums.count(num) == 1]\n", true], "27": ["\ndef flip_case(s):\n    return s.swapcase()\n", true], "28": ["\ndef concatenate(str_list):\n    return ''.join(str_list)\n", true], "29": ["\ndef filter_by_prefix(lst, prefix):\n    return [word for word in lst if word.startswith(prefix)]\n", true], "30": ["\ndef get_positive(numbers):\n    return list(filter(lambda x: x > 0, numbers))\n", true], "31": ["\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n", true], "32": ["\ndef find_zero(coefficients):\n    return -coefficients[-2] / coefficients[-1]\n", false], "33": ["\ndef sort_third(lst):\n    divisible_by_three = [num for num in lst if lst.index(num) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    sorted_lst = [num if lst.index(num) % 3 != 0 else sorted_divisible_by_three.pop(0) for num in lst]\n    return sorted_lst\n", false], "34": ["\ndef unique(lst):\n    return sorted(list(set(lst)))\n", true], "35": ["\ndef max_element(nums):\n    return max(nums)\n", true], "36": ["\ndef fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", true], "37": ["\ndef sort_even(lst):\n    even_indices = [i for i in range(len(lst)) if i % 2 == 0]\n    sorted_even_values = sorted([lst[i] for i in even_indices])\n    result = lst.copy()\n    for i, val in zip(even_indices, sorted_even_values):\n        result[i] = val\n    return result\n", true], "38": ["\ndef encode_cyclic(s):\n    while len(s) % 3 != 0:\n        s += ' '\n    encoded = ''\n    for i in range(0, len(s), 3):\n        encoded += s[i+1] + s[i+2] + s[i]\n    return encoded\n\ndef decode_cyclic(s):\n    decoded = ''\n    for i in range(0, len(s), 3):\n        decoded += s[i+2] + s[i] + s[i+1]\n    return decoded.strip()\n", false], "39": ["\ndef prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fib(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_fib(num):\n            count += 1\n        num += 1\n    return num - 1\n", false], "40": ["\ndef triples_sum_to_zero(nums):\n    nums.sort()\n    n = len(nums)\n    for i in range(n-2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n", true], "41": ["\ndef car_race_collision(n):\n    return n**2\n", true], "42": ["\ndef incr_list(lst):\n    return [x + 1 for x in lst]\n", true], "43": ["\ndef pairs_sum_to_zero(nums):\n    seen = set()\n    for num in nums:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", true], "44": ["\ndef change_base(x, base):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result\n", true], "45": ["\ndef triangle_area(base, height):\n    return 0.5 * base * height\n", true], "46": ["\ndef fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n", true], "47": ["\ndef median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        return (sorted_lst[n//2 - 1] + sorted_lst[n//2]) / 2\n    else:\n        return sorted_lst[n//2]\n", true], "48": ["\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n", false], "49": ["\ndef modp(n, p):\n    return pow(2, n, p)\n", true], "50": ["\ndef decode_shift(s):\n    decoded = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char) - 5\n            if char.islower():\n                if ascii_val < ord('a'):\n                    ascii_val += 26\n            else:\n                if ascii_val < ord('A'):\n                    ascii_val += 26\n            decoded += chr(ascii_val)\n        else:\n            decoded += char\n    return decoded\n", false], "51": ["\ndef remove_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in s if char not in vowels)\n", true], "52": ["\ndef below_threshold(lst, threshold):\n    return all(x < threshold for x in lst)\n", true], "53": ["\ndef add(x, y):\n    return x + y\n", true], "54": ["\ndef same_chars(word1, word2):\n    return set(word1) == set(word2)\n", true], "55": ["\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n", true], "56": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", true], "57": ["\ndef monotonic(nums):\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1)) or all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n", true], "58": ["\ndef common(list1, list2):\n    return sorted(list(set(list1) & set(list2)))\n", true], "59": ["\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", true], "60": ["\ndef sum_to_n(n):\n    return n * (n + 1) // 2\n", true], "61": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", true], "62": ["\ndef derivative(coefficients):\n    return [coefficients[i] * i for i in range(1, len(coefficients))]\n", true], "63": ["\ndef fibfib(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n):\n            a, b, c = b, c, a + b + c\n        return c\n", false], "64": ["\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n            elif s[i].lower() != 'y':\n                count += 1\n    return count\n", false], "65": ["\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n", false], "66": ["\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n", true], "67": ["\ndef fruit_distribution(total_fruits):\n    apples = int(total_fruits.split(' ')[0])\n    oranges = int(total_fruits.split('and')[1].split(' ')[1])\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n", false], "68": ["\ndef pluck(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    if not even_nums:\n        return []\n    min_even = min(even_nums)\n    index = lst.index(min_even)\n    return [min_even, index]\n", true], "69": ["\ndef search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num\n", true], "70": ["\ndef strange_sort_list(nums):\n    nums.sort()\n    result = []\n    while nums:\n        result.append(nums.pop(0))\n        if nums:\n            result.append(nums.pop())\n    return result\n", true], "71": ["\ndef triangle_area(side1, side2, side3):\n    import math\n    \n    def is_valid_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n    \n    def calculate_area(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    if is_valid_triangle(side1, side2, side3):\n        return round(calculate_area(side1, side2, side3), 2)\n    else:\n        return -1\n", true], "72": ["\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False\n", true], "73": ["\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        changes += abs(arr[i] - arr[n-1-i])\n    return changes\n", false], "74": ["\ndef total_match(list1, list2):\n    total_chars_list1 = sum(len(word) for word in list1)\n    total_chars_list2 = sum(len(word) for word in list2)\n    \n    return list1 if total_chars_list1 <= total_chars_list2 else list2\n", true], "75": ["\ndef is_multiply_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            prime_factors.append(i)\n\n    return len(prime_factors) == 3 and n == prime_factors[0] * prime_factors[1] * prime_factors[2]\n", false], "76": ["\ndef is_simple_power(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        p = 2\n        while i ** p <= x:\n            if i ** p == x:\n                return True\n            p += 1\n    return False\n", false], "77": ["\ndef iscube(a):\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int(abs(a) ** (1/3)) ** 3 == abs(a))\n", false], "78": ["\ndef hex_key(hex_num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for char in hex_num:\n        if char.upper() in prime_hex_digits:\n            count += 1\n    return count\n", true], "79": ["\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f'db{binary}db'\n", true], "80": ["\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", true], "81": ["\ndef numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n", true], "82": ["\ndef prime_length(s):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(s))\n", true], "83": ["\ndef starts_one_ends(n):\n    count = 0\n    if n == 1:\n        count = 1\n    else:\n        count = 2 * 9 * 10 ** (n - 2)\n    return count\n", true], "84": ["\ndef solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary representation\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n", true], "85": ["\ndef add(nums):\n    return sum(nums[i] for i in range(1, len(nums), 2) if nums[i] % 2 == 0)\n", true], "86": ["\ndef anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)\n", false], "87": ["\ndef get_row(matrix, target):\n    result = []\n    for i, row in enumerate(matrix):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == target:\n                result.append((i, j))\n    return result\n", false], "88": ["\ndef sort_array(arr):\n    sorted_arr = arr.copy()\n    if (sorted_arr[0] + sorted_arr[-1]) % 2 == 0:\n        return sorted(sorted_arr, reverse=True)\n    else:\n        return sorted(sorted_arr)\n", true], "89": ["\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += new_char\n        else:\n            result += char\n    return result\n", true], "90": ["\ndef next_smallest(nums):\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        return None\n    else:\n        unique_nums.sort()\n        return unique_nums[1]\n", true], "91": ["\ndef is_bored(s):\n    count = 0\n    sentences = s.split('.')\n    for sentence in sentences:\n        if '?' in sentence:\n            sub_sentences = sentence.split('?')\n            for sub_sentence in sub_sentences:\n                if sub_sentence.strip().startswith('I'):\n                    count += 1\n        elif '!' in sentence:\n            sub_sentences = sentence.split('!')\n            for sub_sentence in sub_sentences:\n                if sub_sentence.strip().startswith('I'):\n                    count += 1\n        else:\n            if sentence.strip().startswith('I'):\n                count += 1\n    return count\n", false], "92": ["\ndef any_int(a, b, c):\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        return a == b + c or b == a + c or c == a + b\n    return False\n", true], "93": ["\ndef encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                encoded_message += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", false], "94": ["\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)\n", true], "95": ["\ndef check_dict_case(d):\n    if not d or any(not isinstance(key, str) for key in d.keys()):\n        return False\n    lowercase_keys = all(key.islower() for key in d.keys())\n    uppercase_keys = all(key.isupper() for key in d.keys())\n    return lowercase_keys or uppercase_keys\n", true], "96": ["\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes\n", true], "97": ["\ndef multiply(num1, num2):\n    return (num1 % 10) * (num2 % 10)\n", false], "98": ["\ndef count_upper(s):\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n", true], "99": ["\ndef closest_integer(num_str):\n    num = float(num_str)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1\n", false], "100": ["\ndef make_a_pile(n):\n    stones = []\n    for i in range(1, n+1):\n        stones.append(n)\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n    return stones\n", false], "101": ["\ndef words_string(s):\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words\n", true], "102": ["\ndef choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even\n", true], "103": ["\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)[2:]\n", false], "104": ["\ndef unique_digits(lst):\n    odd_digits = set('13579')\n    result = []\n    for num in lst:\n        if all(digit in odd_digits for digit in str(num)):\n            result.append(num)\n    return sorted(list(set(result)))\n", false], "105": ["\ndef by_length(arr):\n    words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_filtered = sorted(filtered, reverse=True)\n    return [words[x] for x in sorted_filtered]\n", true], "106": ["\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", false], "107": ["\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n", true], "108": ["\ndef count_nums(arr):\n    def digit_sum(num):\n        if num < 0:\n            num = -num\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    return count\n", false], "109": ["\ndef move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if all(arr[j] <= arr[j+1] for j in range(n-1)):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n", false], "110": ["\ndef exchange(list1, list2):\n    for num in list1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\"\n", false], "111": ["\ndef histogram(s):\n    words = s.split()\n    word_count = {}\n    \n    max_count = 0\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n        max_count = max(max_count, word_count[word])\n    \n    result = {word: count for word, count in word_count.items() if count == max_count}\n    \n    return result\n", true], "112": ["\ndef reverse_delete(s1, s2):\n    s1 = ''.join(char for char in s1 if char not in s2)\n    return s1, s1 == s1[::-1]\n", true], "113": ["\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements in the string {count} of the input.\")\n    return result\n", false], "114": ["\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n", true], "115": ["\ndef max_fill(grid, bucket):\n    total_water = sum(row.count(1) for row in grid)\n    return -(-total_water // bucket)\n", false], "116": ["\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", true], "117": ["\ndef select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    return [word for word in s.split() if count_consonants(word) == n] if s else []\n", true], "118": ["\ndef get_closest_vowel(word):\n    vowels = set('aeiou')\n    word = word.lower()\n    \n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    \n    return ''\n", false], "119": ["\ndef match_parens(lst):\n    left_parens = 0\n    right_parens = 0\n    \n    for s in lst:\n        for char in s:\n            if char == '(':\n                left_parens += 1\n            elif char == ')':\n                if left_parens > 0:\n                    left_parens -= 1\n                else:\n                    right_parens += 1\n    \n    if left_parens == right_parens == 0:\n        return 'Yes'\n    else:\n        return 'No'\n", false], "120": ["\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", false], "121": ["\ndef solution(nums):\n    return sum(nums[i] for i in range(1, len(nums), 2) if nums[i] % 2 != 0)\n", false], "122": ["\ndef add_elements(arr, k):\n    sum = 0\n    count = 0\n    for num in arr:\n        if num >= 10 and num <= 99:\n            sum += num\n            count += 1\n            if count == k:\n                break\n    return sum\n", false], "123": ["\ndef get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    return sorted(result)\n", false], "124": ["\ndef valid_date(date):\n    import re\n    import calendar\n    \n    if not date:\n        return False\n    \n    pattern = r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$'\n    if not re.match(pattern, date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month == 2:\n        max_days = 29 if calendar.isleap(year) else 28\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        max_days = 31\n    \n    if day > max_days:\n        return False\n    \n    return True\n", false], "125": ["\ndef split_words(s):\n    if ' ' in s:\n        return s.split()\n    elif ',' in s:\n        return s.split(',')\n    else:\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        count = 0\n        for i in range(len(s)):\n            if s[i].islower() and alphabet.index(s[i]) % 2 != 0:\n                count += 1\n        return count\n", true], "126": ["\ndef is_sorted(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n    \n    return nums == sorted(nums)\n", true], "127": ["\ndef intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", false], "128": ["\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += abs(num)\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            sign_product *= 0\n    \n    return sign_product * magnitude_sum\n", true], "129": ["\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((x, y))\n        min_path = None\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                new_path = dfs(nx, ny, visited.copy(), path + [grid[nx][ny]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        \n        return min_path\n    \n    start = min((grid[i][j], i, j) for i in range(N) for j in range(N))\n    path = dfs(start[1], start[2], set(), [grid[start[1]][start[2]]])\n    \n    return path\n", false], "130": ["\ndef tri(n):\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + 1 + (i + 1) // 2)\n    return sequence\n", false], "131": ["\ndef digits(n):\n    odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n        n //= 10\n    return odd_product if odd_product != 1 else 0\n", false], "132": ["\ndef is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            if stack[-1] == '[':\n                return True\n            else:\n                stack.pop()\n    return False\n", false], "133": ["\nimport math\n\ndef sum_squares(nums):\n    return sum(math.ceil(num)**2 for num in nums)\n", true], "134": ["\ndef check_if_last_char_is_a_letter(s):\n    if s[-1].isalpha() and (s[-2] == ' ' or s[-2] in ['.', ',', ';', ':', '?', '!']):\n        return True\n    return False\n", false], "135": ["\ndef can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return index\n", false], "136": ["\ndef largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)\n", true], "137": ["\ndef compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        a = float(a) if '.' in a else int(a)\n        b = float(b) if '.' in b else int(b)\n        return a if a > b else b\n    else:\n        return None\n", false], "138": ["\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    return n >= 8\n", true], "139": ["\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n", false], "140": ["\ndef fix_spaces(s):\n    result = []\n    count = 0\n    for char in s:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            elif count == 1:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)\n", false], "141": ["\ndef file_name_check(file_name):\n    import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n        return 'No'\n    if not re.match(pattern, file_name):\n        return 'No'\n    return 'Yes'\n", false], "142": ["\ndef sum_squares(nums):\n    total_sum = 0\n    for i in range(len(nums)):\n        if (i+1) % 3 == 0:\n            total_sum += nums[i] ** 2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total_sum += nums[i] ** 3\n        else:\n            total_sum += nums[i]\n    return total_sum\n", false], "143": ["\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", true], "144": ["\ndef simplify(fraction1: str, fraction2: str) -> bool:\n    num1, den1 = map(int, fraction1.split('/'))\n    num2, den2 = map(int, fraction2.split('/'))\n    \n    product_num = num1 * num2\n    product_den = den1 * den2\n    \n    return product_num % product_den == 0\n", true], "145": ["\ndef order_by_points(lst):\n    return sorted(lst, key=lambda x: (sum(int(digit) for digit in str(x)), lst.index(x)))\n", false], "146": ["\ndef specialFilter(arr):\n    def is_odd_digit(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = 0\n    for num in arr:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    return count\n", true], "147": ["\ndef get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n", true], "148": ["\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planets[start_idx+1:end_idx])\n", true], "149": ["\ndef sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))\n", true], "150": ["\ndef x_or_y(n):\n    if n < 2:\n        return 'y'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return 'y'\n    return 'x'\n", false], "151": ["\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))\n", true], "152": ["\ndef compare(actual_results, guesses):\n    return [abs(actual_results[i] - guesses[i]) for i in range(len(actual_results))]\n", true], "153": ["\ndef Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n\n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n", true], "154": ["\ndef cycpattern_check(word1, word2):\n    if len(word1) != len(word2):\n        return False\n    double_word1 = word1 + word1\n    return word2 in double_word1 or any(word2 in double_word1[i+1:] + double_word1[:i+1] for i in range(len(word1)))\n", false], "155": ["\ndef even_odd_count(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(n)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", true], "156": ["\ndef int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n", true], "157": ["\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", true], "158": ["\ndef find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = ''\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word\n", true], "159": ["\ndef eat(carrots_eaten, additional_carrots_needed, carrots_remaining):\n    total_carrots_eaten = carrots_eaten + min(additional_carrots_needed, carrots_remaining)\n    carrots_left = max(0, carrots_remaining - additional_carrots_needed)\n    return [total_carrots_eaten, carrots_left]\n", true], "160": ["\ndef do_algebra(operators, operands):\n    expression = ''\n    for i in range(len(operators)):\n        expression += str(operands[i]) + operators[i]\n    expression += str(operands[-1])\n    return eval(expression)\n", true], "161": ["\ndef solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n", true], "162": ["\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", true], "163": ["\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]\n", false]}