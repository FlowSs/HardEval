{"0": ["\ndef has_close_elements(my_list, threshold):\n    for i in range(len(my_list) - 1):\n        for j in range(i + 1, len(my_list)):\n            if abs(my_list[i] - my_list[j]) < threshold:\n                return True\n    return False\n", true], "1": ["\ndef separate_paren_groups(s):\n    # Remove any whitespace characters from the input string\n    s = s.replace(\" \", \"\")\n\n    # Create a list to store the separate groups of parentheses\n    groups = []\n\n    # Initialize a stack to keep track of the opening parentheses\n    stack = []\n\n    # Iterate through the characters in the input string\n    for char in s:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == \"(\":\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the stack and add the group to the list\n        elif char == \")\":\n            group = \"\"\n            while stack and stack[-1] != \"(\":\n                group += stack.pop()\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n                groups.append(group[::-1])\n\n    # If there are any leftover opening parentheses, add them to the list\n    while stack:\n        groups.append(stack.pop()[::-1])\n\n    return groups\n", false], "2": ["\ndef truncate_number(number):\n    return abs(number) % 1\n", true], "3": ["\ndef below_zero(operations):\n    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False\n", false], "4": ["\ndef mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", true], "5": ["\ndef intersperse(numbers, delimeter):\n    return [delimeter] + numbers + [delimeter]\n", false], "6": ["\ndef parse_nested_parens(s):\n    # split the input string into a list of substrings\n    subs = s.split()\n    # initialize an empty list to store the results\n    results = []\n    # loop through each substring\n    for sub in subs:\n        # initialize a variable to keep track of the current level of nesting\n        level = 0\n        # loop through each character in the substring\n        for char in sub:\n            # if the character is an opening parenthesis, increase the level of nesting\n            if char == '(':\n                level += 1\n            # if the character is a closing parenthesis, decrease the level of nesting\n            elif char == ')':\n                level -= 1\n        # add the current level of nesting to the list of results\n        results.append(level)\n    # return the list of results\n    return results\n", false], "7": ["\ndef filter_by_substring(my_list, substring):\n    return [word for word in my_list if substring in word]\n", true], "8": ["\ndef sum_product(my_list):\n    if not my_list:\n        return (0, 1)\n    return (sum(my_list), prod(my_list))\n", false], "9": ["\ndef rolling_max(my_list):\n    return [max(my_list[:i+1]) for i in range(len(my_list))]\n", true], "10": ["\ndef make_palindrome(string):\n    # Find the longest palindromic suffix of the string\n    suffix = string[::-1]\n    for i in range(len(string) - 1, -1, -1):\n        if suffix[:i + 1] == suffix[i + 1:]:\n            suffix = suffix[:i + 1]\n            break\n\n    # Append the reverse of the prefix preceding the palindromic suffix\n    return string[:len(string) - len(suffix)] + suffix[::-1]\n", false], "11": ["\ndef string_xor(a, b):\n    return \"\".join(str(int(xa ^ xb)) for xa, xb in zip(a, b))\n", false], "12": ["\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n", true], "13": ["\ndef greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n", true], "14": ["\ndef all_prefixes(input_string):\n    return [input_string[:i] for i in range(len(input_string))]\n", false], "15": ["\ndef string_sequence(n):\n    return \" \".join(str(i) for i in range(n+1))\n", true], "16": ["\ndef count_distinct_characters(input_string):\n    return len(set(input_string.lower()))\n", true], "17": ["\ndef parse_music(input_string):\n    note_durations = []\n    for char in input_string:\n        if char == 'o':\n            note_durations.append(4)\n        elif char == 'o|':\n            note_durations.append(2)\n        elif char == '.|':\n            note_durations.append(1)\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    return note_durations\n", false], "18": ["\ndef how_many_times(string, substring):\n    return string.count(substring)\n", false], "19": ["\ndef sort_numbers(string):\n    if string == \"\":\n        return \"\"\n    number_words = string.split()\n    number_words.sort(key=lambda x: int(x))\n    return \" \".join(number_words)\n", false], "20": ["\ndef find_closest_elements(my_list):\n    # Sort the list in ascending order\n    my_list.sort()\n    # Initialize a variable to store the closest pair\n    closest_pair = []\n    # Iterate over the list\n    for i in range(len(my_list) - 1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(my_list[i] - my_list[i + 1])\n        # If the difference is less than the current minimum difference, update the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [my_list[i], my_list[i + 1]]\n    # Return the closest pair in ascending order\n    return closest_pair\n", false], "21": ["\ndef rescale_to_unit(numbers):\n    if len(numbers) < 2:\n        return numbers\n    else:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        scale = 1.0 / (max_val - min_val)\n        return [scale * (x - min_val) for x in numbers]\n", true], "22": ["\ndef filter_integers(my_list):\n    return [x for x in my_list if type(x) == int]\n", true], "23": ["\ndef strlen(s):\n    return len(s)\n", true], "24": ["\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n", true], "25": ["\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", true], "26": ["\ndef remove_duplicates(my_list):\n    seen = set()\n    result = []\n    for x in my_list:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n", false], "27": ["\ndef flip_case(input_string):\n    result = \"\"\n    for char in input_string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n", true], "28": ["\ndef concatenate(my_list):\n    return \"\".join(my_list)\n", true], "29": ["\ndef filter_by_prefix(my_list, prefix):\n    return [word for word in my_list if word.startswith(prefix)]\n", true], "30": ["\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n", true], "31": ["\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", true], "32": ["\ndef find_zero(coefficients):\n    if len(coefficients) % 2 == 1 or max(coefficients) == 0:\n        return None\n    x = 0\n    for i in range(len(coefficients) - 1, -1, -2):\n        x = x * x + coefficients[i]\n    return x\n", false], "33": ["\ndef sort_third(my_list):\n    result = []\n    for i, x in enumerate(my_list):\n        if i % 3 == 0:\n            result.append(sorted(x))\n        else:\n            result.append(x)\n    return result\n", false], "34": ["\ndef unique(my_list):\n    return sorted(set(my_list))\n", true], "35": ["\ndef max_element(my_list):\n    return max(my_list)\n", true], "36": ["\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count\n", false], "37": ["\ndef sort_even(my_list):\n    return [my_list[i] for i in range(len(my_list)) if i % 2 == 0] + [my_list[i] for i in range(len(my_list)) if i % 2 == 1]\n", false], "38": ["\ndef encode_cyclic(s):\n    return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\ndef decode_cyclic(s):\n    return ''.join([s[i:i+3] for i in range(len(s)-1, -1, -3)])\n", false], "39": ["\ndef prime_fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if is_prime(a) and a > 1:\n            return a\n    return -1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", false], "40": ["\ndef triples_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            for k in range(j+1, len(my_list)):\n                if my_list[i] + my_list[j] + my_list[k] == 0:\n                    return True\n    return False\n", true], "41": ["\ndef car_race_collision(n):\n    return n * (n - 1) * 2\n", false], "42": ["\ndef incr_list(my_list):\n    return [x + 1 for x in my_list]\n", true], "43": ["\ndef pairs_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] + my_list[j] == 0:\n                return True\n    return False\n", true], "44": ["\ndef change_base(x, base):\n    digits = '0123456789ABCDEF'\n    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = digits[x % base] + res\n        x //= base\n    return res\n", true], "45": ["\ndef triangle_area(base, height):\n    return 0.5 * base * height\n", true], "46": ["\ndef fib4(n):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n", false], "47": ["\ndef median(my_list):\n    sorted_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median1 = sorted_list[len(my_list) // 2]\n        median2 = sorted_list[len(my_list) // 2 - 1]\n        return (median1 + median2) / 2\n    else:\n        return sorted_list[len(my_list) // 2]\n", true], "48": ["\ndef is_palindrome(string):\n    return string == string[::-1]\n", true], "49": ["\ndef modp(n, p):\n    return pow(2, n, p)\n", true], "50": ["\ndef decode_shift(shifted_string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    decoded_string = \"\"\n    for char in shifted_string:\n        index = alphabet.find(char)\n        if index != -1:\n            decoded_string += alphabet[index + 5]\n        else:\n            decoded_string += char\n    return decoded_string\n", false], "51": ["\ndef remove_vowels(my_string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return \"\".join([char for char in my_string if char.lower() not in vowels])\n", true], "52": ["\ndef below_threshold(my_list, threshold):\n    return all(x < threshold for x in my_list)\n", true], "53": ["\ndef add(x, y):\n    return x + y\n", true], "54": ["\ndef same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)\n", false], "55": ["\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n", false], "56": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", true], "57": ["\ndef monotonic(my_list):\n    if len(my_list) <= 1:\n        return True\n    return all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1))\n", true], "58": ["\ndef common(list1, list2):\n    return sorted(set(list1) & set(list2))\n", true], "59": ["\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", true], "60": ["\ndef sum_to_n(n):\n    return sum(range(1, n+1))\n", true], "61": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", true], "62": ["\ndef derivative(coefficients):\n    return [coefficient * (i + 1) for i, coefficient in enumerate(coefficients[:-1])]\n", false], "63": ["\ndef fibfib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b + b\n    return a\n", false], "64": ["\ndef vowels_count(my_string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in my_string:\n        if char in vowels:\n            count += 1\n    return count\n", false], "65": ["\ndef circular_shift(x, shift):\n    digits = list(str(x))\n    if shift >= len(digits):\n        return ''.join(reversed(digits))\n    else:\n        digits = digits[shift:] + digits[:shift]\n        return ''.join(digits)\n", false], "66": ["\ndef digitSum(myString):\n    sum = 0\n    for char in myString:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n", true], "67": ["\ndef fruit_distribution(total_fruits, fruit_string):\n    apples, oranges = map(int, fruit_string.split(\" and \"))\n    return total_fruits - apples - oranges\n", false], "68": ["\ndef pluck(my_list):\n    smallest_even = []\n    for i, n in enumerate(my_list):\n        if n % 2 == 0 and (not smallest_even or n < smallest_even[0]):\n            smallest_even = [n, i]\n    return smallest_even or []\n", true], "69": ["\ndef search(my_list):\n    max_freq = 0\n    max_num = -1\n    for num in my_list:\n        freq = my_list.count(num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num if max_num != -1 else -1\n", false], "70": ["\ndef strange_sort_list(my_list):\n    return sorted(my_list, key=lambda x: x, reverse=True)\n", false], "71": ["\ndef triangle_area(side_a, side_b, side_c):\n    if side_a + side_b < side_c or side_b + side_c < side_a or side_a + side_c < side_b:\n        return -1\n    else:\n        s = (side_a + side_b + side_c) / 2\n        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5\n        return round(area, 2)\n", false], "72": ["\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", true], "73": ["\ndef smallest_change(arr):\n    # Reverse the array\n    arr.reverse()\n    # Zip the array with its reverse\n    zipped = zip(arr, arr)\n    # Count the number of elements that are not equal\n    count = sum(1 for i, j in zipped if i != j)\n    return count\n", false], "74": ["\ndef total_match(list1, list2):\n    total1 = sum(len(word) for word in list1)\n    total2 = sum(len(word) for word in list2)\n    if total1 < total2:\n        return list1\n    elif total2 < total1:\n        return list2\n    else:\n        return list1\n", true], "75": ["\ndef is_multiply_prime(n):\n    if n >= 100:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime(n // i) and is_prime(n // (i * n // i)):\n                return True\n    return False\n\ndef is_prime(n):\n    if n <= 1 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n", false], "76": ["\ndef is_simple_power(x, n):\n    return x == n ** int(x ** 0.5)\n", false], "77": ["\ndef iscube(a):\n    if a < 0:\n        a = -a\n    for i in range(1, int(a**0.5) + 1):\n        if a == i**3:\n            return True\n    return False\n", false], "78": ["\ndef hex_key(hex_string):\n    count = 0\n    for char in hex_string:\n        if char in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]:\n            count += 1\n    return count\n", true], "79": ["\ndef decimal_to_binary(n):\n    return f\"db{bin(n)[2:]:08b}db\"\n", false], "80": ["\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n", false], "81": ["\ndef numerical_letter_grade(gpa_list):\n    letter_grades = []\n    for gpa in gpa_list:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n", true], "82": ["\ndef prime_length(s):\n    n = len(s)\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", true], "83": ["\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        num = str(i)\n        if num[0] == \"1\" or num[-1] == \"1\":\n            count += 1\n    return count\n", false], "84": ["\ndef solve(N):\n    # Calculate the sum of the digits of N\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n\n    # Convert the sum to its binary representation\n    binary_representation = bin(sum_of_digits)[2:]\n\n    # Return the binary representation as a string\n    return binary_representation\n", true], "85": ["\ndef add(my_list):\n    return sum(my_list[::2])\n", false], "86": ["\ndef anti_shuffle(input_string):\n    words = input_string.split()\n    output_string = \"\"\n    for word in words:\n        char_list = list(word)\n        char_list.sort(key=lambda x: ord(x))\n        output_string += \"\".join(char_list)\n        output_string += \" \"\n    return output_string.strip()\n", false], "87": ["\ndef get_row(my_list, target):\n    result = []\n    for i, row in enumerate(my_list):\n        for j, col in enumerate(row):\n            if col == target:\n                result.append((i, j))\n    return result\n", false], "88": ["\ndef sort_array(arr):\n    sum_first_last = arr[0] + arr[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n", true], "89": ["\ndef encrypt(input_string):\n    # Initialize an empty string to store the encrypted output\n    output_string = \"\"\n\n    # Loop through each character in the input string\n    for char in input_string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Shift the character four places down the alphabet\n            output_string += chr((ord(char) + 4 - ord('A')) % 26 + ord('A'))\n        # Check if the character is lowercase\n        elif char.islower():\n            # Shift the character four places down the alphabet\n            output_string += chr((ord(char) + 4 - ord('a')) % 26 + ord('a'))\n        # If the character is a space or any other character, add it directly to the output string\n        else:\n            output_string += char\n\n    return output_string\n", true], "90": ["\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(my_list)):\n        if sorted_list[i] != sorted_list[i-1]:\n            return sorted_list[i]\n", false], "91": ["\ndef is_bored(sentence):\n    return sentence.count(\"I\")\n", false], "92": ["\ndef any_int(a, b, c):\n    if not all(isinstance(x, int) for x in [a, b, c]):\n        return False\n    if a == b + c or b == a + c or c == a + b:\n        return True\n    else:\n        return False\n", true], "93": ["\ndef encode(message):\n    # Swap the case of all letters\n    encoded_message = message.swapcase()\n\n    # Replace vowels with letters two places ahead\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        index = encoded_message.find(vowel)\n        if index != -1:\n            encoded_message = encoded_message[:index] + encoded_message[index + 2] + encoded_message[index + 1] + encoded_message[index + 3:]\n\n    return encoded_message\n", false], "94": ["\ndef skjkasdkd(my_list):\n    largest_prime = 0\n    for num in my_list:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    return sum(str(largest_prime))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", false], "95": ["\ndef check_dict_case(my_dict):\n    if not my_dict:\n        return False\n    if all(isinstance(key, str) and key.islower() for key in my_dict):\n        return True\n    if all(isinstance(key, str) and key.isupper() for key in my_dict):\n        return True\n    return False\n", true], "96": ["\ndef count_up_to(n):\n    prime_list = []\n    for i in range(2, n+1):\n        if all(i % num != 0 for num in range(2, int(i ** 0.5) + 1)):\n            prime_list.append(i)\n    return prime_list\n", false], "97": ["\ndef multiply(num1, num2):\n    return (num1 % 10) * (num2 % 10)\n", false], "98": ["\ndef count_upper(my_string):\n    count = 0\n    for i in range(len(my_string)):\n        if i % 2 == 0 and my_string[i].isupper():\n            count += 1\n    return count\n", false], "99": ["\ndef closest_integer(number_string):\n    number = float(number_string)\n    diff_up = abs(number - round(number))\n    diff_down = abs(number - round(number))\n    if diff_up == diff_down:\n        return 0\n    else:\n        return round(number)\n", false], "100": ["\ndef make_a_pile(n):\n    levels = []\n    for i in range(n):\n        if i % 2 == 0:\n            levels.append(i + 2)\n        else:\n            levels.append(i + 1)\n    return levels\n", false], "101": ["\ndef words_string(s):\n    return s.split(\", \")\n", false], "102": ["\ndef choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n", false], "103": ["\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:]\n", false], "104": ["\ndef unique_digits(my_list):\n    return sorted([x for x in my_list if x % 2 != 0])\n", false], "105": ["\ndef by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True) if 1 <= i <= 9]\n", false], "106": ["\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", true], "107": ["\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 == 1:\n            count_odd += 1\n    return (count_even, count_odd)\n", true], "108": ["\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n            if sum_digits > 0:\n                count += 1\n    return count\n", false], "109": ["\ndef move_one_ball(arr):\n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    # Check if the array is sorted in non-decreasing order after performing a right shift operation\n    if arr[0] > arr[-1] and arr[1:] == sorted(arr[1:]):\n        return True\n    # If none of the above conditions are met, return False\n    return False\n", false], "110": ["\ndef exchange(list1, list2):\n    # Check if both lists are of equal length\n    if len(list1) != len(list2):\n        return \"NO\"\n\n    # Check if any element in list1 is not even\n    for element in list1:\n        if element % 2 != 0:\n            return \"NO\"\n\n    # Check if any element in list2 is not odd\n    for element in list2:\n        if element % 2 == 0:\n            return \"NO\"\n\n    # If all elements in list1 are even and all elements in list2 are odd, it is possible to swap elements between the two lists\n    return \"YES\"\n", false], "111": ["\ndef histogram(string):\n    words = string.split()\n    word_counts = {}\n    for word in words:\n        if word not in word_counts:\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n\n    max_count = max(word_counts.values())\n    most_frequent_words = [word for word, count in word_counts.items() if count == max_count]\n\n    return {word: count for word, count in word_counts.items() if word in most_frequent_words}\n", false], "112": ["\ndef reverse_delete(str1, str2):\n    # Delete all characters from str1 that are present in str2\n    result = \"\".join(c for c in str1 if c not in str2)\n\n    # Check if the result is a palindrome\n    return result, result == result[::-1]\n", true], "113": ["\ndef odd_count(my_list):\n    return [\"the number of odd elements in the string {} of the input.\".format(i) for i in my_list]\n", false], "114": ["\ndef minSubArraySum(arr):\n    min_sum = float(\"inf\")\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        elif current_sum > min_sum:\n            current_sum = 0\n    return min_sum\n", false], "115": ["\ndef max_fill(grid, bucket_capacity):\n    rows, cols = len(grid), len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    total_fills = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1 and not visited[i][j]:\n                fill_well(grid, i, j, bucket_capacity, visited)\n                total_fills += 1\n\n    return total_fills\n\ndef fill_well(grid, i, j, bucket_capacity, visited):\n    rows, cols = len(grid), len(grid[0])\n    water_level = 0\n\n    while i >= 0 and grid[i][j] == 1:\n        water_level += 1\n        visited[i][j] = True\n        i -= 1\n\n    i += 1\n    while i < rows and water_level > 0:\n        if grid[i][j] == 0:\n            water_level = min(water_level, bucket_capacity)\n            grid[i][j] = water_level\n            water_level = 0\n        else:\n            water_level -= grid[i][j]\n        i += 1\n", false], "116": ["\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", true], "117": ["\ndef select_words(s, n):\n    words = s.split()\n    return [word for word in words if word.count(\"consonant\") == n]\n", false], "118": ["\ndef get_closest_vowel(word):\n    # Find the rightmost consonant\n    rightmost_consonant_index = len(word) - 1\n    while rightmost_consonant_index >= 0 and word[rightmost_consonant_index].lower() not in \"bcdfghjklmnpqrstvwxyz\":\n        rightmost_consonant_index -= 1\n\n    # If there are no consonants, return an empty string\n    if rightmost_consonant_index == -1:\n        return \"\"\n\n    # Find the leftmost consonant\n    leftmost_consonant_index = rightmost_consonant_index - 1\n    while leftmost_consonant_index >= 0 and word[leftmost_consonant_index].lower() not in \"bcdfghjklmnpqrstvwxyz\":\n        leftmost_consonant_index -= 1\n\n    # If there are no consonants, return an empty string\n    if leftmost_consonant_index == -1:\n        return \"\"\n\n    # Return the vowel that is sandwiched between the two consonants\n    return word[leftmost_consonant_index + 1 : rightmost_consonant_index]\n", false], "119": ["\ndef match_parens(my_list):\n    stack = []\n    for char in my_list:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return \"No\"\n            stack.pop()\n    return \"Yes\" if not stack else \"No\"\n", false], "120": ["\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", false], "121": ["\ndef solution(my_list):\n    return sum([x for i, x in enumerate(my_list) if i % 2 == 0 and x % 2 != 0])\n", true], "122": ["\ndef add_elements(arr, k):\n    return sum(arr[:k])\n", false], "123": ["\ndef get_odd_collatz(n):\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted(sequence[1:])\n", false], "124": ["\ndef valid_date(date_string):\n    if not date_string:\n        return False\n    date_parts = date_string.split('-')\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if year < 0 or year > 9999:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    return True\n", false], "125": ["\ndef split_words(string):\n    words = string.split()\n    if words:\n        return words\n    else:\n        count = 0\n        for i, c in enumerate(string):\n            if c.islower() and i % 2 == 1:\n                count += 1\n        return count\n", false], "126": ["\ndef is_sorted(my_list):\n    if len(my_list) == 0:\n        return True\n    for i in range(len(my_list) - 1):\n        if my_list[i] > my_list[i + 1]:\n            return False\n    return True\n", false], "127": ["\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    else:\n        length = end1 - start1 if end1 - start1 > end2 - start2 else end2 - start2\n        if length == 0:\n            return \"NO\"\n        if length == 1:\n            return \"YES\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n", false], "128": ["\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sum_abs = sum(abs(x) for x in arr)\n    prod_sign = 1 if all(x >= 0 for x in arr) else -1 if all(x < 0 for x in arr) else 0\n    return sum_abs * prod_sign\n", false], "129": ["\ndef minPath(grid, k):\n    # Initialize the minimum path length to infinity\n    min_path_len = float('inf')\n    # Initialize the minimum path as an empty list\n    min_path = []\n    # Loop through each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # If the cell is not blocked and the path length is less than or equal to k\n            if grid[i][j] != 0 and len(min_path) + 1 <= k:\n                # Add the cell to the path\n                min_path.append((i, j))\n                # If the path length is equal to k, return the path\n                if len(min_path) == k:\n                    return min_path\n                # Recursively search the remaining grid\n                result = minPath(grid, k - len(min_path))\n                # If a shorter path is found, update the minimum path and length\n                if len(result) < min_path_len:\n                    min_path = result\n                    min_path_len = len(result)\n    # Return the minimum path\n    return min_path\n", false], "130": ["\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                seq.append(1 + seq[i-1] / 2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + 1 + seq[i-1] / 2)\n        return seq\n", false], "131": ["\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product\n", false], "132": ["\ndef is_nested(s):\n    stack = []\n    for char in s:\n        if char == \"[\" and not stack:\n            stack.append(char)\n        elif char == \"]\" and stack and stack[-1] == \"[\":\n            stack.pop()\n        elif char == \"]\" and stack:\n            stack.append(char)\n    return bool(stack)\n", false], "133": ["\ndef sum_squares(numbers):\n    return sum(x**2 for x in map(int, numbers))\n", false], "134": ["\ndef check_if_last_char_is_a_letter(s):\n    if s == \"\":\n        return False\n    last_char = s[-1]\n    if last_char.isalpha() and s.rfind(last_char) == len(s) - 1:\n        return True\n    else:\n        return False\n", false], "135": ["\ndef can_arrange(my_list):\n    for i in range(len(my_list) - 1, -1, -1):\n        if my_list[i] >= my_list[i - 1]:\n            return i\n    return -1\n", false], "136": ["\ndef largest_smallest_integers(my_list):\n    largest_negative = None\n    smallest_positive = None\n    for num in my_list:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return largest_negative, smallest_positive\n", true], "137": ["\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\").replace(\" \", \"\")\n        b = b.replace(\",\", \".\").replace(\" \", \"\")\n        return a if float(a) > float(b) else b\n    else:\n        raise ValueError(\"Invalid input types\")\n", false], "138": ["\ndef is_equal_to_sum_even(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = i + i + i + i\n            if sum == n:\n                return True\n    return False\n", false], "139": ["\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 1, -1):\n        result *= i\n    return result\n", false], "140": ["\ndef fix_spaces(my_string):\n    return my_string.replace(\"  \", \"-\").replace(\" \", \"_\")\n", false], "141": ["\ndef file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if not file_name[0].isalpha():\n        return \"No\"\n    if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n", false], "142": ["\ndef sum_squares(my_list):\n    total = 0\n    for i, x in enumerate(my_list):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += x ** 3\n        else:\n            total += x\n    return total\n", true], "143": ["\ndef words_in_sentence(sentence):\n    return [word for word in sentence.split() if is_prime(len(word))]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", false], "144": ["\ndef simplify(fraction1, fraction2):\n    numerator1, denominator1 = fraction1.split(\"/\")\n    numerator2, denominator2 = fraction2.split(\"/\")\n    result = int(numerator1) * int(numerator2)\n    if result % int(denominator1) == 0 and result % int(denominator2) == 0:\n        return True\n    else:\n        return False\n", false], "145": ["\ndef order_by_points(my_list):\n    # Sort the list based on the sum of the digits\n    sorted_list = sorted(my_list, key=lambda x: sum(map(int, str(x))))\n\n    # Group the elements with the same sum together\n    grouped_list = []\n    current_sum = 0\n    for element in sorted_list:\n        if sum(map(int, str(element))) == current_sum:\n            grouped_list[-1].append(element)\n        else:\n            current_sum = sum(map(int, str(element)))\n            grouped_list.append([element])\n\n    # Flatten the list of lists\n    flattened_list = []\n    for sublist in grouped_list:\n        for element in sublist:\n            flattened_list.append(element)\n\n    return flattened_list\n", false], "146": ["\ndef specialFilter(my_list):\n    count = 0\n    for num in my_list:\n        if num > 10 and (num % 1 != 0 and num % 1 != 0):\n            count += 1\n    return count\n", false], "147": ["\ndef get_max_triples(a, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n", false], "148": ["\ndef bf(planet1, planet2):\n    # Implement your solution here\n    return ()\n", false], "149": ["\ndef sorted_list_sum(my_list):\n    return sorted([word for word in my_list if len(word) % 2 == 0], key=lambda x: (len(x), x))\n", true], "150": ["\ndef x_or_y(n):\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return 'y'\n        return 'x'\n    else:\n        return 'y'\n", false], "151": ["\ndef double_the_difference(my_list):\n    if not my_list:\n        return 0\n    odd_squares = [x**2 for x in my_list if x % 2 != 0 and x >= 0 and x % 1 == 0]\n    return sum(odd_squares)\n", false], "152": ["\ndef compare(actual, guess):\n    return [abs(actual[i] - guess[i]) for i in range(len(actual))]\n", true], "153": ["\ndef Strongest_Extension(class_name, extensions):\n    strengths = [(e.lower().count('a') - e.upper().count('A')) for e in extensions]\n    max_strength = max(strengths)\n    best_extension = extensions[strengths.index(max_strength)]\n    return f\"{class_name}.{best_extension}\"\n", false], "154": ["\ndef cycpattern_check(word1, word2):\n    return word2 in (word1 + word1)[1:]\n", false], "155": ["\ndef even_odd_count(n):\n    count_even = 0\n    count_odd = 0\n    while n > 0:\n        if n % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        n //= 10\n    return count_even, count_odd\n", false], "156": ["\ndef int_to_mini_roman(n):\n    num_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xci',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    for i in range(1, n+1):\n        result += num_dict[i]\n    return result\n", false], "157": ["\ndef right_angle_triangle(side1, side2, side3):\n    if side1**2 + side2**2 == side3**2:\n        return True\n    else:\n        return False\n", false], "158": ["\ndef find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_unique_chars = max(unique_chars.values())\n    max_words = [word for word in words if unique_chars[word] == max_unique_chars]\n    return sorted(max_words)[0]\n", false], "159": ["\ndef eat(carrots_eaten, carrots_needed, carrots_remaining):\n    total_carrots_eaten = carrots_eaten + carrots_needed\n    if carrots_remaining >= carrots_needed:\n        carrots_eaten = total_carrots_eaten\n        carrots_remaining = carrots_remaining - carrots_needed\n    else:\n        carrots_eaten = total_carrots_eaten - carrots_remaining\n        carrots_remaining = 0\n    return [carrots_eaten, carrots_remaining]\n", false], "160": ["\ndef do_algebra(operators, operands):\n    expression = \"\".join([str(op) + str(opd) for op, opd in zip(operators, operands)])\n    return eval(expression)\n", false], "161": ["\ndef solve(s):\n    # Check if the string contains any letters\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    # Modify the string based on the conditions\n    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)\n", true], "162": ["\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", true], "163": ["\ndef generate_integers(a, b):\n    if a > b:\n        return []\n    return [x for x in range(a, b+1, 2) if x <= 10]\n", false]}