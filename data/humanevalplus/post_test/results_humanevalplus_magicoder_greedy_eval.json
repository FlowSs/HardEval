{"0": ["\ndef has_close_elements(nums, threshold):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if abs(nums[i] - nums[i + 1]) < threshold:\n            return True\n    return False\n", true], "1": ["\ndef separate_paren_groups(s):\n    stack = []\n    groups = []\n    current_group = ''\n\n    for char in s:\n        if char == ' ':\n            continue\n        elif char == '(':\n            if current_group:\n                stack.append(current_group)\n                current_group = ''\n            stack.append('(')\n        elif char == ')':\n            if stack[-1] == '(':\n                stack.pop()\n                if not stack:\n                    groups.append(current_group + ')')\n                    current_group = ''\n            else:\n                current_group += ')'\n                if not stack:\n                    groups.append(current_group)\n                    current_group = ''\n        else:\n            current_group += char\n\n    return groups\n", false], "2": ["\ndef truncate_number(n):\n    return n - int(n)\n", true], "3": ["\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        if operation[0] == 'deposit':\n            balance += operation[1]\n        elif operation[0] == 'withdraw':\n            balance -= operation[1]\n        if balance < 0:\n            return True\n    return False\n", false], "4": ["\ndef mean_absolute_deviation(lst):\n    mean = sum(lst) / len(lst)\n    mad = sum(abs(x - mean) for x in lst) / len(lst)\n    return mad\n", true], "5": ["\ndef intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result\n", true], "6": ["\ndef parse_nested_parens(s):\n    result = []\n    for group in s.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n", true], "7": ["\ndef filter_by_substring(lst, substring):\n    return [s for s in lst if substring in s]\n", true], "8": ["\ndef sum_product(lst):\n    if not lst:\n        return (0, 1)\n    else:\n        return (sum(lst), functools.reduce(lambda x, y: x * y, lst))\n", false], "9": ["\ndef rolling_max(lst):\n    max_val = float('-inf')\n    result = []\n    for num in lst:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result\n", true], "10": ["\ndef make_palindrome(s):\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]\n\n", false], "11": ["\ndef string_xor(a, b):\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", true], "12": ["\ndef longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n", true], "13": ["\ndef greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n", true], "14": ["\ndef all_prefixes(s):\n    return [s[:i] for i in range(1, len(s) + 1)]\n", true], "15": ["\ndef string_sequence(n):\n    return ' '.join(str(i) for i in range(n+1))\n", true], "16": ["\ndef count_distinct_characters(s):\n    return len(set(s.lower()))\n", true], "17": ["\ndef parse_music(music_string):\n    notes = music_string.split('|')\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o.':\n            durations.append(2)\n        elif note == '.':\n            durations.append(1)\n    return durations\n", false], "18": ["\ndef how_many_times(string, substring):\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n", true], "19": ["\ndef sort_numbers(s):\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = s.split()\n    numbers = [num_dict[word] for word in words]\n    numbers.sort()\n    return ' '.join([list(num_dict.keys())[list(num_dict.values()).index(num)] for num in numbers])\n", true], "20": ["\ndef find_closest_elements(lst):\n    lst.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(lst)):\n        diff = lst[i] - lst[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (lst[i-1], lst[i])\n    return result\n", true], "21": ["\ndef rescale_to_unit(lst):\n    if len(lst) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_val = min(lst)\n    max_val = max(lst)\n    return [(x - min_val) / (max_val - min_val) for x in lst]\n", false], "22": ["\ndef filter_integers(lst):\n    return [i for i in lst if isinstance(i, int)]\n", false], "23": ["\ndef strlen(s):\n    return len(s)\n", true], "24": ["\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", true], "25": ["\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", true], "26": ["\ndef remove_duplicates(lst):\n    result = []\n    for i in lst:\n        if lst.count(i) == 1:\n            result.append(i)\n    return result\n", true], "27": ["\ndef flip_case(s):\n    return s.swapcase()\n", true], "28": ["\ndef concatenate(lst):\n    return ''.join(lst)\n", true], "29": ["\ndef filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n", true], "30": ["\ndef get_positive(numbers):\n    return [num for num in numbers if num > 0]\n", true], "31": ["\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", true], "32": ["\nimport numpy as np\n\ndef find_zero(coefficients):\n    def polynomial(x):\n        return np.polyval(coefficients, x)\n\n    def derivative(x):\n        return np.polyval(np.polyder(coefficients), x)\n\n    x = 1.0\n    while abs(polynomial(x)) > 1e-6:\n        x = x - polynomial(x) / derivative(x)\n\n    return x\n", false], "33": ["\ndef sort_third(lst):\n    # Get the elements at indices divisible by three\n    div_by_three = [lst[i] for i in range(len(lst)) if i % 3 == 0]\n    # Sort the elements\n    div_by_three.sort()\n\n    # Replace the elements at indices divisible by three with the sorted elements\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = div_by_three.pop(0)\n\n    return lst\n", true], "34": ["\ndef unique(lst):\n    return sorted(set(lst))\n", true], "35": ["\ndef max_element(lst):\n    return max(lst)\n", true], "36": ["\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", true], "37": ["\ndef sort_even(lst):\n    even_indices = sorted(lst[i] for i in range(0, len(lst), 2))\n    result = []\n    even_index = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(lst[i])\n    return result\n", true], "38": ["\ndef encode_cyclic(s):\n    return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\n\ndef decode_cyclic(s):\n    return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\n", false], "39": ["\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef fib(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n):\n    count = 0\n    i = 0\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n", false], "40": ["\ndef triples_sum_to_zero(lst):\n    n = len(lst)\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if lst[i] + lst[j] + lst[k] == 0:\n                    return True\n    return False\n", true], "41": ["\ndef car_race_collision(n):\n    return n**2\n", true], "42": ["\ndef incr_list(lst):\n    return [i + 1 for i in lst]\n", true], "43": ["\ndef pairs_sum_to_zero(lst):\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", true], "44": ["\ndef change_base(x, base):\n    if base < 2 or base > 9:\n        return \"Invalid base. Base should be between 2 and 9.\"\n    if x < 0:\n        return \"Invalid number. Number should be non-negative.\"\n    if x == 0:\n        return \"0\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n", true], "45": ["\ndef triangle_area(base, height):\n    return 0.5 * base * height\n", true], "46": ["\ndef fib4(n):\n    if n < 0:\n        return \"Input should be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", false], "47": ["\ndef median(lst):\n    n = len(lst)\n    s = sorted(lst)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None\n", true], "48": ["\ndef is_palindrome(s):\n    return s == s[::-1]\n", true], "49": ["\ndef modp(n, p):\n    return pow(2, n, p)\n", true], "50": ["\ndef decode_shift(encoded_string):\n    decoded_string = \"\"\n    for char in encoded_string:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            decoded_char = chr((ord(char) - ascii_offset - 5) % 26 + ascii_offset)\n            decoded_string += decoded_char\n        else:\n            decoded_string += char\n    return decoded_string\n", false], "51": ["\ndef remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])\n", true], "52": ["\ndef below_threshold(lst, threshold):\n    return all(i < threshold for i in lst)\n", true], "53": ["\ndef add(x, y):\n    return x + y\n", true], "54": ["\ndef same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)\n", false], "55": ["\ndef fib(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", false], "56": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", true], "57": ["\ndef monotonic(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        increasing = all(i < j for i, j in zip(lst, lst[1:]))\n        decreasing = all(i > j for i, j in zip(lst, lst[1:]))\n        return increasing or decreasing\n", false], "58": ["\ndef common(list1, list2):\n    return sorted(list(set(list1) & set(list2)))\n", true], "59": ["\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", true], "60": ["\ndef sum_to_n(n):\n    return n * (n + 1) // 2\n", true], "61": ["\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", true], "62": ["\ndef derivative(coefficients):\n    derivative_coefficients = []\n    for i in range(1, len(coefficients)):\n        derivative_coefficients.append(coefficients[i] * i)\n    return derivative_coefficients\n", true], "63": ["\ndef fibfib(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 3):\n            a, b, c = b, c, a + b + c\n        return c\n", false], "64": ["\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for c in s if c in vowels)\n    if s and s[-1] == 'y':\n        count += 1\n    return count\n", false], "65": ["\ndef circular_shift(x, shift):\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n", true], "66": ["\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", true], "67": ["\ndef fruit_distribution(total_fruits, fruits_string):\n    fruits_list = fruits_string.split()\n    apples = int(fruits_list[0])\n    oranges = int(fruits_list[3])\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n", false], "68": ["\ndef pluck(lst):\n    even_numbers = [(i, num) for i, num in enumerate(lst) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    smallest_even = min(even_numbers, key=lambda x: x[1])\n    return [smallest_even[1], smallest_even[0]]\n", true], "69": ["\ndef search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    for num in sorted(freq_dict.keys(), reverse=True):\n        if freq_dict[num] >= num:\n            return num\n\n    return -1\n", true], "70": ["\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n", true], "71": ["\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n", true], "72": ["\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", true], "73": ["\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += abs(arr[i] - arr[n-i-1])\n    return changes\n", false], "74": ["\ndef total_match(list1, list2):\n    total_chars1 = sum(len(s) for s in list1)\n    total_chars2 = sum(len(s) for s in list2)\n    if total_chars1 <= total_chars2:\n        return list1\n    else:\n        return list2\n", true], "75": ["\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(n):\n    primes = [i for i in range(2, n) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == n:\n                    return True\n    return False\n", true], "76": ["\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    i = 2\n    while i * i <= x:\n        if x % i:\n            i += 1\n        else:\n            x //= i\n    return x == n\n", false], "77": ["\ndef iscube(a):\n    a = abs(a)\n    i = 0\n    while i**3 <= a:\n        if i**3 == a:\n            return True\n        i += 1\n    return False\n", false], "78": ["\ndef hex_key(hex_num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in hex_num:\n        if digit.upper() in prime_hex_digits:\n            count += 1\n    return count\n", true], "79": ["\ndef decimal_to_binary(n):\n    return 'db' + bin(n)[2:] + 'db'\n", true], "80": ["\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", true], "81": ["\ndef numerical_letter_grade(gpa_list):\n    letter_grades = []\n    for gpa in gpa_list:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", true], "82": ["\ndef prime_length(s):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(s))\n", true], "83": ["\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 10**(n-1) + 10**(n-1) - 2\n", false], "84": ["\ndef solve(N):\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    # Convert the sum to its binary representation\n    binary_str = bin(digit_sum)[2:]\n    return binary_str\n", true], "85": ["\ndef add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n", true], "86": ["\ndef anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)\n", true], "87": ["\ndef get_row(lst, target):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == target:\n                result.append((i, len(row) - j - 1))\n    return result\n", false], "88": ["\ndef sort_array(arr):\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n", true], "89": ["\ndef encrypt(s):\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            ascii_offset = 65 if i.isupper() else 97\n            result += chr((ord(i) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            result += i\n    return result\n", true], "90": ["\ndef next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    else:\n        unique_lst.sort()\n        return unique_lst[1]\n", true], "91": ["\ndef is_bored(s):\n    sentences = s.replace(\"?\", \"!\").split(\"!\")\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n", false], "92": ["\ndef any_int(a, b, c):\n    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        if a == b + c or b == a + c or c == a + b:\n            return True\n    return False\n", true], "93": ["\ndef encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", false], "94": ["\ndef skjkasdkd(numbers):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in numbers if is_prime(num)]\n    if not primes:\n        return None\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n", true], "95": ["\ndef check_dict_case(d):\n    if not d:\n        return False\n    keys = list(d.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case\n", true], "96": ["\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]\n", true], "97": ["\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n", false], "98": ["\ndef count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n", true], "99": ["\ndef closest_integer(num_str):\n    num = float(num_str)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n", true], "100": ["\ndef make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(2 * (i + 1))\n        else:\n            pile.append(2 * i + 1)\n    return pile\n", false], "101": ["\ndef words_string(s):\n    return s.replace(',', '').split()\n", false], "102": ["\ndef choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", true], "103": ["\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]\n", false], "104": ["\ndef unique_digits(lst):\n    def has_odd_digits(n):\n        return all(int(d) % 2 != 0 for d in str(n))\n\n    return sorted([n for n in lst if has_odd_digits(n)])\n", true], "105": ["\ndef by_length(arr):\n    # Define a dictionary to map numbers to their English word representations\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n\n    # Filter the array to only include numbers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array in reverse order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # Convert each number in the sorted array to its corresponding English word representation\n    word_arr = [num_to_word[num] for num in sorted_arr]\n\n    return word_arr\n", true], "106": ["\nimport math\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", true], "107": ["\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:  # The number is odd\n                odd_count += 1\n    return (even_count, odd_count)\n", true], "108": ["\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            if sum(int(digit) for digit in str(num)[1:]) > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count\n", false], "109": ["\ndef move_one_ball(arr):\n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n\n    # Check if it's possible to sort the array by performing right shift operations\n    for i in range(len(arr)):\n        # Perform a right shift operation\n        arr = [arr[-1]] + arr[:-1]\n\n        # Check if the array is sorted in non-decreasing order after the operation\n        if arr == sorted(arr):\n            return True\n\n    # If no right shift operations can sort the array, return False\n    return False\n", true], "110": ["\ndef exchange(list1, list2):\n    odd_in_list1 = [num for num in list1 if num % 2 != 0]\n    even_in_list2 = [num for num in list2 if num % 2 == 0]\n\n    if len(odd_in_list1) <= len(even_in_list2):\n        return \"YES\"\n    else:\n        return \"NO\"\n", true], "111": ["\nfrom collections import Counter\n\ndef histogram(s):\n    words = s.split()\n    word_counts = Counter(words)\n    max_count = max(word_counts.values())\n    return {word: count for word, count in word_counts.items() if count == max_count}\n", false], "112": ["\ndef reverse_delete(s1, s2):\n    for char in s2:\n        s1 = s1.replace(char, '')\n    is_palindrome = s1 == s1[::-1]\n    return (s1, is_palindrome)\n", true], "113": ["\ndef odd_count(lst):\n    result = []\n    for i, string in enumerate(lst, start=1):\n        odd_count = sum(int(digit) % 2 for digit in string)\n        result.append(f\"the number of odd elements in the string {odd_count} of the input.\")\n    return result\n", false], "114": ["\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n", true], "115": ["\ndef max_fill(grid, bucket_capacity):\n    total_water = sum(sum(row) for row in grid)\n    return total_water // bucket_capacity + (total_water % bucket_capacity > 0)\n", false], "116": ["\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", true], "117": ["\ndef select_words(s, n):\n    # List of consonants\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter words that contain exactly n consonants\n    selected_words = [word for word in words if sum(1 for char in word.lower() if char in consonants) == n]\n\n    return selected_words\n", true], "118": ["\ndef get_closest_vowel(word):\n    vowels = 'aeiou'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''\n", false], "119": ["\ndef match_parens(input_list):\n    stack = []\n    for string in input_list:\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'\n", false], "120": ["\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", false], "121": ["\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n", true], "122": ["\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if 0 <= x <= 99)\n", false], "123": ["\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted(odd_numbers)\n", false], "124": ["\ndef valid_date(date_string):\n    if not date_string:\n        return False\n\n    date_parts = date_string.split('-')\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = map(int, date_parts)\n\n    if not (1 <= month <= 12):\n        return False\n\n    if month in [4, 6, 9, 11] and not (1 <= day <= 30):\n        return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        if not (1 <= day <= 31):\n            return False\n\n    return True\n", false], "125": ["\ndef split_words(s):\n    if ' ' in s:\n        return s.split(' ')\n    elif ',' in s:\n        return s.split(',')\n    else:\n        return sum(1 for c in s if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n", false], "126": ["\ndef is_sorted(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n            if count_dict[num] > 2:\n                return False\n        else:\n            count_dict[num] = 1\n    return lst == sorted(lst)\n", true], "127": ["\ndef intersection(interval1, interval2):\n    # Check if there is an intersection\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    intersection_length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n\n    # Check if the length is prime\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n", true], "128": ["\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs = 1\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n            prod_signs *= 1\n        elif num < 0:\n            sum_magnitudes += -num\n            prod_signs *= -1\n        else:\n            sum_magnitudes += 0\n            prod_signs *= 0\n    return sum_magnitudes * prod_signs\n", true], "129": ["\nfrom heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = {(0, 0)}\n\n    while heap:\n        _, x, y, path = heappop(heap)\n\n        if len(path) == k:\n            return path\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n\n    return []\n", false], "130": ["\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + 1 + (i + 1) / 2)\n        return sequence\n", true], "131": ["\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0\n", false], "132": ["\ndef is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n", false], "133": ["\nimport math\n\ndef sum_squares(numbers):\n    return sum(math.ceil(num) ** 2 for num in numbers)\n", true], "134": ["\ndef check_if_last_char_is_a_letter(s):\n    if s and s[-1].isalpha() and not s[-2:].isalpha():\n        return True\n    return False\n", false], "135": ["\ndef can_arrange(lst):\n    for i in range(len(lst) - 1, 0, -1):\n        if lst[i] < lst[i - 1]:\n            return i - 1\n    return -1\n", false], "136": ["\ndef largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if neg_nums:\n        largest_neg = max(neg_nums)\n    else:\n        largest_neg = None\n\n    if pos_nums:\n        smallest_pos = min(pos_nums)\n    else:\n        smallest_pos = None\n\n    return (largest_neg, smallest_pos)\n", true], "137": ["\ndef compare_one(a, b):\n    # Convert strings to floats\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n", false], "138": ["\ndef is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    for i in range(2, n - 3, 2):\n        for j in range(i + 2, n - 1, 2):\n            for k in range(j + 2, n, 2):\n                for l in range(k + 2, n + 2, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n", false], "139": ["\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(n, 0, -1):\n            factorial *= i\n        return factorial\n", false], "140": ["\nimport re\n\ndef fix_spaces(s):\n    s = re.sub(r' {2,}', lambda m: '-' if len(m.group(0)) > 2 else '_', s)\n    return s\n", false], "141": ["\ndef file_name_check(file_name):\n    if '.' not in file_name or file_name.count('.') > 1:\n        return 'No'\n    name, extension = file_name.rsplit('.', 1)\n    if not name or not extension:\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", true], "142": ["\ndef sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n", true], "143": ["\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return prime_words\n", false], "144": ["\ndef simplify(fraction1, fraction2):\n    num1, den1 = map(int, fraction1.split('/'))\n    num2, den2 = map(int, fraction2.split('/'))\n    product_num = num1 * num2\n    product_den = den1 * den2\n    return product_num % product_den == 0\n", true], "145": ["\ndef order_by_points(lst):\n    return sorted(lst, key=lambda x: sum(int(digit) for digit in str(x)))\n", false], "146": ["\ndef specialFilter(numbers):\n    count = 0\n    for num in numbers:\n        if num > 10:\n            str_num = str(num)\n            if len(str_num) > 1 and int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count\n", true], "147": ["\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", true], "148": ["\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])\n", true], "149": ["\ndef sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by increasing length and alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n", true], "150": ["\ndef x_or_y(n):\n    if n <= 1:\n        return 'y'\n    for i in range(2, n):\n        if n % i == 0:\n            return 'y'\n    return 'x'\n", false], "151": ["\ndef double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_squares = [x**2 for x in lst if x >= 0 and x % 2 != 0]\n    return sum(odd_squares) * 2\n", false], "152": ["\ndef compare(actual, guess):\n    return [abs(a - g) for a, g in zip(actual, guess)]\n", true], "153": ["\ndef Strongest_Extension(class_name, extensions):\n    max_strength = -float('inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n", true], "154": ["\ndef cycpattern_check(word1, word2):\n    # Check if word2 is a substring of word1\n    if word2 in word1:\n        return True\n\n    # Check if any rotation of word2 is a substring of word1\n    for i in range(len(word2)):\n        rotated_word2 = word2[i:] + word2[:i]\n        if rotated_word2 in word1:\n            return True\n\n    return False\n", true], "155": ["\ndef even_odd_count(n):\n    even_count = 0\n    odd_count = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        n = n // 10\n    return (even_count, odd_count)\n", false], "156": ["\ndef int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n", true], "157": ["\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", true], "158": ["\ndef find_max(words):\n    max_unique_chars = 0\n    max_unique_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_word = word\n        elif unique_chars == max_unique_chars:\n            max_unique_word = min(max_unique_word, word)\n    return max_unique_word\n", true], "159": ["\ndef eat(carrots_eaten, additional_need, carrots_remaining):\n    if carrots_remaining >= additional_need:\n        carrots_eaten += additional_need\n        carrots_remaining -= additional_need\n    else:\n        carrots_eaten += carrots_remaining\n        carrots_remaining = 0\n    return [carrots_eaten, carrots_remaining]\n", true], "160": ["\ndef do_algebra(operators, operands):\n    import operator\n    ops = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.floordiv, '**': operator.pow}\n    result = operands[0]\n    for i in range(len(operators)):\n        result = ops[operators[i]](result, operands[i+1])\n    return result\n", false], "161": ["\ndef solve(s):\n    has_letters = any(c.isalpha() for c in s)\n    if has_letters:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    else:\n        return s[::-1]\n", true], "162": ["\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", true], "163": ["\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]\n", false]}