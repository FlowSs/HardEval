{"0": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'has_close_elements' that checks if any two numbers in a given list of numbers are closer to each other than a specified threshold. The function should return True if such a pair exists and False otherwise.\n```\n[/INST]  [PYTHON]\ndef has_close_elements(my_list, threshold):\n    for i in range(len(my_list) - 1):\n        for j in range(i + 1, len(my_list)):\n            if abs(my_list[i] - my_list[j]) < threshold:\n                return True\n    return False\n[/PYTHON]</s>", "1": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'separate_paren_groups' which takes a single string input containing multiple groups of nested parentheses and returns a list of these groups as separate strings. Each group is balanced (meaning each open parenthesis is properly closed) and not nested within another group. Spaces in the input string should be ignored. The function should handle different depths of nesting in the parentheses.\n```\n[/INST]  [PYTHON]\ndef separate_paren_groups(s):\n    # Remove any whitespace characters from the input string\n    s = s.replace(\" \", \"\")\n\n    # Create a list to store the separate groups of parentheses\n    groups = []\n\n    # Initialize a stack to keep track of the opening parentheses\n    stack = []\n\n    # Iterate through the characters in the input string\n    for char in s:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == \"(\":\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the stack and add the group to the list\n        elif char == \")\":\n            group = \"\"\n            while stack and stack[-1] != \"(\":\n                group += stack.pop()\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n                groups.append(group[::-1])\n\n    # If there are any leftover opening parentheses, add them to the list\n    while stack:\n        groups.append(stack.pop()[::-1])\n\n    return groups\n[/PYTHON]</s>", "2": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'truncate_number' that takes a positive floating point number as input and returns the decimal part of the number, which is the fraction of the number after removing the integer part. The integer part is defined as the largest integer smaller than the given number.\n```\n[/INST]  [PYTHON]\ndef truncate_number(number):\n    return abs(number) % 1\n[/PYTHON]</s>", "3": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'below_zero' which checks a list of deposit and withdrawal operations on a bank account starting with a zero balance. The function should return True if at any point the account balance falls below zero, and False otherwise.\n```\n[/INST]  [PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False\n[/PYTHON]</s>", "4": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'mean_absolute_deviation' which calculates the Mean Absolute Deviation (MAD) for a given list of numbers. The MAD is determined by the average absolute difference between each element in the list and the mean of the list.\n```\n[/INST]  [PYTHON]\ndef mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n[/PYTHON]</s>", "5": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'intersperse' that takes a list of integers 'numbers' and a single integer 'delimeter'. The function should insert the 'delimeter' between every two consecutive elements of the 'numbers' list and return the new list.\n```\n[/INST]  [PYTHON]\ndef intersperse(numbers, delimeter):\n    return [delimeter] + numbers + [delimeter]\n[/PYTHON]</s>", "6": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'parse_nested_parens' that takes a single string input representing multiple groups of nested parentheses separated by spaces, and returns a list of integers where each integer represents the deepest level of nesting within each group of parentheses.\n```\n[/INST]  [PYTHON]\ndef parse_nested_parens(s):\n    # split the input string into a list of substrings\n    subs = s.split()\n    # initialize an empty list to store the results\n    results = []\n    # loop through each substring\n    for sub in subs:\n        # initialize a variable to keep track of the current level of nesting\n        level = 0\n        # loop through each character in the substring\n        for char in sub:\n            # if the character is an opening parenthesis, increase the level of nesting\n            if char == '(':\n                level += 1\n            # if the character is a closing parenthesis, decrease the level of nesting\n            elif char == ')':\n                level -= 1\n        # add the current level of nesting to the list of results\n        results.append(level)\n    # return the list of results\n    return results\n[/PYTHON]</s>", "7": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'filter_by_substring' which filters a list of strings by retaining only those strings that contain a specific given substring.\n```\n[/INST]  [PYTHON]\ndef filter_by_substring(my_list, substring):\n    return [word for word in my_list if substring in word]\n[/PYTHON]</s>", "8": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sum_product' that takes a list of integers and returns a tuple. The tuple should consist of two elements: the sum of all integers in the list and the product of all integers in the list. If the list is empty, the sum should be 0 and the product should be 1.\n```\n[/INST]  [PYTHON]\ndef sum_product(my_list):\n    if not my_list:\n        return (0, 1)\n    return (sum(my_list), prod(my_list))\n[/PYTHON]</s>", "9": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'rolling_max' that takes a list of integers and returns a list where each element at index i is the maximum value from the start of the list up to and including the element at index i.\n```\n[/INST]  [PYTHON]\ndef rolling_max(my_list):\n    return [max(my_list[:i+1]) for i in range(len(my_list))]\n[/PYTHON]</s>", "10": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'make_palindrome' that constructs the shortest palindrome starting with a given string. This involves identifying the longest palindromic suffix of the string and then appending the reverse of the prefix preceding this palindrome at the end of the original string.\n```\n[/INST]  [PYTHON]\ndef make_palindrome(string):\n    # Find the longest palindromic suffix of the string\n    suffix = string[::-1]\n    for i in range(len(string) - 1, -1, -1):\n        if suffix[:i + 1] == suffix[i + 1:]:\n            suffix = suffix[:i + 1]\n            break\n\n    # Append the reverse of the prefix preceding the palindromic suffix\n    return string[:len(string) - len(suffix)] + suffix[::-1]\n[/PYTHON]</s>", "11": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'string_xor' that takes two strings, 'a' and 'b', both consisting only of the characters '1' and '0'. The function should perform a binary XOR operation on corresponding characters of these strings and return the result as a new string.\n```\n[/INST]  [PYTHON]\ndef string_xor(a, b):\n    return \"\".join(str(int(xa ^ xb)) for xa, xb in zip(a, b))\n[/PYTHON]</s>", "12": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'longest' which takes a list of strings and returns the first longest string from the list. If there are multiple strings of the same maximum length, return the first one encountered. The function should return None if the input list is empty.\n```\n[/INST]  [PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]</s>", "13": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'greatest_common_divisor' that computes and returns the greatest common divisor of two integers a and b.\n```\n[/INST]  [PYTHON]\ndef greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n[/PYTHON]</s>", "14": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'all_prefixes' which generates and returns a list of all prefixes of a given input string, starting from the shortest to the longest.\n```\n[/INST]  [PYTHON]\ndef all_prefixes(input_string):\n    return [input_string[:i] for i in range(len(input_string))]\n[/PYTHON]</s>", "15": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'string_sequence' that takes an integer n and returns a string containing space-delimited numbers starting from 0 up to n inclusive.\n```\n[/INST]  [PYTHON]\ndef string_sequence(n):\n    return \" \".join(str(i) for i in range(n+1))\n[/PYTHON]</s>", "16": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'count_distinct_characters' that calculates the number of distinct characters in a given string, ignoring the case of the characters.\n```\n[/INST]  [PYTHON]\ndef count_distinct_characters(input_string):\n    return len(set(input_string.lower()))\n[/PYTHON]</s>", "17": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'parse_music' which takes a string input representing musical notes in a special ASCII format and returns a list of integers. Each integer in the list corresponds to the duration in beats of a musical note. The function should recognize 'o' as a whole note lasting four beats, 'o|' as a half note lasting two beats, and '.|' as a quarter note lasting one beat.\n```\n[/INST]  [PYTHON]\ndef parse_music(input_string):\n    note_durations = []\n    for char in input_string:\n        if char == 'o':\n            note_durations.append(4)\n        elif char == 'o|':\n            note_durations.append(2)\n        elif char == '.|':\n            note_durations.append(1)\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    return note_durations\n[/PYTHON]</s>", "18": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'how_many_times' which counts and returns the number of times a specified substring appears in a given string, including overlapping occurrences.\n```\n[/INST]  [PYTHON]\ndef how_many_times(string, substring):\n    return string.count(substring)\n[/PYTHON]</s>", "19": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sort_numbers' which takes a space-delimited string consisting of number words from 'zero' to 'nine' and returns a new string with the number words sorted in ascending order based on their numeric value. The function should handle an empty string by returning an empty string.\n```\n[/INST]  [PYTHON]\ndef sort_numbers(string):\n    if string == \"\":\n        return \"\"\n    number_words = string.split()\n    number_words.sort(key=lambda x: int(x))\n    return \" \".join(number_words)\n[/PYTHON]</s>", "20": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'find_closest_elements' that identifies and returns a pair of numbers from a list that are closest to each other. The function should return the pair in ascending order.\n```\n[/INST]  [PYTHON]\ndef find_closest_elements(my_list):\n    # Sort the list in ascending order\n    my_list.sort()\n    # Initialize a variable to store the closest pair\n    closest_pair = []\n    # Iterate over the list\n    for i in range(len(my_list) - 1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(my_list[i] - my_list[i + 1])\n        # If the difference is less than the current minimum difference, update the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = [my_list[i], my_list[i + 1]]\n    # Return the closest pair in ascending order\n    return closest_pair\n[/PYTHON]</s>", "21": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'rescale_to_unit' that applies a linear transformation to a list of numbers, ensuring the smallest number in the list becomes 0 and the largest number becomes 1. Ensure the list has at least two elements.\n```\n[/INST]  [PYTHON]\ndef rescale_to_unit(numbers):\n    if len(numbers) < 2:\n        return numbers\n    else:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        scale = 1.0 / (max_val - min_val)\n        return [scale * (x - min_val) for x in numbers]\n[/PYTHON]</s>", "22": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'filter_integers' that filters a given list to return only integer values.\n```\n[/INST]  [PYTHON]\ndef filter_integers(my_list):\n    return [x for x in my_list if type(x) == int]\n[/PYTHON]</s>", "23": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'strlen' that returns the length of a given string.\n```\n[/INST]  [PYTHON]\ndef strlen(s):\n    return len(s)\n[/PYTHON]</s>", "24": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'largest_divisor' that takes an integer 'n' and returns the largest divisor of 'n' that is smaller than 'n' itself.\n```\n[/INST]  [PYTHON]\ndef largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n[/PYTHON]</s>", "25": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'factorize' that takes an integer and returns a list of its prime factors in ascending order. The output list should include each prime factor the number of times it appears in the factorization of the input integer, and the product of all factors listed should equal the input number.\n```\n[/INST]  [PYTHON]\ndef factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n[/PYTHON]</s>", "26": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'remove_duplicates' that from a list of integers, removes all elements that occur more than once and returns a new list containing only elements that appear exactly once, maintaining the order of these elements as in the input list.\n```\n[/INST]  [PYTHON]\ndef remove_duplicates(my_list):\n    seen = set()\n    result = []\n    for x in my_list:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n[/PYTHON]</s>", "27": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'flip_case' which converts all lowercase characters in a given string to uppercase, and all uppercase characters to lowercase.\n```\n[/INST]  [PYTHON]\ndef flip_case(input_string):\n    result = \"\"\n    for char in input_string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n[/PYTHON]</s>", "28": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'concatenate' which takes a list of strings and concatenates them into a single string.\n```\n[/INST]  [PYTHON]\ndef concatenate(my_list):\n    return \"\".join(my_list)\n[/PYTHON]</s>", "29": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'filter_by_prefix' that filters a list of strings to only include those that start with a specified prefix.\n```\n[/INST]  [PYTHON]\ndef filter_by_prefix(my_list, prefix):\n    return [word for word in my_list if word.startswith(prefix)]\n[/PYTHON]</s>", "30": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'get_positive' which filters out only the positive numbers from a given list of numbers. \n```\n[/INST]  [PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]</s>", "31": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_prime' that determines if a given number is prime. The function should return true if the number is prime and false otherwise.\n```\n[/INST]  [PYTHON]\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "32": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'find_zero' which calculates a zero point of a polynomial, given its coefficients in a list. The function works only for polynomials with an even number of coefficients, where the largest non-zero coefficient ensures a solution.\n```\n[/INST]  [PYTHON]\ndef find_zero(coefficients):\n    if len(coefficients) % 2 == 1 or max(coefficients) == 0:\n        return None\n    x = 0\n    for i in range(len(coefficients) - 1, -1, -2):\n        x = x * x + coefficients[i]\n    return x\n[/PYTHON]</s>", "33": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sort_third' which sorts a list at indices divisible by three while keeping other elements at their original indices unchanged.\n```\n[/INST]  [PYTHON]\ndef sort_third(my_list):\n    result = []\n    for i, x in enumerate(my_list):\n        if i % 3 == 0:\n            result.append(sorted(x))\n        else:\n            result.append(x)\n    return result\n[/PYTHON]</s>", "34": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'unique' that returns a sorted list of unique elements from a given list.\n```\n[/INST]  [PYTHON]\ndef unique(my_list):\n    return sorted(set(my_list))\n[/PYTHON]</s>", "35": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'max_element' that returns the maximum element from a list of numbers.\n```\n[/INST]  [PYTHON]\ndef max_element(my_list):\n    return max(my_list)\n[/PYTHON]</s>", "36": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'fizz_buzz' that counts how many times the digit '7' appears in integers less than a given number 'n', where these integers are divisible by either 11 or 13.\n```\n[/INST]  [PYTHON]\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count\n[/PYTHON]</s>", "37": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sort_even' which processes a list by sorting the elements located at even indices while maintaining the original elements at odd indices intact. The function should return a new list reflecting this arrangement.\n```\n[/INST]  [PYTHON]\ndef sort_even(my_list):\n    return [my_list[i] for i in range(len(my_list)) if i % 2 == 0] + [my_list[i] for i in range(len(my_list)) if i % 2 == 1]\n[/PYTHON]</s>", "38": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'encode_cyclic' that takes a string as input, encodes it by cycling groups of three characters, and returns the encoded string. Similarly, write a function named 'decode_cyclic' that takes an encoded string, decodes it by reversing the cycling operation on groups of three characters, and returns the original string.\n```\n[/INST]  [PYTHON]\ndef encode_cyclic(s):\n    return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\ndef decode_cyclic(s):\n    return ''.join([s[i:i+3] for i in range(len(s)-1, -1, -3)])\n[/PYTHON]</s>", "39": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'prime_fib' which returns the n-th number that is both a Fibonacci number and a prime.\n```\n[/INST]  [PYTHON]\ndef prime_fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if is_prime(a) and a > 1:\n            return a\n    return -1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "40": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'triples_sum_to_zero' that takes a list of integers and checks if there are any three distinct elements within the list that sum up to zero. The function should return True if such a combination exists and False otherwise.\n```\n[/INST]  [PYTHON]\ndef triples_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            for k in range(j+1, len(my_list)):\n                if my_list[i] + my_list[j] + my_list[k] == 0:\n                    return True\n    return False\n[/PYTHON]</s>", "41": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'car_race_collision' which calculates the number of collisions between two sets of n cars, each driving in opposite directions on an infinitely long straight line. Each set contains n cars, with one traveling from left to right and the other from right to left, and all cars move at the same speed. The function should return the square of n, representing the total number of collisions.\n```\n[/INST]  [PYTHON]\ndef car_race_collision(n):\n    return n * (n - 1) * 2\n[/PYTHON]</s>", "42": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'incr_list' that takes a list of integers and returns a new list where each element is incremented by 1.\n```\n[/INST]  [PYTHON]\ndef incr_list(my_list):\n    return [x + 1 for x in my_list]\n[/PYTHON]</s>", "43": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'pairs_sum_to_zero' which checks a given list of integers and returns True if any two distinct elements in the list sum to zero, otherwise it returns False.\n```\n[/INST]  [PYTHON]\ndef pairs_sum_to_zero(my_list):\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] + my_list[j] == 0:\n                return True\n    return False\n[/PYTHON]</s>", "44": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'change_base' that converts an integer 'x' into a specified numerical base. The function should return the result as a string representation of the number in the new base. The bases considered are less than 10.\n```\n[/INST]  [PYTHON]\ndef change_base(x, base):\n    digits = '0123456789ABCDEF'\n    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = digits[x % base] + res\n        x //= base\n    return res\n[/PYTHON]</s>", "45": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'triangle_area' which calculates the area of a triangle given the length of a base and the corresponding height. The formula for the area of a triangle is half the product of the base and height.\n```\n[/INST]  [PYTHON]\ndef triangle_area(base, height):\n    return 0.5 * base * height\n[/PYTHON]</s>", "46": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'fib4' which calculates the n-th element of the Fib4 number sequence efficiently without using recursion. This sequence starts with the first four values being 0, 0, 2, and 0, respectively, and every subsequent value is the sum of the previous four values in the sequence.\n```\n[/INST]  [PYTHON]\ndef fib4(n):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n[/PYTHON]</s>", "47": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'median' which determines the median of a list of elements. The median is the middle value when the list is ordered, and in the case of an even number of elements, it is the average of the two middle values.\n```\n[/INST]  [PYTHON]\ndef median(my_list):\n    sorted_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median1 = sorted_list[len(my_list) // 2]\n        median2 = sorted_list[len(my_list) // 2 - 1]\n        return (median1 + median2) / 2\n    else:\n        return sorted_list[len(my_list) // 2]\n[/PYTHON]</s>", "48": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_palindrome' that determines whether a given string is a palindrome.\n```\n[/INST]  [PYTHON]\ndef is_palindrome(string):\n    return string == string[::-1]\n[/PYTHON]</s>", "49": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'modp' that computes the value of 2 raised to the power of 'n' modulo 'p', ensuring proper handling of large numbers.\n```\n[/INST]  [PYTHON]\ndef modp(n, p):\n    return pow(2, n, p)\n[/PYTHON]</s>", "50": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'decode_shift' that decodes a string that was originally encoded by shifting each character forward by 5 positions in the alphabet.\n```\n[/INST]  [PYTHON]\ndef decode_shift(shifted_string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    decoded_string = \"\"\n    for char in shifted_string:\n        index = alphabet.find(char)\n        if index != -1:\n            decoded_string += alphabet[index + 5]\n        else:\n            decoded_string += char\n    return decoded_string\n[/PYTHON]</s>", "51": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'remove_vowels' which takes a string as input and returns a new string where all vowels (both uppercase and lowercase) have been removed.\n```\n[/INST]  [PYTHON]\ndef remove_vowels(my_string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return \"\".join([char for char in my_string if char.lower() not in vowels])\n[/PYTHON]</s>", "52": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'below_threshold' that checks if all elements in a list are below a specified threshold value and returns True if they are, otherwise False.\n```\n[/INST]  [PYTHON]\ndef below_threshold(my_list, threshold):\n    return all(x < threshold for x in my_list)\n[/PYTHON]</s>", "53": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'add' that computes the sum of two numbers, x and y.\n```\n[/INST]  [PYTHON]\ndef add(x, y):\n    return x + y\n[/PYTHON]</s>", "54": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'same_chars' that checks if two given words consist of the same characters.\n```\n[/INST]  [PYTHON]\ndef same_chars(word1, word2):\n    return sorted(word1) == sorted(word2)\n[/PYTHON]</s>", "55": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'fib' which calculates the n-th Fibonacci number\n```\n[/INST]  [PYTHON]\ndef fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n[/PYTHON]</s>", "56": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'correct_bracketing' that checks whether a given string of '<' and '>' brackets is correctly bracketed. Every opening bracket should have a corresponding closing bracket for the string to return True.\n```\n[/INST]  [PYTHON]\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n[/PYTHON]</s>", "57": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'monotonic' that determines if the elements of a list are either monotonically increasing or decreasing. The function should return True if the list elements meet either of these conditions, otherwise, it should return False.\n```\n[/INST]  [PYTHON]\ndef monotonic(my_list):\n    if len(my_list) <= 1:\n        return True\n    return all(my_list[i] <= my_list[i+1] for i in range(len(my_list)-1)) or all(my_list[i] >= my_list[i+1] for i in range(len(my_list)-1))\n[/PYTHON]</s>", "58": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'common' which identifies and returns a sorted list of unique elements that are common to two given lists.\n```\n[/INST]  [PYTHON]\ndef common(list1, list2):\n    return sorted(set(list1) & set(list2))\n[/PYTHON]</s>", "59": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'largest_prime_factor' that returns the largest prime factor of an integer 'n'. Assume 'n' is greater than 1 and is not a prime itself.\n```\n[/INST]  [PYTHON]\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n[/PYTHON]</s>", "60": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sum_to_n' that calculates the sum of numbers from 1 to a given integer n.\n```\n[/INST]  [PYTHON]\ndef sum_to_n(n):\n    return sum(range(1, n+1))\n[/PYTHON]</s>", "61": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"correct_bracketing\" that checks a string containing only \"(\" and \")\" characters. The function should return True if every opening bracket has a corresponding closing bracket and they are correctly ordered, otherwise, it should return False.\n```\n[/INST]  [PYTHON]\ndef correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n[/PYTHON]</s>", "62": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'derivative' which calculates the derivative of a polynomial represented by a list of coefficients. The coefficients in the list correspond to the powers of the polynomial in ascending order, starting from the constant term. The function should return the derivative of the polynomial in the same form as a list of coefficients.\n```\n[/INST]  [PYTHON]\ndef derivative(coefficients):\n    return [coefficient * (i + 1) for i, coefficient in enumerate(coefficients[:-1])]\n[/PYTHON]</s>", "63": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'fibfib' that calculates the n-th element of the FibFib number sequence. This sequence starts with the first two values as 0, the third value as 1, and each subsequent value is the sum of the previous three values in the sequence.\n```\n[/INST]  [PYTHON]\ndef fibfib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b + b\n    return a\n[/PYTHON]</s>", "64": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'vowels_count' which counts the number of vowels in a given string. Vowels are defined as 'a', 'e', 'i', 'o', 'u', and 'y'. The character 'y' is considered a vowel only when it is the last character in the string.\n```\n[/INST]  [PYTHON]\ndef vowels_count(my_string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in my_string:\n        if char in vowels:\n            count += 1\n    return count\n[/PYTHON]</s>", "65": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'circular_shift' which performs a circular shift on the digits of an integer 'x', shifting the digits right by a specified number of places 'shift' and returning the result as a string. If 'shift' exceeds the number of digits in 'x', the function should return the digits in reverse order.\n```\n[/INST]  [PYTHON]\ndef circular_shift(x, shift):\n    digits = list(str(x))\n    if shift >= len(digits):\n        return ''.join(reversed(digits))\n    else:\n        digits = digits[shift:] + digits[:shift]\n        return ''.join(digits)\n[/PYTHON]</s>", "66": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'digitSum' which calculates the sum of the ASCII values of only the uppercase characters in a given string.\n```\n[/INST]  [PYTHON]\ndef digitSum(myString):\n    sum = 0\n    for char in myString:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n[/PYTHON]</s>", "67": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"fruit_distribution\" which calculates the number of mango fruits in a basket by taking the total number of fruits and subtracting the numbers of apples and oranges given in a string. The string will format the number of apples and oranges as \"x apples and y oranges\".\n```\n[/INST]  [PYTHON]\ndef fruit_distribution(total_fruits, fruit_string):\n    apples, oranges = map(int, fruit_string.split(\" and \"))\n    return total_fruits - apples - oranges\n[/PYTHON]</s>", "68": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'pluck' that identifies and extracts the smallest even-valued node from a given list representing a branch of a tree. If the entire list lacks even numbers or is empty, the function should return an empty list. If the smallest even number appears more than once, return the first occurrence of this number along with its index in the format [value, index].\n```\n[/INST]  [PYTHON]\ndef pluck(my_list):\n    smallest_even = []\n    for i, n in enumerate(my_list):\n        if n % 2 == 0 and (not smallest_even or n < smallest_even[0]):\n            smallest_even = [n, i]\n    return smallest_even or []\n[/PYTHON]</s>", "69": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'search' that identifies the greatest integer greater than zero from a list of positive integers, where the integer's frequency in the list is at least as large as the integer itself. If no such integer exists, the function should return -1.\n```\n[/INST]  [PYTHON]\ndef search(my_list):\n    max_freq = 0\n    max_num = -1\n    for num in my_list:\n        freq = my_list.count(num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num if max_num != -1 else -1\n[/PYTHON]</s>", "70": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'strange_sort_list' which takes a list of integers and returns a list sorted in a strange order. In this strange sorting order, the list begins with the smallest value, followed by the largest of the remaining integers, then the next smallest, and so on until all elements are used.\n```\n[/INST]  [PYTHON]\ndef strange_sort_list(my_list):\n    return sorted(my_list, key=lambda x: x, reverse=True)\n[/PYTHON]</s>", "71": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'triangle_area' that calculates the area of a triangle given the lengths of its three sides. If the sides form a valid triangle, return the area rounded to two decimal places. If not, return -1. A valid triangle is defined by the condition that the sum of any two sides must be greater than the third side.\n```\n[/INST]  [PYTHON]\ndef triangle_area(side_a, side_b, side_c):\n    if side_a + side_b < side_c or side_b + side_c < side_a or side_a + side_c < side_b:\n        return -1\n    else:\n        s = (side_a + side_b + side_c) / 2\n        area = (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5\n        return round(area, 2)\n[/PYTHON]</s>", "72": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'will_it_fly' that determines if an object represented by a list 'q' will fly based on two conditions: the list needs to be a palindrome, and the sum of its elements must not exceed a given threshold 'w'. The function should return True if both conditions are met, and False otherwise.\n```\n[/INST]  [PYTHON]\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n[/PYTHON]</s>", "73": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'smallest_change' which calculates the minimum number of changes required to make an array of integers palindromic. The function should determine how many elements need to be adjusted so that the array reads the same forwards and backwards.\n```\n[/INST]  [PYTHON]\ndef smallest_change(arr):\n    # Reverse the array\n    arr.reverse()\n    # Zip the array with its reverse\n    zipped = zip(arr, arr)\n    # Count the number of elements that are not equal\n    count = sum(1 for i, j in zipped if i != j)\n    return count\n[/PYTHON]</s>", "74": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'total_match' that accepts two lists of strings and returns the list which has fewer total characters across all its strings. If both lists have an equal number of characters, the function should return the first list.\n```\n[/INST]  [PYTHON]\ndef total_match(list1, list2):\n    total1 = sum(len(word) for word in list1)\n    total2 = sum(len(word) for word in list2)\n    if total1 < total2:\n        return list1\n    elif total2 < total1:\n        return list2\n    else:\n        return list1\n[/PYTHON]</s>", "75": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_multiply_prime' that evaluates whether a given number is the product of exactly three distinct prime numbers. The input number will always be less than 100.\n```\n[/INST]  [PYTHON]\ndef is_multiply_prime(n):\n    if n >= 100:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if is_prime(i) and is_prime(n // i) and is_prime(n // (i * n // i)):\n                return True\n    return False\n\ndef is_prime(n):\n    if n <= 1 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "76": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_simple_power' that determines whether a number x can be represented as a simple power of another number n, returning true if it can and false otherwise. A number x is a simple power of n if it can be expressed as n raised to the power of some integer.\n```\n[/INST]  [PYTHON]\ndef is_simple_power(x, n):\n    return x == n ** int(x ** 0.5)\n[/PYTHON]</s>", "77": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'iscube' that receives an integer 'a' and determines whether 'a' is a cubic integer. The function returns True if the integer is the cube of some integer number, otherwise it returns False. Note that the function should handle both positive and negative integers equally.\n```\n[/INST]  [PYTHON]\ndef iscube(a):\n    if a < 0:\n        a = -a\n    for i in range(1, int(a**0.5) + 1):\n        if a == i**3:\n            return True\n    return False\n[/PYTHON]</s>", "78": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'hex_key' that counts how many characters in a given hexadecimal number string are prime hexadecimal digits. Prime hexadecimal digits are 2, 3, 5, 7, B (representing 11), and D (representing 13).\n```\n[/INST]  [PYTHON]\ndef hex_key(hex_string):\n    count = 0\n    for char in hex_string:\n        if char in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]:\n            count += 1\n    return count\n[/PYTHON]</s>", "79": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'decimal_to_binary' which converts a given decimal number into a binary format string, framed by the characters 'db' at both the beginning and the end of the string.\n```\n[/INST]  [PYTHON]\ndef decimal_to_binary(n):\n    return f\"db{bin(n)[2:]:08b}db\"\n[/PYTHON]</s>", "80": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_happy' which checks if a given string is happy or not. A string is defined as happy if it meets two conditions: its length must be at least three, and every group of three consecutive letters within the string must consist of distinct characters.\n```\n[/INST]  [PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n[/PYTHON]</s>", "81": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'numerical_letter_grade' which converts a list of numerical GPAs into letter grades based on the following correspondences: 4.0 A+; >3.7 A; >3.3 A-; >3.0 B+; >2.7 B; >2.3 B-; >2.0 C+; >1.7 C; >1.3 C-; >1.0 D+; >0.7 D; >0.0 D-; 0.0 E. The function should return a list of letter grades corresponding to each GPA in the input list.\n```\n[/INST]  [PYTHON]\ndef numerical_letter_grade(gpa_list):\n    letter_grades = []\n    for gpa in gpa_list:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n[/PYTHON]</s>", "82": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'prime_length' which determines if the length of a given string is a prime number, returning true if it is and false otherwise.\n```\n[/INST]  [PYTHON]\ndef prime_length(s):\n    n = len(s)\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "83": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'starts_one_ends' that returns the count of n-digit positive integers that either start or end with the digit 1.\n```\n[/INST]  [PYTHON]\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**n):\n        num = str(i)\n        if num[0] == \"1\" or num[-1] == \"1\":\n            count += 1\n    return count\n[/PYTHON]</s>", "84": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'solve' which calculates the sum of the digits of a given positive integer N, then converts this sum to its binary representation and returns it as a string.\n```\n[/INST]  [PYTHON]\ndef solve(N):\n    # Calculate the sum of the digits of N\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n\n    # Convert the sum to its binary representation\n    binary_representation = bin(sum_of_digits)[2:]\n\n    # Return the binary representation as a string\n    return binary_representation\n[/PYTHON]</s>", "85": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'add' which calculates the sum of even numbers located at odd indices in a list of integers.\n```\n[/INST]  [PYTHON]\ndef add(my_list):\n    return sum(my_list[::2])\n[/PYTHON]</s>", "86": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'anti_shuffle' that takes a string and returns a modified version of it where each word in the string is rearranged such that the characters in each word are in ascending order based on their ASCII values. The function should preserve the order of words and spaces in the input string.\n```\n[/INST]  [PYTHON]\ndef anti_shuffle(input_string):\n    words = input_string.split()\n    output_string = \"\"\n    for word in words:\n        char_list = list(word)\n        char_list.sort(key=lambda x: ord(x))\n        output_string += \"\".join(char_list)\n        output_string += \" \"\n    return output_string.strip()\n[/PYTHON]</s>", "87": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'get_row' that searches for a specified integer in a two-dimensional list, which consists of nested lists of varying lengths. The function should return a list of tuples, where each tuple represents the coordinates (row and column) of the found integer. The row indices should be in ascending order, and within each row, the column indices should be in descending order.\n```\n[/INST]  [PYTHON]\ndef get_row(my_list, target):\n    result = []\n    for i, row in enumerate(my_list):\n        for j, col in enumerate(row):\n            if col == target:\n                result.append((i, j))\n    return result\n[/PYTHON]</s>", "88": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sort_array' that takes an array of non-negative integers and returns a sorted copy of the array. The array should be sorted in ascending order if the sum of the first and last element is odd, and in descending order if the sum is even. The original array must not be modified.\n```\n[/INST]  [PYTHON]\ndef sort_array(arr):\n    sum_first_last = arr[0] + arr[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)\n[/PYTHON]</s>", "89": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'encrypt' that takes a string as an argument and returns an encrypted string. The encryption involves rotating the alphabet so that each letter in the input string is shifted by four places down the alphabet.\n```\n[/INST]  [PYTHON]\ndef encrypt(input_string):\n    # Initialize an empty string to store the encrypted output\n    output_string = \"\"\n\n    # Loop through each character in the input string\n    for char in input_string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Shift the character four places down the alphabet\n            output_string += chr((ord(char) + 4 - ord('A')) % 26 + ord('A'))\n        # Check if the character is lowercase\n        elif char.islower():\n            # Shift the character four places down the alphabet\n            output_string += chr((ord(char) + 4 - ord('a')) % 26 + ord('a'))\n        # If the character is a space or any other character, add it directly to the output string\n        else:\n            output_string += char\n\n    return output_string\n[/PYTHON]</s>", "90": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'next_smallest' that identifies and returns the second smallest element from a given list of integers. If the list contains fewer than two unique elements, the function should return None.\n```\n[/INST]  [PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(my_list)):\n        if sorted_list[i] != sorted_list[i-1]:\n            return sorted_list[i]\n[/PYTHON]</s>", "91": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"is_bored\" that counts the number of sentences in a given string that start with the word \"I\". Sentences within the string are separated by the characters \".\", \"?\", or \"!\".\n```\n[/INST]  [PYTHON]\ndef is_bored(sentence):\n    return sentence.count(\"I\")\n[/PYTHON]</s>", "92": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'any_int' that takes three numbers as input. The function should return true if any one of these numbers is equal to the sum of the other two and all numbers are integers. Otherwise, it should return false.\n```\n[/INST]  [PYTHON]\ndef any_int(a, b, c):\n    if not all(isinstance(x, int) for x in [a, b, c]):\n        return False\n    if a == b + c or b == a + c or c == a + b:\n        return True\n    else:\n        return False\n[/PYTHON]</s>", "93": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'encode' that takes a message as input and encodes it by swapping the case of all letters and replacing each vowel with the letter that appears two places ahead of it in the English alphabet.\n```\n[/INST]  [PYTHON]\ndef encode(message):\n    # Swap the case of all letters\n    encoded_message = message.swapcase()\n\n    # Replace vowels with letters two places ahead\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        index = encoded_message.find(vowel)\n        if index != -1:\n            encoded_message = encoded_message[:index] + encoded_message[index + 2] + encoded_message[index + 1] + encoded_message[index + 3:]\n\n    return encoded_message\n[/PYTHON]</s>", "94": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'skjkasdkd' which processes a list of integers to find the largest prime number, calculates the sum of its digits, and returns this sum.\n```\n[/INST]  [PYTHON]\ndef skjkasdkd(my_list):\n    largest_prime = 0\n    for num in my_list:\n        if num > largest_prime and is_prime(num):\n            largest_prime = num\n    return sum(str(largest_prime))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "95": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'check_dict_case' that evaluates if a dictionary\u2019s keys are either all in lowercase letters or all in uppercase letters, returning True in these cases. If the dictionary is empty or if the keys include both cases or non-string types, it should return False.\n```\n[/INST]  [PYTHON]\ndef check_dict_case(my_dict):\n    if not my_dict:\n        return False\n    if all(isinstance(key, str) and key.islower() for key in my_dict):\n        return True\n    if all(isinstance(key, str) and key.isupper() for key in my_dict):\n        return True\n    return False\n[/PYTHON]</s>", "96": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'count_up_to' that takes a non-negative integer 'n' and returns a list of prime numbers that are less than 'n'.\n```\n[/INST]  [PYTHON]\ndef count_up_to(n):\n    prime_list = []\n    for i in range(2, n+1):\n        if all(i % num != 0 for num in range(2, int(i ** 0.5) + 1)):\n            prime_list.append(i)\n    return prime_list\n[/PYTHON]</s>", "97": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'multiply' that takes two integers as inputs and returns the product of their unit digits.\n```\n[/INST]  [PYTHON]\ndef multiply(num1, num2):\n    return (num1 % 10) * (num2 % 10)\n[/PYTHON]</s>", "98": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'count_upper' that counts the number of uppercase vowels located at even indices in a given string.\n```\n[/INST]  [PYTHON]\ndef count_upper(my_string):\n    count = 0\n    for i in range(len(my_string)):\n        if i % 2 == 0 and my_string[i].isupper():\n            count += 1\n    return count\n[/PYTHON]</s>", "99": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'closest_integer' that takes a string representing a number and returns the closest integer to it. If the number is exactly halfway between two integers, the function should round it away from zero.\n```\n[/INST]  [PYTHON]\ndef closest_integer(number_string):\n    number = float(number_string)\n    diff_up = abs(number - round(number))\n    diff_down = abs(number - round(number))\n    if diff_up == diff_down:\n        return 0\n    else:\n        return round(number)\n[/PYTHON]</s>", "100": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'make_a_pile' that creates a list of stone counts for each of n levels. The first level starts with n stones, and each subsequent level increases in a sequence by the next odd number if n is odd or the next even number if n is even. The function should return this list.\n```\n[/INST]  [PYTHON]\ndef make_a_pile(n):\n    levels = []\n    for i in range(n):\n        if i % 2 == 0:\n            levels.append(i + 2)\n        else:\n            levels.append(i + 1)\n    return levels\n[/PYTHON]</s>", "101": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'words_string' that takes a string containing words separated by commas or spaces and returns a list of words.\n```\n[/INST]  [PYTHON]\ndef words_string(s):\n    return s.split(\", \")\n[/PYTHON]</s>", "102": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'choose_num' that takes two positive integers, x and y, and identifies the largest even integer within the inclusive range [x, y]. If no even integer exists in this range, the function should return -1.\n```\n[/INST]  [PYTHON]\ndef choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n[/PYTHON]</s>", "103": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'rounded_avg' that computes the rounded average of two positive integers, n and m. The function should return this average in binary representation. If the first integer, n, is greater than the second integer, m, the function should return -1.\n```\n[/INST]  [PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:]\n[/PYTHON]</s>", "104": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'unique_digits' that filters and returns a sorted list of integers from a given list. The integers in the returned list should contain only odd digits.\n```\n[/INST]  [PYTHON]\ndef unique_digits(my_list):\n    return sorted([x for x in my_list if x % 2 != 0])\n[/PYTHON]</s>", "105": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"by_length\" that processes an array of integers to sort those integers that fall between 1 and 9 inclusive, reverse this sorted array, and convert each integer into its corresponding English word representation ranging from \"One\" to \"Nine\". If the array contains integers outside this range, they should be ignored. If the array is empty, the function should return an empty array.\n```\n[/INST]  [PYTHON]\ndef by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True) if 1 <= i <= 9]\n[/PYTHON]</s>", "106": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'f' which takes an integer 'n' as a parameter and returns a list of integers of size 'n'. Each element in the list corresponds to an operation based on its index 'i' starting from 1. If the index 'i' is even, the element is the factorial of 'i', otherwise, it is the sum of numbers from 1 to 'i'.\n```\n[/INST]  [PYTHON]\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n[/PYTHON]</s>", "107": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'even_odd_palindrome' that calculates the count of even and odd integer palindromes within a given range from 1 to a specified positive integer 'n', inclusive. The function returns a tuple where the first element is the count of even integer palindromes and the second element is the count of odd integer palindromes.\n```\n[/INST]  [PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 == 1:\n            count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]</s>", "108": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'count_nums' which takes an array of integers and returns the number of elements for which the sum of their digits is greater than zero. For negative numbers, the first digit should be considered with its negative sign when calculating the sum of the digits.\n```\n[/INST]  [PYTHON]\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n            if sum_digits > 0:\n                count += 1\n    return count\n[/PYTHON]</s>", "109": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'move_one_ball' that checks if it's possible to sort an array of integers in non-decreasing order by performing any number of right shift operations. A right shift operation moves all elements of the array one position to the right, with the last element moving to the front.\n```\n[/INST]  [PYTHON]\ndef move_one_ball(arr):\n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    # Check if the array is sorted in non-decreasing order after performing a right shift operation\n    if arr[0] > arr[-1] and arr[1:] == sorted(arr[1:]):\n        return True\n    # If none of the above conditions are met, return False\n    return False\n[/PYTHON]</s>", "110": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"exchange\" which determines if it is possible to swap elements between two lists of numbers to make the first list contain only even numbers. Return \"YES\" if it is possible, otherwise return \"NO\". The function should not consider any limit on the number of exchanges performed between the two lists.\n```\n[/INST]  [PYTHON]\ndef exchange(list1, list2):\n    # Check if both lists are of equal length\n    if len(list1) != len(list2):\n        return \"NO\"\n\n    # Check if any element in list1 is not even\n    for element in list1:\n        if element % 2 != 0:\n            return \"NO\"\n\n    # Check if any element in list2 is not odd\n    for element in list2:\n        if element % 2 == 0:\n            return \"NO\"\n\n    # If all elements in list1 are even and all elements in list2 are odd, it is possible to swap elements between the two lists\n    return \"YES\"\n[/PYTHON]</s>", "111": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'histogram' which takes a string of space-separated lowercase words and returns a dictionary. This dictionary should contain only the words that appear most frequently in the input string and their respective counts. If multiple words have the same highest frequency, all should be included in the result.\n```\n[/INST]  [PYTHON]\ndef histogram(string):\n    words = string.split()\n    word_counts = {}\n    for word in words:\n        if word not in word_counts:\n            word_counts[word] = 1\n        else:\n            word_counts[word] += 1\n\n    max_count = max(word_counts.values())\n    most_frequent_words = [word for word, count in word_counts.items() if count == max_count]\n\n    return {word: count for word, count in word_counts.items() if word in most_frequent_words}\n[/PYTHON]</s>", "112": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'reverse_delete' which takes two strings as inputs and performs a deletion of all characters from the first string that are present in the second string. After the deletion, the function should evaluate if the resulting string is a palindrome, which means it reads the same forwards and backwards. The function should return a tuple containing the modified string and a boolean indicating whether the modified string is a palindrome.\n```\n[/INST]  [PYTHON]\ndef reverse_delete(str1, str2):\n    # Delete all characters from str1 that are present in str2\n    result = \"\".join(c for c in str1 if c not in str2)\n\n    # Check if the result is a palindrome\n    return result, result == result[::-1]\n[/PYTHON]</s>", "113": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"odd_count\" which processes a list of strings where each string is composed solely of digit characters. Each element of the output list should describe the count of odd digits in the corresponding input string, formatted as \"the number of odd elements in the string i of the input.\", where all the letters \"i\" are replaced by the count of odd digits in the input string.\n```\n[/INST]  [PYTHON]\ndef odd_count(my_list):\n    return [\"the number of odd elements in the string {} of the input.\".format(i) for i in my_list]\n[/PYTHON]</s>", "114": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'minSubArraySum' which finds the minimum sum of any non-empty sub-array of an array of integers.\n```\n[/INST]  [PYTHON]\ndef minSubArraySum(arr):\n    min_sum = float(\"inf\")\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        elif current_sum > min_sum:\n            current_sum = 0\n    return min_sum\n[/PYTHON]</s>", "115": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'max_fill' that calculates the number of times buckets need to be lowered to empty a grid of wells using a given bucket capacity. Each well is represented by a row in the grid, with each '1' indicating a unit of water. The output should be the total number of times the buckets are lowered.\n```\n[/INST]  [PYTHON]\ndef max_fill(grid, bucket_capacity):\n    rows, cols = len(grid), len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    total_fills = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1 and not visited[i][j]:\n                fill_well(grid, i, j, bucket_capacity, visited)\n                total_fills += 1\n\n    return total_fills\n\ndef fill_well(grid, i, j, bucket_capacity, visited):\n    rows, cols = len(grid), len(grid[0])\n    water_level = 0\n\n    while i >= 0 and grid[i][j] == 1:\n        water_level += 1\n        visited[i][j] = True\n        i -= 1\n\n    i += 1\n    while i < rows and water_level > 0:\n        if grid[i][j] == 0:\n            water_level = min(water_level, bucket_capacity)\n            grid[i][j] = water_level\n            water_level = 0\n        else:\n            water_level -= grid[i][j]\n        i += 1\n[/PYTHON]</s>", "116": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sort_array' which sorts an array of non-negative integers. The array should be sorted first by the number of ones in their binary representation in ascending order, and for those with the same number of ones, it should be sorted by their decimal values.\n```\n[/INST]  [PYTHON]\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n[/PYTHON]</s>", "117": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'select_words' that returns a list of all words from a given string 's' that contain exactly 'n' consonants, where 'n' is a natural number. If the input string is empty, the function should return an empty list. Assume the input string contains only letters and spaces.\n```\n[/INST]  [PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    return [word for word in words if word.count(\"consonant\") == n]\n[/PYTHON]</s>", "118": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'get_closest_vowel' which processes a word to identify the closest vowel that is sandwiched strictly between two consonants, starting from the rightmost end of the word. Ensure that vowels at the beginning or end of the word are not considered. If no such vowel exists, the function should return an empty string.\n```\n[/INST]  [PYTHON]\ndef get_closest_vowel(word):\n    # Find the rightmost consonant\n    rightmost_consonant_index = len(word) - 1\n    while rightmost_consonant_index >= 0 and word[rightmost_consonant_index].lower() not in \"bcdfghjklmnpqrstvwxyz\":\n        rightmost_consonant_index -= 1\n\n    # If there are no consonants, return an empty string\n    if rightmost_consonant_index == -1:\n        return \"\"\n\n    # Find the leftmost consonant\n    leftmost_consonant_index = rightmost_consonant_index - 1\n    while leftmost_consonant_index >= 0 and word[leftmost_consonant_index].lower() not in \"bcdfghjklmnpqrstvwxyz\":\n        leftmost_consonant_index -= 1\n\n    # If there are no consonants, return an empty string\n    if leftmost_consonant_index == -1:\n        return \"\"\n\n    # Return the vowel that is sandwiched between the two consonants\n    return word[leftmost_consonant_index + 1 : rightmost_consonant_index]\n[/PYTHON]</s>", "119": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'match_parens' which checks if it is possible to concatenate two strings in an input list, the strings  containing only parentheses in any order such that the resulting string is balanced. A string is considered balanced if all parentheses in it are correctly matched. The function should return 'Yes' if a balanced string can be formed, and 'No' otherwise.\n```\n[/INST]  [PYTHON]\ndef match_parens(my_list):\n    stack = []\n    for char in my_list:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return \"No\"\n            stack.pop()\n    return \"Yes\" if not stack else \"No\"\n[/PYTHON]</s>", "120": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'maximum' that returns a sorted list of the largest 'k' integers from a given list of integers 'arr'. The function will ensure that the returned list is of length 'k'.\n```\n[/INST]  [PYTHON]\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]</s>", "121": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'solution' which calculates the sum of all odd elements that are located in even positions within a list of integers.\n```\n[/INST]  [PYTHON]\ndef solution(my_list):\n    return sum([x for i, x in enumerate(my_list) if i % 2 == 0 and x % 2 != 0])\n[/PYTHON]</s>", "122": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'add_elements' which calculates the sum of the first 'k' elements in a list 'arr' that have at most two digits.\n```\n[/INST]  [PYTHON]\ndef add_elements(arr, k):\n    return sum(arr[:k])\n[/PYTHON]</s>", "123": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'get_odd_collatz' that takes a positive integer n and returns a sorted list of odd numbers from the Collatz sequence starting at n. The Collatz sequence is defined such that each term is obtained from the previous term as follows: if the term is even, the next term is half of the current term; if the term is odd, the next term is three times the current term plus one. The sequence is believed to always reach 1 regardless of the starting number.\n```\n[/INST]  [PYTHON]\ndef get_odd_collatz(n):\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted(sequence[1:])\n[/PYTHON]</s>", "124": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'valid_date' which validates a given date string by checking if it adheres to several criteria. The date is considered valid if it is not empty, follows the mm-dd-yyyy format, the month value is between 1 and 12, and the day value adheres to the correct number of days for the specified month, with February allowing up to 29 days, April, June, September, and November up to 30 days, and the rest up to 31 days.\n```\n[/INST]  [PYTHON]\ndef valid_date(date_string):\n    if not date_string:\n        return False\n    date_parts = date_string.split('-')\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if year < 0 or year > 9999:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    return True\n[/PYTHON]</s>", "125": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'split_words' that processes a given string of words. Depending on the presence of characters in the string, the function should split the string into a list of words either on whitespace or commas. If neither whitespaces nor commas are present, the function should return the count of lowercase letters that have odd positions in the alphabet.\n```\n[/INST]  [PYTHON]\ndef split_words(string):\n    words = string.split()\n    if words:\n        return words\n    else:\n        count = 0\n        for i, c in enumerate(string):\n            if c.islower() and i % 2 == 1:\n                count += 1\n        return count\n[/PYTHON]</s>", "126": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_sorted' that checks if a given list of non-negative integers is sorted in ascending order. Additionally, the function should return False if any integer appears more than twice in the list.\n```\n[/INST]  [PYTHON]\ndef is_sorted(my_list):\n    if len(my_list) == 0:\n        return True\n    for i in range(len(my_list) - 1):\n        if my_list[i] > my_list[i + 1]:\n            return False\n    return True\n[/PYTHON]</s>", "127": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named \"intersection\" that determines if the length of the intersection of two given intervals is a prime number. Each interval is a pair of integers, representing the start and end points. If the length of this intersection is prime, return \"YES\", otherwise return \"NO\". If there is no intersection, also return \"NO\".\n```\n[/INST]  [PYTHON]\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    else:\n        length = end1 - start1 if end1 - start1 > end2 - start2 else end2 - start2\n        if length == 0:\n            return \"NO\"\n        if length == 1:\n            return \"YES\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n[/PYTHON]</s>", "128": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'prod_signs' that computes the sum of magnitudes of integers from a given array, and multiplies this sum by the product of signs of each number in the array. The sign of each number is represented by 1 for positive numbers, -1 for negative numbers, and 0 for zeros. The function should return None for an empty array.\n```\n[/INST]  [PYTHON]\ndef prod_signs(arr):\n    if not arr:\n        return None\n    sum_abs = sum(abs(x) for x in arr)\n    prod_sign = 1 if all(x >= 0 for x in arr) else -1 if all(x < 0 for x in arr) else 0\n    return sum_abs * prod_sign\n[/PYTHON]</s>", "129": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'minPath' that receives a square grid and an integer k as inputs. The function should determine a path of length k through the grid that is lexicographically minimal. The grid is an N x N matrix where each cell's value is unique and falls within the inclusive range from 1 to N*N. The path can move to any directly adjacent cell but must remain within the grid boundaries.\n```\n[/INST]  [PYTHON]\ndef minPath(grid, k):\n    # Initialize the minimum path length to infinity\n    min_path_len = float('inf')\n    # Initialize the minimum path as an empty list\n    min_path = []\n    # Loop through each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # If the cell is not blocked and the path length is less than or equal to k\n            if grid[i][j] != 0 and len(min_path) + 1 <= k:\n                # Add the cell to the path\n                min_path.append((i, j))\n                # If the path length is equal to k, return the path\n                if len(min_path) == k:\n                    return min_path\n                # Recursively search the remaining grid\n                result = minPath(grid, k - len(min_path))\n                # If a shorter path is found, update the minimum path and length\n                if len(result) < min_path_len:\n                    min_path = result\n                    min_path_len = len(result)\n    # Return the minimum path\n    return min_path\n[/PYTHON]</s>", "130": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'tri' which generates a list containing the first n + 1 numbers of a special sequence known as the Tribonacci sequence. This sequence starts with tri(0) = 1 and tri(1) = 3. For subsequent values, if n is even, the sequence value is defined by 1 plus half of n. If n is odd, the sequence value is the sum of the last two sequence values, plus 1 plus half of the next integer (n+1).\n```\n[/INST]  [PYTHON]\ndef tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                seq.append(1 + seq[i-1] / 2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + 1 + seq[i-1] / 2)\n        return seq\n[/PYTHON]</s>", "131": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'digits' which calculates the product of the odd digits of a given positive integer n. If there are no odd digits, the function should return 0.\n```\n[/INST]  [PYTHON]\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product\n[/PYTHON]</s>", "132": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_nested' that takes a string containing only square brackets as input. The function should determine if there exists any valid bracket subsequence within this string that includes at least one instance of nested brackets, and return True if such a subsequence exists, otherwise return False.\n```\n[/INST]  [PYTHON]\ndef is_nested(s):\n    stack = []\n    for char in s:\n        if char == \"[\" and not stack:\n            stack.append(char)\n        elif char == \"]\" and stack and stack[-1] == \"[\":\n            stack.pop()\n        elif char == \"]\" and stack:\n            stack.append(char)\n    return bool(stack)\n[/PYTHON]</s>", "133": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sum_squares' that calculates the sum of the squares of numbers in a given list. Before squaring, each number should be rounded up to the nearest integer.\n```\n[/INST]  [PYTHON]\ndef sum_squares(numbers):\n    return sum(x**2 for x in map(int, numbers))\n[/PYTHON]</s>", "134": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'check_if_last_char_is_a_letter' which determines whether the last character of a given string is an alphabetical character that stands alone, not as part of a word. The function should return True if these conditions are met, and False otherwise.\n```\n[/INST]  [PYTHON]\ndef check_if_last_char_is_a_letter(s):\n    if s == \"\":\n        return False\n    last_char = s[-1]\n    if last_char.isalpha() and s.rfind(last_char) == len(s) - 1:\n        return True\n    else:\n        return False\n[/PYTHON]</s>", "135": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'can_arrange' that returns the largest index of an element in a given list which is not greater than or equal to the element immediately before it. If all elements comply with the condition of being greater than or equal to the previous one, the function should return -1.\n```\n[/INST]  [PYTHON]\ndef can_arrange(my_list):\n    for i in range(len(my_list) - 1, -1, -1):\n        if my_list[i] >= my_list[i - 1]:\n            return i\n    return -1\n[/PYTHON]</s>", "136": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'largest_smallest_integers' that returns a tuple consisting of two elements, where the first element is the largest negative integer in the input list, and the second element is the smallest positive integer. If there are no negative integers or no positive integers in the list, their respective values in the tuple should be None.\n```\n[/INST]  [PYTHON]\ndef largest_smallest_integers(my_list):\n    largest_negative = None\n    smallest_positive = None\n    for num in my_list:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return largest_negative, smallest_positive\n[/PYTHON]</s>", "137": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'compare_one' that takes two parameters and determines the larger of the two, returning it in its original variable type. The function should handle integers, floats, or strings representing numbers, where the string might use either a comma or a period as the decimal separator. If the two values are equal, the function should return None.\n```\n[/INST]  [PYTHON]\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\").replace(\" \", \"\")\n        b = b.replace(\",\", \".\").replace(\" \", \"\")\n        return a if float(a) > float(b) else b\n    else:\n        raise ValueError(\"Invalid input types\")\n[/PYTHON]</s>", "138": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'is_equal_to_sum_even' that determines if a given number 'n' can be expressed as the sum of exactly four positive even numbers.\n```\n[/INST]  [PYTHON]\ndef is_equal_to_sum_even(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = i + i + i + i\n            if sum == n:\n                return True\n    return False\n[/PYTHON]</s>", "139": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'special_factorial' which calculates the special factorial for a given integer. The special factorial is the product of the factorials from the given integer down to 1.\n```\n[/INST]  [PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 1, -1):\n        result *= i\n    return result\n[/PYTHON]</s>", "140": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'fix_spaces' that modifies a given string by replacing all spaces with underscores. If a string contains more than two consecutive spaces, these spaces should be replaced with a single dash.\n```\n[/INST]  [PYTHON]\ndef fix_spaces(my_string):\n    return my_string.replace(\"  \", \"-\").replace(\" \", \"_\")\n[/PYTHON]</s>", "141": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'file_name_check' that evaluates the validity of a file's name given specific criteria. The function returns 'Yes' if the file name meets all the conditions, and 'No' otherwise. The conditions are: the file name cannot have more than three digits, must contain exactly one dot, the part before the dot must start with a letter and cannot be empty, and the part after the dot must be one of the specified extensions: 'txt', 'exe', or 'dll'.\n```\n[/INST]  [PYTHON]\ndef file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if not file_name[0].isalpha():\n        return \"No\"\n    if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n[/PYTHON]</s>", "142": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sum_squares' that takes a list of integers and computes the sum of all entries where the integer is squared if its index is a multiple of 3, cubed if its index is a multiple of 4 but not 3, and unchanged otherwise. The function returns the total sum of these entries.\n```\n[/INST]  [PYTHON]\ndef sum_squares(my_list):\n    total = 0\n    for i, x in enumerate(my_list):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += x ** 3\n        else:\n            total += x\n    return total\n[/PYTHON]</s>", "143": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'words_in_sentence' which filters the words in a given sentence based on the length of the words being prime numbers, retaining the order of words as in the original sentence.\n```\n[/INST]  [PYTHON]\ndef words_in_sentence(sentence):\n    return [word for word in sentence.split() if is_prime(len(word))]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n[/PYTHON]</s>", "144": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'simplify' which determines if the product of two string-formatted fractions results in a whole number. Each fraction string is formatted as 'numerator/denominator'. Both numerators and denominators are positive whole numbers. The function should return True if the product is a whole number, and False otherwise.\n```\n[/INST]  [PYTHON]\ndef simplify(fraction1, fraction2):\n    numerator1, denominator1 = fraction1.split(\"/\")\n    numerator2, denominator2 = fraction2.split(\"/\")\n    result = int(numerator1) * int(numerator2)\n    if result % int(denominator1) == 0 and result % int(denominator2) == 0:\n        return True\n    else:\n        return False\n[/PYTHON]</s>", "145": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'order_by_points' which sorts a given list of integers in ascending order based on the sum of their digits. The list should retain the original order for elements with the same sum.\n```\n[/INST]  [PYTHON]\ndef order_by_points(my_list):\n    # Sort the list based on the sum of the digits\n    sorted_list = sorted(my_list, key=lambda x: sum(map(int, str(x))))\n\n    # Group the elements with the same sum together\n    grouped_list = []\n    current_sum = 0\n    for element in sorted_list:\n        if sum(map(int, str(element))) == current_sum:\n            grouped_list[-1].append(element)\n        else:\n            current_sum = sum(map(int, str(element)))\n            grouped_list.append([element])\n\n    # Flatten the list of lists\n    flattened_list = []\n    for sublist in grouped_list:\n        for element in sublist:\n            flattened_list.append(element)\n\n    return flattened_list\n[/PYTHON]</s>", "146": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'specialFilter' that takes an array of numbers as input. The function should return the count of numbers in the array that are greater than 10 and have both their first and last digits as odd numbers. The odd digits are defined as 1, 3, 5, 7, and 9.\n```\n[/INST]  [PYTHON]\ndef specialFilter(my_list):\n    count = 0\n    for num in my_list:\n        if num > 10 and (num % 1 != 0 and num % 1 != 0):\n            count += 1\n    return count\n[/PYTHON]</s>", "147": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'get_max_triples' which computes the number of valid triples from an integer array 'a' of length 'n', where each element 'a[i]' is computed as 'i * i - i + 1' for each index 'i' starting from 1 to 'n'. The function returns the number of triples '(a[i], a[j], a[k])' such that 'i < j < k' and the sum of these triples is a multiple of 3.\n```\n[/INST]  [PYTHON]\ndef get_max_triples(a, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n[/PYTHON]</s>", "148": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'bf' that accepts two parameters, planet1 and planet2, representing the names of planets. The function should return a tuple of planet names that are located between the two given planets, ordered by their proximity to the Sun. If either planet name is not recognized, the function should return an empty tuple.\n```\n[/INST]  [PYTHON]\ndef bf(planet1, planet2):\n    # Implement your solution here\n    return ()\n[/PYTHON]</s>", "149": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'sorted_list_sum' that accepts a list of strings, removes those with odd lengths, and returns a list sorted by increasing length. If two strings have the same length, they should be sorted alphabetically.\n```\n[/INST]  [PYTHON]\ndef sorted_list_sum(my_list):\n    return sorted([word for word in my_list if len(word) % 2 == 0], key=lambda x: (len(x), x))\n[/PYTHON]</s>", "150": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'x_or_y' that determines if a number 'n' is prime, and based on that, returns 'x' if 'n' is prime, or 'y' if 'n' is not prime.\n```\n[/INST]  [PYTHON]\ndef x_or_y(n):\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return 'y'\n        return 'x'\n    else:\n        return 'y'\n[/PYTHON]</s>", "151": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'double_the_difference' that calculates the sum of the squares of numbers in a list that are odd, non-negative, and integers. The function should return 0 for an empty list.\n```\n[/INST]  [PYTHON]\ndef double_the_difference(my_list):\n    if not my_list:\n        return 0\n    odd_squares = [x**2 for x in my_list if x % 2 != 0 and x >= 0 and x % 1 == 0]\n    return sum(odd_squares)\n[/PYTHON]</s>", "152": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'compare' which determines how accurate a person's guesses are regarding the results of matches. The function should utilize two lists, one representing the actual results and the other representing the guesses. The output should be a list of the same size showing the absolute differences between the actual results and the guesses, where a correct guess is represented by a value of 0.\n```\n[/INST]  [PYTHON]\ndef compare(actual, guess):\n    return [abs(actual[i] - guess[i]) for i in range(len(actual))]\n[/PYTHON]</s>", "153": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'Strongest_Extension' that takes a class name and a list of extensions. Determine the strength of each extension where strength is the number of uppercase letters minus the number of lowercase letters. Return the extension with the highest strength prepended by the class name and a period. If multiple extensions have the same maximum strength, return the first one in the list.\n```\n[/INST]  [PYTHON]\ndef Strongest_Extension(class_name, extensions):\n    strengths = [(e.lower().count('a') - e.upper().count('A')) for e in extensions]\n    max_strength = max(strengths)\n    best_extension = extensions[strengths.index(max_strength)]\n    return f\"{class_name}.{best_extension}\"\n[/PYTHON]</s>", "154": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'cycpattern_check' that checks if the second word or any of its rotations is a substring of the first word.\n```\n[/INST]  [PYTHON]\ndef cycpattern_check(word1, word2):\n    return word2 in (word1 + word1)[1:]\n[/PYTHON]</s>", "155": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'even_odd_count' that accepts an integer and returns a tuple containing counts of even and odd digits in that integer.\n```\n[/INST]  [PYTHON]\ndef even_odd_count(n):\n    count_even = 0\n    count_odd = 0\n    while n > 0:\n        if n % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        n //= 10\n    return count_even, count_odd\n[/PYTHON]</s>", "156": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'int_to_mini_roman' that converts a given positive integer to its Roman numeral equivalent, outputting it as a lowercase string. The function should handle numbers from 1 to 1000.\n```\n[/INST]  [PYTHON]\ndef int_to_mini_roman(n):\n    num_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xci',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    for i in range(1, n+1):\n        result += num_dict[i]\n    return result\n[/PYTHON]</s>", "157": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'right_angle_triangle' which determines if three given side lengths can form a right-angled triangle. The function should return True if one angle is a right angle (90 degrees), and False otherwise.\n```\n[/INST]  [PYTHON]\ndef right_angle_triangle(side1, side2, side3):\n    if side1**2 + side2**2 == side3**2:\n        return True\n    else:\n        return False\n[/PYTHON]</s>", "158": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'find_max' that accepts a list of strings, each representing a word, and returns the word with the highest number of unique characters. In cases where multiple words have the same maximum number of unique characters, return the word that appears first lexicographically.\n```\n[/INST]  [PYTHON]\ndef find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_unique_chars = max(unique_chars.values())\n    max_words = [word for word in words if unique_chars[word] == max_unique_chars]\n    return sorted(max_words)[0]\n[/PYTHON]</s>", "159": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'eat' which takes three integers representing the number of carrots eaten so far, the number of additional carrots needed, and the number of carrots remaining. The function should return a list where the first element is the total number of carrots eaten after attempting to satisfy the additional need, and the second element is the number of carrots left. If the carrots remaining are insufficient to meet the need, all remaining carrots are eaten but the need may not be fully satisfied.\n```\n[/INST]  [PYTHON]\ndef eat(carrots_eaten, carrots_needed, carrots_remaining):\n    total_carrots_eaten = carrots_eaten + carrots_needed\n    if carrots_remaining >= carrots_needed:\n        carrots_eaten = total_carrots_eaten\n        carrots_remaining = carrots_remaining - carrots_needed\n    else:\n        carrots_eaten = total_carrots_eaten - carrots_remaining\n        carrots_remaining = 0\n    return [carrots_eaten, carrots_remaining]\n[/PYTHON]</s>", "160": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'do_algebra' which constructs an algebraic expression from two lists, one containing operators and the other containing operands. Evaluate this expression and return the result. The operators include basic mathematical operations such as addition, subtraction, multiplication, floor division, and exponentiation.\n```\n[/INST]  [PYTHON]\ndef do_algebra(operators, operands):\n    expression = \"\".join([str(op) + str(opd) for op, opd in zip(operators, operands)])\n    return eval(expression)\n[/PYTHON]</s>", "161": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'solve' that modifies a given string based on specific conditions related to its characters. If a character in the string is a letter, the function should change its case from uppercase to lowercase or vice versa. If the character is not a letter, it should remain unchanged. Furthermore, if the string contains no letters at all, the function should return the string reversed.\n```\n[/INST]  [PYTHON]\ndef solve(s):\n    # Check if the string contains any letters\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    # Modify the string based on the conditions\n    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)\n[/PYTHON]</s>", "162": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'string_to_md5' that takes a string 'text' and returns its md5 hash equivalent. If 'text' is an empty string, the function should return None.\n```\n[/INST]  [PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n[/PYTHON]</s>", "163": "<s> [INST]Your task is to write a Python function to solve a programming problem.\nThe Python code must be between [PYTHON] and [/PYTHON] tags. Only return the function. You are prohibited from adding any natural language explanation or assertion to your response.\n\nProblem: \n```\nWrite a function named 'generate_integers' that takes two positive integers, 'a' and 'b', and returns a list of even integers between 'a' and 'b' (inclusive) in ascending order. The function should handle cases where 'a' can be greater than 'b' and should only consider numbers up to 10 excluded.\n```\n[/INST]  [PYTHON]\ndef generate_integers(a, b):\n    if a > b:\n        return []\n    return [x for x in range(a, b+1, 2) if x <= 10]\n[/PYTHON]</s>"}