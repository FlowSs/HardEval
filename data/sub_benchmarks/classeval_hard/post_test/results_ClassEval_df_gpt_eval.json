{
    "0": {
        "level 1": [
            [
                "def trans_two_ordinal(self, s):\n        if 1 <= int(s) <= 3:\n            return self.ORDINAL[int(s)]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + (\"-\" + self.NUMBER[int(s[1])]).lower() if s[1] != \"0\" else self.NUMBER_TEN[int(s[0])-1].lower()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    \n    if s == \"11\":\n        return \"ELEVENTH\"\n    elif s == \"12\":\n        return \"TWELFTH\"\n    elif s == \"13\":\n        return \"THIRTEENTH\"\n    else:\n        return self.NUMBER[int(s[0])] + \" \" + self.NUMBER_TEN[int(s[1]) - 1]\n    \n    ",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) != 2:\n            return \"\"\n        elif s == \"00\":\n            return \"\"\n        elif s[0] == \"0\":\n            return self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.NUMBER[int(s[1])]).lower()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) == 0:\n            return \"\"\n        if int(s) < 20:\n            return self.NUMBER_TEEN[int(s)%10]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + \"-\" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if int(s) < 20:\n        return self.NUMBER_TEEN[int(s[1])] if int(s[0]) == 1 else self.ORDINAL[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    elif s[1] == \"1\":\n        return self.NUMBER_TEN[int(s[0]) - 1]\n    elif s[1] == \"2\":\n        return self.NUMBER[int(s[0])] + \" \" + self.ORDINAL[1].lower()\n    elif s[1] == \"3\":\n        return self.NUMBER[int(s[0])] + \" \" + self.ORDINAL[2].lower()\n    else:\n        return self.NUMBER[int(s[0])] + \" \" + self.ORDINAL[0].lower() + \"-\" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if len(s) == 2:\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s == \"00\":\n            return \"\"\n        elif s == \"01\":\n            return self.ORDINAL[1]\n        elif s == \"02\":\n            return self.ORDINAL[2]\n        else:\n            return self.trans_three(s)",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s == \"01\":\n            return \"FIRST\"\n        elif s == \"02\":\n            return \"SECOND\"\n        elif s == \"03\":\n            return \"THIRD\"\n        else:\n            tens_digit = int(s[0])\n            ones_digit = int(s[1])\n            if tens_digit == 0:\n                return self.NUMBER[ones_digit]\n            elif tens_digit == 1:\n                return self.NUMBER_TEEN[ones_digit]\n            else:\n                return self.NUMBER_TEN[tens_digit - 1] + \" \" + self.NUMBER[ones_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s.startswith('0'):\n            return self.trans_three(s)\n        elif s.startswith('1'):\n            return self.NUMBER_TEEN[int(s) % 10]\n        else:\n            first_digit = int(s[0])\n            second_digit = int(s[1])\n            if first_digit <= 3:\n                return self.ORDINAL[first_digit] + \" \" + self.NUMBER_TEN[second_digit - 1].lower()\n            else:\n                return self.trans_three(s)\n\n",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) < 20:\n            return self.NUMBER_TEEN[int(s)-10] if int(s) >= 10 else self.ORDINAL[int(s)]\n        else:\n            return f\"{self.NUMBER_TEN[int(s[0])-1]}-{self.ORDINAL[int(s[1])]}\" if s[1] != \"0\" else self.NUMBER_TEN[int(s[0])-1]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) == 2:\n            tens = int(s[0])\n            units = int(s[1])\n            if tens == 1:\n                return self.NUMBER_TEEN[units]\n            elif tens == 0:\n                return self.NUMBER[units]\n            else:\n                if units == 0:\n                    return self.NUMBER_TEN[tens - 1]\n                else:\n                    if tens == 2:\n                        return \"TWENTY-\" + self.NUMBER[units].lower()\n                    elif tens == 3:\n                        return \"THIRTY-\" + self.NUMBER[units].lower()\n                    else:\n                        return self.NUMBER_TEN[tens - 1] + \"-\" + self.NUMBER[units].lower()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return self.ORDINAL[int(s)]\n        tens_digit = int(s[0])\n        unit_digit = int(s[1])\n        \n        if tens_digit == 0:\n            return self.ORDINAL[unit_digit]\n        if tens_digit == 1:\n            return self.NUMBER_TEEN[unit_digit]\n        if unit_digit == 0:\n            return self.NUMBER_TEN[tens_digit - 1]\n        return self.NUMBER_TEN[tens_digit - 1] + \" \" + self.ORDINAL[unit_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0])-1]\n            elif int(s[0]) > 3:\n                return self.NUMBER[int(s[0])] + ' ' + self.NUMBER[int(s[1])]\n            else:\n                return self.ORDINAL[int(s[0])] + '-' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) == 1:\n            return self.ORDINAL[int(s)]\n        else:\n            if s[0] == '1':\n                return self.NUMBER_TEEN[int(s[1])]\n            elif s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return f\"{self.NUMBER[int(s[0])]}-{self.ORDINAL[int(s[1])]}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s)%10]\n    elif s[0] == \"0\":\n        return self.NUMBER[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if int(s) < 20:\n        return self.NUMBER_TEEN[int(s) - 10]\n    else:\n        num_1 = int(s[0])\n        num_2 = int(s[1])\n        if num_2 == 0:\n            return self.NUMBER_TEN[num_1 - 1]\n        if num_1 == 1:\n            return self.NUMBER_TEEN[num_2]\n        if num_2 == 1:\n            return self.NUMBER[num_1] + \"ST\"\n        elif num_2 == 2:\n            return self.NUMBER[num_1] + \"ND\"\n        elif num_2 == 3:\n            return self.NUMBER[num_1] + \"RD\"\n        else:\n            return self.NUMBER[num_1] + \"TH\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) < 20:\n            return self.NUMBER_TEEN[int(s[1])] if s[0] == '1' else self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) < 10:\n            return self.NUMBER[int(s)]\n        elif int(s) < 20:\n            return self.NUMBER_TEEN[int(s) - 10]\n        else:\n            first_digit = int(s[0])\n            second_digit = int(s[1])\n            return self.NUMBER_TEN[first_digit - 1] + (\"-\" + self.NUMBER[second_digit] if second_digit != 0 else \"\")",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) < 10:\n            return self.NUMBER[int(s)]\n        elif int(s) < 20:\n            return self.NUMBER_TEEN[int(s) - 10]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) != 2:\n            return \"Invalid input\"\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) == 2:\n            if int(s) < 10:\n                return self.NUMBER[int(s)]\n            elif int(s) < 20:\n                return self.NUMBER_TEEN[int(s) - 10]\n            else:\n                first_digit = int(s[0])\n                second_digit = int(s[1])\n                if second_digit == 0:\n                    return self.NUMBER_TEN[first_digit - 1]\n                else:\n                    return self.NUMBER_TEN[first_digit - 1] + \"-\" + self.NUMBER[second_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s.startswith(\"0\"):\n            s = s[1:]\n            \n        if s == \"00\":\n            return \"\"\n        \n        if s in [\"10\", \"11\", \"12\", \"13\"]:\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            if int(s) <= 3:\n                return self.ORDINAL[int(s)]\n            else:\n                return self.NUMBER[int(s[0])] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    \n    if len(s) > 1:\n        if s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.NUMBER[int(s[1])]\n    elif len(s) == 1:\n        return self.NUMBER[int(s)]\n    \n    ",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    tens_digit = int(s[0])\n    ones_digit = int(s[1])\n    \n    if tens_digit == 1:\n        return self.NUMBER_TEEN[ones_digit]\n    elif tens_digit in [2, 3]:\n        return self.ORDINAL[tens_digit] + \" \" + self.NUMBER[ones_digit].lower()\n    else:\n        return self.NUMBER_TEN[tens_digit - 1] + \" \" + self.NUMBER[ones_digit].lower() if ones_digit != 0 else self.NUMBER_TEN[tens_digit - 1]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == \"1\":\n            return self.ORDINAL[int(s[1])]\n        elif s[0] == \"2\":\n            return \"TWENTY-\" + self.ORDINAL[int(s[1])]\n        elif s[0] == \"3\":\n            return \"THIRTY-\" + self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    \n    if len(s) == 1:\n        return self.ORDINAL[int(s)]\n    if s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    if s[1] == \"0\":\n        return self.NUMBER_TEN[int(s[0]) - 1]\n    return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]\n    \n    ",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[-1])]\n        elif s[0] == '0':\n            return self.NUMBER[int(s[-1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[-1])]",
                false
            ]
        ],
        "level 2": [
            [
                "def trans_two_ordinal(self, s):\n    if int(s) < 20:\n        return self.NUMBER_TEEN[int(s) % 10 - 1] if int(s) < 4 else self.NUMBER[int(s) % 10] + \"TH\"\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    tens = int(s[0])\n    units = int(s[1])\n\n    if tens != 1:\n        return f\"{self.NUMBER_TEN[tens - 1]}-{self.NUMBER[units].lower()}\"\n\n    if units <= 3:\n        return self.ORDINAL[units].lower()\n\n    return f\"{self.NUMBER_TEEN[units].lower()}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if len(s) == 1:\n        s = '0' + s\n    tens_digit = int(s[0])\n    unit_digit = int(s[1])\n    if tens_digit == 1:\n        return self.NUMBER_TEEN[unit_digit].lower()\n    elif tens_digit == 0:\n        return self.NUMBER[unit_digit].lower()\n    else:\n        if unit_digit == 0:\n            return self.NUMBER_TEN[tens_digit - 1].lower()\n        else:\n            return self.NUMBER_TEN[tens_digit - 1].lower() + ' ' + self.NUMBER[unit_digit].lower()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if int(s) < 20:\n            return self.NUMBER_TEEN[int(s) - 10] if int(s) > 9 else self.ORDINAL[int(s)]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.ORDINAL[int(s[1])]) if int(s[1]) > 0 else self.NUMBER_TEN[int(s[0]) - 1]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    \n    ten_digit = int(s[0])\n    unit_digit = int(s[1])\n    \n    if int(s) < 20:\n        return self.NUMBER_TEEN[int(s)]\n    else:\n        if unit_digit != 0:\n            return self.NUMBER_TEN[ten_digit - 1] + \"-\" + self.NUMBER[unit_digit]\n        else:\n            return self.NUMBER_TEN[ten_digit - 1]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        tens = int(s[0])\n        ones = int(s[1])\n        if tens == 1:\n            return self.NUMBER_TEEN[ones]\n        else:\n            if ones in [1, 2, 3]:\n                return self.NUMBER[self.tens] + \" \" + self.ORDINAL[ones]\n            else:\n                return self.NUMBER_TEN[tens - 1] + \" \" + self.NUMBER[ones]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        tens = int(s[0])\n        ones = int(s[1])\n        if tens == 0:\n            return self.NUMBER[ones]\n        elif tens == 1:\n            return self.NUMBER_TEEN[ones]\n        else:\n            if ones == 0:\n                return self.NUMBER_TEN[tens - 1]\n            elif ones <= 3:\n                return self.ORDINAL[ones] + \" \" + self.NUMBER_TEN[tens - 1]\n            else:\n                return self.NUMBER_TEN[tens - 1] + \" \" + self.NUMBER[ones]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s == '00':\n        return ''\n    if s[0] == '0':\n        return self.NUMBER[int(s[1])]\n    if s == '11' or s == '12' or s == '13':\n        return self.NUMBER_TEEN[int(s[1])]\n    if s[1] == '1':\n        return self.NUMBER_TEN[int(s[0]) - 1]\n    if s[1] in ['2', '3']:\n        return self.NUMBER[int(s[1])] + 'TH'\n    return self.NUMBER[int(s[1])] + 'TH'",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    tens = int(s[0])\n    ones = int(s[1])\n\n    if tens == 0:\n        return self.NUMBER[ones]\n    elif tens == 1:\n        return self.NUMBER_TEEN[ones]\n    else:\n        if ones == 0:\n            return self.NUMBER_TEN[tens - 1]\n        elif ones == 1:\n            return self.ORDINAL[ones] + \" \" + self.NUMBER_TEN[tens - 1]\n        elif ones in [2, 3]:\n            return self.ORDINAL[ones] + \" \" + self.NUMBER_TEN[tens - 1]\n        else:\n            return self.NUMBER_TEN[tens - 1] + \" \" + self.NUMBER[ones]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        tens = int(s[0])\n        ones = int(s[1])\n\n        if tens == 0:\n            return self.NUMBER[ones]\n        elif tens == 1:\n            return self.NUMBER_TEEN[ones]\n        else:\n            if ones == 1:\n                return self.NUMBER_TEN[tens - 1]\n            elif ones == 0:\n                return self.NUMBER_TEN[tens - 1]\n            else:\n                return self.NUMBER_TEN[tens - 1] + \"-\" + self.NUMBER[ones]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            return self.ORDINAL[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + (' ' + self.ORDINAL[int(s[1])]).strip()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = str(s).zfill(2)\n    tens = int(s[0])\n    units = int(s[1])\n    if int(s) < 4:\n        return self.ORDINAL[int(s)]\n    else:\n        return f\"{self.NUMBER_TEN[tens - 1]} {self.NUMBER[units]}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        num = int(s)\n        if num == 0:\n            return \"\"\n        if num < 20:\n            return self.ORDINAL[num].lower()\n        else:\n            tens = num // 10\n            units = num % 10\n            if units == 0:\n                return self.NUMBER_TEN[tens - 1].lower()\n            else:\n                return self.NUMBER_TEN[tens - 1].lower() + \"-\" + self.NUMBER[units].lower()",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == \"0\":\n            return self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]\n\n",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.lstrip(\"0\")\n        if s == \"00\":\n            return \"\"\n        elif s[0] == \"0\":\n            return self.ORDINAL[int(s[1])]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.ORDINAL[int(s[1])]) if s[1] != \"0\" else self.NUMBER_TEN[int(s[0]) - 1]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if int(s) < 20:\n        return self.NUMBER_TEEN[int(s)]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) > 2:\n            return \"INVALID NUMBER\"\n        elif len(s) == 1:\n            return self.NUMBER[int(s)]\n        else:\n            if s[0] == '0':\n                return self.NUMBER[int(s[1])]\n            elif s[0] == '1':\n                return self.NUMBER_TEEN[int(s[1])]\n            else:\n                if s[1] == '0':\n                    return self.NUMBER_TEN[int(s[0]) - 1]\n                else:\n                    return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) != 2:\n            return \"\"\n        if s[0] == '0' and s[1] == '0':\n            return \"\"\n        if s[0] == '0':\n            return self.ORDINAL[int(s[1])]\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        if s[1] == '0':\n            return self.NUMBER_TEN[int(s[0])-1]\n        return self.NUMBER_TEN[int(s[0])-1] + \"-\" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if not s.isnumeric() or len(s) != 2:\n            return \"Invalid input\"\n        if int(s) < 0 or int(s) > 99:\n            return \"Out of range\"\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) != 2:\n            return \"\"\n        \n        ten_digit = int(s[0])\n        unit_digit = int(s[1])\n        \n        if ten_digit == 1:\n            return self.NUMBER_TEEN[unit_digit]\n        elif ten_digit > 1:\n            return self.NUMBER_TEN[ten_digit - 1] + \" \" + self.ORDINAL[unit_digit]\n        else:\n            return self.ORDINAL[unit_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if int(s) < 10:\n        return self.ORDINAL[int(s)]\n    elif int(s) < 20:\n        return self.NUMBER_TEEN[int(s)-10]\n    else:\n        if int(s[1]) == 0:\n            return self.NUMBER_TEN[int(s[0])-1]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] == '0':\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        return self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] == \"0\":\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0])-1]\n            else:\n                return \"-\".join([self.NUMBER_TEN[int(s[0])-1], self.NUMBER[int(s[1])])\n\n",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            result = self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            result = self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == \"0\":\n                result = self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                result = self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.NUMBER[int(s[1])]\n        if s in [\"01\", \"21\", \"31\"]:\n            result = self.ORDINAL[int(s[1])]\n        return result",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return f\"{self.NUMBER_TEN[int(s[0]) - 1]}-{self.NUMBER[int(s[1])].lower()}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            elif int(s[0]) < 4:\n                return self.ORDINAL[int(s[0])] + ' ' + self.NUMBER[int(s[1])]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if len(s) == 1:\n        s = \"0\" + s\n    \n    tens_digit = int(s[0])\n    units_digit = int(s[1])\n    \n    if tens_digit == 1:\n        return self.NUMBER_TEEN[units_digit]\n    else:\n        if units_digit == 0:\n            return self.NUMBER_TEN[tens_digit - 1]\n        elif units_digit <= 3:\n            return self.ORDINAL[units_digit] + \" \" + self.NUMBER_TEN[tens_digit - 1]\n        else:\n            return self.NUMBER_TEN[tens_digit - 1] + \" \" + self.NUMBER[units_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    if s.isdigit():\n        s = s.zfill(2)\n        if s == \"00\":\n            return \"\"\n        elif s[0] == \"0\":\n            return self.ORDINAL[int(s[1])]\n        elif s[1] == \"0\":\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[1] in [\"1\", \"2\", \"3\"]:\n            return self.NUMBER[int(s[1])] + \"TH\" if s[0] == \"3\" else self.NUMBER[int(s[1])] + \"ST\"\n        elif s[1] == \"2\":\n            return self.NUMBER[int(s[1])] + \"ND\"\n        elif s[1] == \"3\":\n            return self.NUMBER[int(s[1])] + \"RD\"\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]\n    else:\n        return \"Invalid input!\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        if len(s) == 1:\n            s = \"0\" + s\n        tens = int(s[0])\n        units = int(s[1])\n        if tens == 1:\n            if units < 4:\n                return self.ORDINAL[units]\n            else:\n                return self.NUMBER_TEN[tens - 1] + \" \" + self.NUMBER[units].lower()\n        else:\n            if units == 0:\n                return self.NUMBER_TEN[tens - 1]\n            else:\n                return self.NUMBER_TEN[tens - 1] + \"-\" + self.NUMBER[units].lower()",
                false
            ]
        ],
        "level 3": [
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            if 1 <= int(s[1]) <= 3:\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if 1 <= int(s[1]) <= 3:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        if int(s[1]) in range(1, 4):\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.ORDINAL[int(s[1])]) if int(s[1]) in range(1, 4) else (\"-\" + self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        if int(s[1]) in range(1, 4):\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif int(s) in range(10, 20):\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.ORDINAL[int(s[1])] if int(s[1]) in range(1, 4) else \" \" + self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    first_digit = int(s[0])\n    second_digit = int(s[1])\n\n    if first_digit == 0:\n        if 1 <= second_digit <= 3:\n            return self.ORDINAL[second_digit]\n        else:\n            return self.NUMBER[second_digit]\n    elif first_digit == 1:\n        return self.NUMBER_TEEN[second_digit]\n    else:\n        if 1 <= second_digit <= 3:\n            return self.NUMBER_TEN[first_digit-1] + \"-\" + self.ORDINAL[second_digit]\n        else:\n            return self.NUMBER_TEN[first_digit-1] + \"-\" + self.NUMBER[second_digit]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        return self.ORDINAL[int(s[1])] if int(s[1]) in range(1, 4) else self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return f\"{self.NUMBER_TEN[int(s[0]) - 1]}-{self.ORDINAL[int(s[1])]}\" if int(s[1]) in range(1, 4) else f\"{self.NUMBER_TEN[int(s[0]) - 1]}-{self.NUMBER[int(s[1])]}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s.startswith('0'):\n            if int(s[1]) in [1, 2, 3]:\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s.startswith('1'):\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            if 1 <= int(s[1]) <= 3:\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == \"0\":\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]\n\n",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            if s[1] in ['1', '2', '3']:\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            result = self.NUMBER_TEN[int(s[0]) - 1]\n            if s[1] != '0':\n                result += \" \" + self.NUMBER[int(s[1])]\n            return result",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            return self.ORDINAL[int(s[1])] if 1 <= int(s[1]) <= 3 else self.NUMBER[int(s[1])]\n        \n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0])-1] + ('-' + self.ORDINAL[int(s[1])] if 1 <= int(s[1]) <= 3 else ' ' + self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            if 1 <= int(s[1]) <= 3:\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])] if int(s[1]) in [1, 2, 3] else self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + ('-' + self.ORDINAL[int(s[1])].lower() if int(s[1]) in [1, 2, 3] else '-' + self.NUMBER[int(s[1)].lower()])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if int(s[1]) in [1, 2, 3]:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])] if int(s[1]) in [1, 2, 3] else self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if int(s[1]) in range(1, 4):\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if int(s[1]) in range(1, 4):\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if int(s[1]) in [1, 2, 3]:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if int(s[1]) in [1, 2, 3]:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if int(s[1]) in [1, 2, 3]:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif 10 <= int(s) <= 19:\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + (self.ORDINAL[int(s[1])] if int(s[1]) in [1, 2, 3] else self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s[0] == '0':\n            return self.ORDINAL[int(s[1])] if s[1] in ['1', '2', '3'] else self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + (self.ORDINAL[int(s[1])] if s[1] in ['1', '2', '3'] else self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if s[1] in ['1', '2', '3']:\n            return self.ORDINAL[int(s[1])]\n        return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] in ['1', '2', '3']:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \"-\" + self.ORDINAL[int(s[1])]\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0])-1] + \"-\" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] in ['1', '2', '3']:\n            return f\"{self.NUMBER_TEN[int(s[0]) - 1]}-{self.ORDINAL[int(s[1])].lower()}\"\n        else:\n            return f\"{self.NUMBER_TEN[int(s[0]) - 1]} {self.NUMBER[int(s[1])]}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n        s = s.zfill(2)\n        if s.startswith('0'):\n            if s.endswith('1') or s.endswith('2') or s.endswith('3'):\n                return self.ORDINAL[int(s[1])]\n            else:\n                return self.NUMBER[int(s[1])]\n        elif s.startswith('1'):\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + ('-' + self.ORDINAL[int(s[1])]) if s.endswith('1') or s.endswith('2') or s.endswith('3') else ('-' + self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if s[1] in ['1', '2', '3']:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        result = self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] in ['1', '2', '3']:\n            result += \"-\" + self.ORDINAL[int(s[1])]\n        else:\n            result += \" \" + self.NUMBER[int(s[1])]\n        return result",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        s = s[1]\n        if s in '123':\n            return self.ORDINAL[int(s)]\n        else:\n            return self.NUMBER[int(s)]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] in '123':\n            return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.ORDINAL[int(s[1)]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        result = self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] != '0' and int(s[1]) <= 3:\n            result += '-' + self.ORDINAL[int(s[1])]\n        else:\n            result += ' ' + self.NUMBER[int(s[1])]\n        return result",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if s[1] in ['1', '2', '3']:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        ordinal_str = self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] in ['1', '2', '3']:\n            ordinal_str += \"-\" + self.ORDINAL[int(s[1])]\n        else:\n            ordinal_str += \"-\" + self.NUMBER[int(s[1])]\n        return ordinal_str",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if s[1] in ['1', '2', '3']:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        result = self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] in ['1', '2', '3']:\n            result += '-' + self.ORDINAL[int(s[1])]\n        else:\n            result += ' ' + self.NUMBER[int(s[1])]\n        return result",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])] if int(s[1]) in [1, 2, 3] else self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + (self.ORDINAL[int(s[1])] if int(s[1]) in [1, 2, 3] else self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        if s[1] in ['1', '2', '3']:\n            return self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return f\"{self.NUMBER_TEN[int(s[0])-1]} {'first' if s[1] == '1' else 'second' if s[1] == '2' else 'third' if s[1] == '3' else self.NUMBER[int(s[1])]}\"",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] in ['1', '2', '3']:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + '-' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_ordinal(self, s):\n    s = s.zfill(2)\n    if s[0] == '0':\n        return self.ORDINAL[int(s[1])]\n    elif s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] in ['1', '2', '3']:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.ORDINAL[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ]
        ]
    },
    "1": {
        "level 1": [
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE'\n        else:\n            word_binary += 'ZERO'\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_str = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_str:\n        if digit == '0':\n            word_binary += 'ZERO '\n        else:\n            word_binary += 'ONE '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += \"ZERO \"\n        else:\n            word_binary += \"ONE \"\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += 'ZERO '\n        else:\n            word_binary += 'ONE '\n    return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += 'ZERO '\n        else:\n            word_binary += 'ONE '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += 'ZERO '\n        else:\n            word_binary += 'ONE '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += \"ZERO \"\n        else:\n            word_binary += \"ONE \"\n    return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += \"ONE\"\n        else:\n            word_binary += \"ZERO\"\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += \"ZERO \"\n        else:\n            word_binary += \"ONE \"\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += \"ONE \"\n        else:\n            word_binary += \"ZERO \"\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == \"1\":\n            word_binary += \"ONE \"\n        else:\n            word_binary += \"ZERO \"\n    return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = binary_num.replace('0', 'ZERO').replace('1', 'ONE')\n        return word_binary\n\n",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_str = bin(decimal_num)[2:]\n    word_binary = binary_str.replace('0', 'ZERO').replace('1', 'ONE')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n        return word_binary\n\n",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('0', 'ZERO').replace('1', 'ONE')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += \"ZERO \"\n        else:\n            word_binary += \"ONE \"\n    return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += \"ONE \"\n        else:\n            word_binary += \"ZERO \"\n    return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    \n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()\n    \n    ",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    \n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += 'ZERO '\n        else:\n            word_binary += 'ONE '\n    return word_binary.strip()\n    \n    ",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += \"ONE\"\n        else:\n            word_binary += \"ZERO\"\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_str = bin(decimal_num)[2:]\n    word_binary = binary_str.replace('0', 'ZERO').replace('1', 'ONE')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return word_binary",
                false
            ]
        ],
        "level 2": [
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(word_binary)",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_words = ['ZERO' if digit == '0' else 'ONE' for digit in binary_num]\n    return ' '.join(binary_words)",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_word = ''\n    for digit in binary_num:\n        if digit == '1':\n            binary_word += 'ONE '\n        else:\n            binary_word += 'ZERO '\n    return binary_word.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = \"\"\n    for digit in binary_num:\n        if digit == '0':\n            word_binary += \"ZERO \"\n        else:\n            word_binary += \"ONE \"\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n    return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = \"\"\n        for digit in binary_num:\n            if digit == '1':\n                word_binary += \"ONE \"\n            else:\n                word_binary += \"ZERO \"\n        return word_binary[:-1]",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n    return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ''\n        for digit in binary_num:\n            if digit == '1':\n                word_binary += 'ONE '\n            else:\n                word_binary += 'ZERO '\n        return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n    return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(word_binary)",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_words = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(binary_words)\n\n",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = \"{0:b}\".format(decimal_num)\n    word_binary = binary_num.replace(\"0\", \"ZERO\").replace(\"1\", \"ONE\")\n    return \" \".join(word_binary)",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_word = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(binary_word)",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_word = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(binary_word)",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ' '.join(['ZERO' if bit == '0' else 'ONE' for bit in binary_num])\n    return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = \"\"\n        for digit in binary_num:\n            if digit == '0':\n                word_binary += \"ZERO \"\n            else:\n                word_binary += \"ONE \"\n        return word_binary.strip()\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = \"{0:b}\".format(decimal_num)\n        word_binary = \"\"\n        for digit in binary_num:\n            if digit == \"1\":\n                word_binary += \"ONE \"\n            else:\n                word_binary += \"ZERO \"\n        return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = \" \".join([\"ONE\" if digit == '1' else \"ZERO\" for digit in binary_num])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = ''\n    for digit in binary_num:\n        if digit == '1':\n            word_binary += 'ONE '\n        else:\n            word_binary += 'ZERO '\n    return word_binary.strip()",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_words = ['ZERO' if digit == '0' else 'ONE' for digit in binary_num]\n    return ' '.join(binary_words)",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    word_binary = binary_num.replace('1', 'ONE').replace('0', 'ZERO')\n    return ' '.join(word_binary[i:i+3] for i in range(0, len(word_binary), 3))\n\n",
                false
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_num = bin(decimal_num)[2:]\n    binary_words = ['ONE' if digit == '1' else 'ZERO' for digit in binary_num]\n    return ' '.join(binary_words)",
                true
            ]
        ],
        "level 3": [
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        binary_words = ['ONE' if digit == '1' else 'ZERO' for digit in binary_str]\n        return ' '.join(binary_words)\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_str = bin(decimal_num)[2:]\n    word_binary = ['ONE' if digit == '1' else 'ZERO' for digit in binary_str]\n    return ' '.join(word_binary)",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        words = ['ONE' if bit == '1' else 'ZERO' for bit in binary_str]\n        return ' '.join(words)\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        binary_words = ['ONE' if digit == '1' else 'ZERO' for digit in binary_num]\n        return ' '.join(binary_words)\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        binary_words = ['ONE' if bit == '1' else 'ZERO' for bit in binary_num]\n        return ' '.join(binary_words)\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if char == '1' else 'ZERO' for char in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_string = bin(decimal_num)[2:]\n        binary_words = ['ONE' if bit == '1' else 'ZERO' for bit in binary_string]\n        return ' '.join(binary_words)",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n        return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n    binary_str = bin(decimal_num)[2:]\n    word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n    return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        binary_words = ['ONE' if bit == '1' else 'ZERO' for bit in binary_str]\n        return ' '.join(binary_words)\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if bit == '1' else 'ZERO' for bit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_list = ['ONE' if digit == '1' else 'ZERO' for digit in binary_str]\n        return ' '.join(word_list)",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])\n        return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary\n\n",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_str = bin(decimal_num)[2:]\n        word_binary = ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_str])\n        return word_binary",
                true
            ],
            [
                "def decimal_to_word_binary(decimal_num):\n        binary_num = bin(decimal_num)[2:]\n        return ' '.join(['ONE' if digit == '1' else 'ZERO' for digit in binary_num])",
                true
            ]
        ]
    },
    "2": {
        "level 1": [
            [
                "def text2int_with_minus(self, textnum):\n        if 'minus' in textnum:\n            negative = True\n            textnum = textnum.replace('minus', '')\n        else:\n            negative = False\n\n        result = self.text2int(textnum)  # Assuming text2int method handles positive numbers\n\n        if negative:\n            result = str(-1 * int(result))\n\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            words = textnum.split()\n            words.remove(\"minus\")\n            textnum = \" \".join(words)\n            return str(-self.text2int(textnum))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\").strip()\n            return str(self.text2int(textnum) * -1)\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    if \"minus\" in textnum:\n        negative = True\n        textnum = textnum.replace(\"minus\", \"\").strip()\n    else:\n        negative = False\n\n    result = self.text2int(textnum)\n\n    if negative:\n        result = -result\n\n    return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            negative = True\n            textnum = textnum.replace(\"minus\", \"\").strip()\n        else:\n            negative = False\n        \n        final_result = self.text2int(textnum)\n        \n        if negative:\n            final_result = \"-\" + final_result\n        \n        return final_result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.split()\n        if \"minus\" in words:\n            idx = words.index(\"minus\")\n            return -self.text2int(\" \".join(words[idx + 1:]))\n        else:\n            return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\").strip()\n            return str(-1 * self.text2int(textnum))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            number_words = textnum.split()[1:]\n            sign = -1\n        else:\n            number_words = textnum.split()\n            sign = 1\n\n        current = result = 0\n        for word in number_words:\n            if word not in self.numwords:\n                continue\n\n            scale, increment = self.numwords[word]\n\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n\n        return str(sign * (result + current))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num = 0\n        for word in words:\n            if word == 'minus':\n                num *= -1\n            elif word == 'and':\n                continue\n            else:\n                try:\n                    num += self.numwords[word][0] * self.numwords[word][1]\n                except KeyError:\n                    raise ValueError(\"Invalid input\")\n        return str(num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\")\n            return \"-\" + str(self.text2int(textnum))\n        else:\n            return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').split()\n        num = 0\n        minus_flag = -1 if 'minus' in words else 1\n        if minus_flag == -1:\n            words.remove('minus')\n\n        scale = 1\n        for word in reversed(words):\n            if word in self.scales:\n                scale = self.numwords[word][0]\n            else:\n                num += self.numwords[word][1] * scale\n                scale = 1\n        return str(num * minus_flag)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            negative = True\n            textnum = textnum.replace(\"minus\", \"\").strip()\n        else:\n            negative = False\n        \n        return str(self.text2int(textnum) * (-1 if negative else 1))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            negative, numtext = textnum.split(\"minus\")\n            return str(-1 * self.text2int(numtext))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            parts = textnum.split(\"minus\")\n            if len(parts) == 2:\n                return str(self.text2int(parts[0]) - self.text2int(parts[1]))\n        return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\")\n            return \"-\" + str(self.text2int(textnum))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.split()\n        num = 0\n        minus_flag = False\n\n        if \"minus\" in words:\n            minus_flag = True\n            words.remove(\"minus\")\n\n        if not self.is_valid_input(textnum):\n            return \"Invalid input\"\n\n        for word in words:\n            if word == \"and\":\n                continue\n            if word == \"hundred\":\n                num *= self.numwords[word][0]\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n\n        if minus_flag:\n            num = -num\n\n        return str(num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" minus \")\n        if \"minus\" in textnum:\n            negative = True\n            textnum = textnum.replace(\"minus\", \"\")\n        else:\n            negative = False\n        \n        if negative:\n            return \"-\" + str(self.text2int(textnum))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            negative = True\n            textnum = textnum.replace(\"minus\", \"\").strip()\n        else:\n            negative = False\n        return str(-self.text2int(textnum)) if negative else str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').split()\n        results = []\n        minus_flag = False\n\n        if words[0] == 'minus':\n            minus_flag = True\n            words = words[1:]\n\n        for word in words:\n            if word == 'and':\n                continue\n            if word == 'billion':\n                results.append(str(1000000000))\n            elif word == 'million':\n                results.append(str(1000000))\n            elif word == 'thousand':\n                results.append(str(1000))\n            else:\n                results.append(str(self.text2int(word)))\n        \n        final_result = 0\n        current_sum = 0\n\n        for word in results:\n            if word in ['1000000000', '1000000', '1000']:\n                final_result += current_sum * int(word)\n                current_sum = 0\n            else:\n                current_sum += int(word)\n        \n        final_result += current_sum\n\n        if minus_flag:\n            final_result = -final_result\n\n        return str(final_result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\").strip()\n            return str(-1 * self.text2int(textnum))\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.split('minus')\n        result = self.text2int(textnum[0])\n        if len(textnum) > 1:\n            result = str(-int(result))\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').replace(',', ' ').split()\n        current = result = 0\n        for word in words:\n            if word == 'minus':\n                result = -result\n            else:\n                if word not in self.numwords:\n                    raise ValueError(\"Illegal word: \" + word)\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"\").strip()\n            return str(-1 * self.text2int(textnum))\n        return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            return str(-self.text2int(textnum.replace(\"minus\", \"\").strip()))\n        else:\n            return str(self.text2int(textnum.strip()))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    words = textnum.replace('-', ' ').split()\n    if 'minus' in words:\n        idx = words.index('minus')\n        if idx == 0:\n            return '-' + self.text2int(' '.join(words[1:]))\n        else:\n            return self.text2int(' '.join(words[:idx])) + self.text2int(' '.join(words[idx + 1:]))\n    else:\n        return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    nums = []\n    for word in textnum.replace('-', ' ').replace(' and ', ' ').split():\n        if word in self.numwords:\n            scale, increment = self.numwords[word]\n            if scale == 1:\n                nums.append(increment)\n            else:\n                nums[-1] = nums[-1] * scale + increment\n    return str(-1 * sum(nums)) if 'minus' in textnum else str(sum(nums))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').split()\n        num = 0\n        if 'minus' in words:\n            index = words.index('minus')\n            num = -self.text2int(' '.join(words[index + 1:]))\n        else:\n            num = self.text2int(textnum)\n        return str(num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    if 'minus' in textnum:\n        parts = textnum.split('minus')\n        negative = True\n    else:\n        parts = [textnum]\n        negative = False\n\n    result = 0\n    for part in parts:\n        result += self.text2int(part)\n\n    if negative:\n        result *= -1\n\n    return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            negative = True\n            textnum = textnum.replace(\"minus\", \"\")\n        else:\n            negative = False\n        \n        textnum = textnum.strip()\n        \n        if textnum == \"\":\n            return \"zero\"\n        \n        return str(self.text2int(textnum) * (-1 if negative else 1))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').split()\n        result = 0\n        minus_flag = False\n        \n        if words[0] == 'minus':\n            minus_flag = True\n            words = words[1:]\n        \n        for word in words:\n            if word not in self.numwords:\n                raise ValueError(\"Invalid number word found: \" + word)\n        \n        current = 0\n        for word in words:\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n        \n        result += current\n        \n        if minus_flag:\n            result = -result\n        \n        return str(result)",
                false
            ]
        ],
        "level 2": [
            [
                "def text2int_with_minus(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    words = textnum.split()\n    current = result = 0\n    for word in words:\n        if word == 'minus':\n            result = -result\n        else:\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n    result += current\n    return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        minus = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n                continue\n            if word not in self.numwords:\n                continue\n\n            scale, increment = self.numwords[word]\n\n            if scale > 1:\n                current = max(1, current) * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                current += increment\n        \n        result += max(1, current)\n        if minus:\n            result *= -1\n        \n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        result = 0\n        current = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result -= current\n                current = 0\n            else:\n                try:\n                    n, value = self.numwords[word]\n                    current = current * n + value\n                except KeyError:\n                    result += current\n                    current = 0\n        result += current\n        if 'minus' in textnum:\n            result = -result\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        minus_flag = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus_flag = True\n                continue\n\n            if word not in self.numwords:\n                current = 0\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n\n        result += current\n\n        if minus_flag:\n            result *= -1\n\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ').strip()\n        current = result = 0\n        minus_flag = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus_flag = True\n                continue\n\n            num = self.numwords.get(word)\n            if num:\n                scale, increment = num\n                current = current * scale + increment\n            else:\n                if current:\n                    result += current\n                current = 0\n\n        result += current\n\n        if minus_flag:\n            result *= -1\n\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    nums = []\n    if 'minus' in textnum:\n        textnum = textnum.replace('minus', '')\n        neg = True\n    else:\n        neg = False\n\n    for word in textnum.replace('-', ' ').split():\n        if word not in self.numwords:\n            nums.append(word)\n            continue\n\n        scale, increment = self.numwords[word]\n        if scale > 1:\n            nums[-1] = int(nums[-1]) * scale + increment\n        else:\n            nums.append(increment)\n\n    total = sum(nums)\n\n    return str(-total) if neg else str(total)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        is_negative = False\n        if \"minus\" in textnum:\n            is_negative = True\n            textnum = textnum.replace(\"minus\", \"\")\n        textnum = textnum.replace(\"-\", \" \")\n        parts = textnum.split()\n        result = 0\n        for part in parts:\n            if part == \"and\":\n                continue\n            if part in self.numwords:\n                scale, increment = self.numwords[part]\n                result = result * scale + increment\n            else:\n                return \"Invalid input: {}\".format(part)\n        if is_negative:\n            result = -result\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ').split()\n        result = 0\n        term = 0\n        for word in textnum:\n            if word == 'minus':\n                result = -result\n            else:\n                num = self.numwords[word]\n                term = term * num[0] + num[1]\n                if num[0] >= 100:\n                    result += term\n                    term = 0\n        return str(result + term)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    words = textnum.replace('-', ' ').split()\n    if 'minus' in words:\n        idx = words.index('minus')\n        return str(-self.text2int(' '.join(words[idx + 1:])))\n    else:\n        return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ').strip().split() \n        numbers = []\n        negative = False\n        if 'minus' in textnum:\n            neg_idx = textnum.index('minus')\n            negative = True\n            textnum = textnum[neg_idx + 1:]\n        \n        for word in textnum:\n            if word == 'and':\n                continue\n            elif word == 'minus':\n                negative = not negative\n            elif word in self.numwords:\n                numbers.append(self.numwords[word][1])\n        \n        result = 0\n        for num in numbers:\n            if num == 0:\n                continue\n            if num == 100:\n                result *= num\n            else:\n                result += num\n        \n        if negative:\n            result = -result\n        \n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        sub_num = 0\n        for word in words:\n            if word == 'minus':\n                num = -num\n            else:\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    sub_num += scale * increment\n                    if scale > 100:\n                        num += sub_num\n                        sub_num = 0\n                    else:\n                        num += sub_num\n        return str(num + sub_num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    negative = False\n    if 'minus' in textnum:\n        textnum = textnum.replace('minus', '')\n        negative = True\n\n    textnum = textnum.replace('-', ' ')\n    current = result = 0\n    for word in textnum.split():\n        if word == \"and\":\n            continue\n        if word not in self.numwords:\n            return None\n        scale, increment = self.numwords[word]\n        current = current * scale + increment\n        if scale > 100:\n            result += current\n            current = 0\n\n    return str(-result) if negative else str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"-\")\n        return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    words = textnum.split()\n    number = 0\n    scale = 1\n    is_negative = False\n\n    for word in words:\n        if word == 'minus':\n            is_negative = True\n        else:\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                if scale > 1:\n                    number = number + scale * increment\n                else:\n                    number = number + increment\n            else:\n                return \"Invalid input\"\n\n    if is_negative:\n        return str(number * -1)\n    else:\n        return str(number)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        current = result = 0\n        minus = False\n\n        for word in words:\n            if word == 'minus':\n                minus = True\n            else:\n                if word not in self.numwords:\n                    raise ValueError(\"Illegal word: \" + word)\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n\n        if minus:\n            result = -result\n\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').split()\n        num = 0\n        for word in words:\n            if word == 'minus':\n                num *= -1\n            else:\n                if word not in self.numwords:\n                    return \"Invalid input\"\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n        return str(num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        idx = 0\n        result = ''\n        negative = False\n\n        if words[0] == 'minus':\n            negative = True\n            idx = 1\n\n        for word in words[idx:]:\n            if word == 'minus':\n                negative = True\n            elif word == 'and':\n                continue\n            else:\n                num = self.numwords[word][1]\n                if num != 0:\n                    result += str(num)\n                else:\n                    scales, increment = self.numwords[word]\n                    if scales == 1:\n                        result += str(increment)\n                    else:\n                        result = str(int(result) * scales)\n        if negative:\n            result = '-' + result\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        if 'minus' in textnum:\n            textnum = textnum.replace('minus', '-')\n        return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        number = 0\n        for word in words:\n            if word == 'minus':\n                number *= -1\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                number = number * scale + increment\n            else:\n                break\n        return str(number)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == 'minus':\n                num = -num\n            else:\n                try:\n                    inc = self.numwords[word]\n                    scale = inc[0]\n                    increment = inc[1]\n                    current = current * scale + increment\n                    if scale > 100:\n                        num += current\n                        current = 0\n                except KeyError:\n                    if word not in {'negative', 'and'}:\n                        num += current\n                        current = 0\n        return str(num + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        if 'minus' in words:\n            neg_index = words.index('minus')\n            return str(-self.text2int(' '.join(words[neg_index + 1:])))\n        return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        is_negative = False\n        if \"minus\" in textnum:\n            is_negative = True\n            textnum = textnum.replace(\"minus\", \"\")\n        textnum = textnum.replace(\"-\", \" \")\n        return str(-self.text2int(textnum)) if is_negative else str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        for word in words:\n            if word == 'minus':\n                num = -num\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n            else:\n                break\n        return str(num)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    words = textnum.split()\n    if words[0] == 'minus':\n        sign = -1\n        words = words[1:]\n    else:\n        sign = 1\n\n    total = 0\n    current = 0\n    for word in words:\n        if word not in self.numwords:\n            raise ValueError(\"Invalid input\")\n        scale, increment = self.numwords[word]\n        current = current * scale + increment\n        if scale > 100:\n            total += current\n            current = 0\n    return str(sign * (total + current))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        number = 0\n        scale = 1\n        minus_flag = False\n\n        if 'minus' in words:\n            minus_flag = True\n            words.remove('minus')\n\n        for word in words:\n            if word == 'and':\n                continue\n            if word == 'hundred':\n                scale = 100\n                continue\n            if word == 'thousand':\n                scale = 1000\n                continue\n            if word == 'million':\n                scale = 1000000\n                continue\n            if word == 'billion':\n                scale = 1000000000\n                continue\n            if word == 'trillion':\n                scale = 1000000000000\n                continue\n\n            num, scale_change = self.numwords[word]\n            scale *= scale_change\n            if scale == 1:\n                number += num\n            else:\n                number += num * scale\n\n        if minus_flag:\n            number *= -1\n\n        return str(number)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"-\", \" \")\n            words = textnum.split()\n            num = 0\n            for word in words:\n                if word == \"minus\":\n                    num = -num\n                else:\n                    num += self.text2int(word)\n            return str(num)\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        numbers = []\n        minus_flag = False\n        for word in words:\n            if word == 'minus':\n                minus_flag = True\n            else:\n                number = self.numwords.get(word)\n                if number:\n                    scale, increment = number\n                    if scale == 1:\n                        numbers.append(increment)\n                    else:\n                        numbers[-1] = numbers[-1] * scale + increment\n        result = sum(numbers)\n        if minus_flag:\n            result *= -1\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"-\")\n        return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        if \"minus\" in textnum:\n            textnum = textnum.replace(\"minus\", \"-\")\n        return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        num = 0\n        current = 0\n        neg_flag = False\n        \n        for word in textnum.split():\n            if word == 'minus':\n                neg_flag = True\n                continue\n            \n            if word not in self.numwords:\n                continue\n            \n            scale, increment = self.numwords[word]\n            \n            current = current * scale + increment\n            \n            if scale > 100:\n                num += current\n                current = 0\n        \n        if neg_flag:\n            num = -num\n        \n        return str(num)",
                false
            ]
        ],
        "level 3": [
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        minus_flag = False\n        for word in textnum.split():\n            if word == 'minus':\n                minus_flag = True\n                continue\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                if word not in self.numwords:\n                    if curstring:\n                        current += int(curstring)\n                        curstring = ''\n                    curstring += word + ' '\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        if curstring:\n            current += int(curstring)\n        if minus_flag:\n            result = '-' + str(current)\n        else:\n            result = str(current)\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        minus = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n                continue\n\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                        break\n\n                if word not in self.numwords:\n                    if current:\n                        curstring += str(current) + ' '\n                    curstring += word + ' '\n                    current = 0\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n\n        if current:\n            curstring += str(current) + ' '\n\n        if minus:\n            curstring = '-' + curstring[1:]\n\n        return curstring.strip()",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result = -result\n            elif word in self.ordinal_words:\n                current += self.ordinal_words[word]\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                if word not in self.numwords:\n                    if current:\n                        current_str = \"{0}\".format(current)\n                        current = 0\n                        if result:\n                            result = \"{0} {1}\".format(result, current_str)\n                        else:\n                            result = current_str\n                    result = \"{0} {1}\".format(result, word) if result else word\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        if current:\n            if result:\n                result = \"{0} {1}\".format(result, current)\n            else:\n                result = current\n        if 'minus' in result:\n            result = '-' + result.replace('minus', '')[1:]\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        minus_flag = False\n        \n        for word in textnum.split():\n            if word == 'minus':\n                minus_flag = True\n                continue\n            if word in self.ordinal_words:\n                current = self.ordinal_words[word]\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word[:-len(ending[0])] + ending[1]\n                if word not in self.numwords:\n                    if curstring:\n                        curstring += ' '\n                    curstring += word\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n        \n        if minus_flag:\n            curstring = '-' + curstring[1:]\n        \n        if curstring:\n            result += current\n        \n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result = -result\n            else:\n                if word in self.ordinal_words:\n                    val = self.ordinal_words[word]\n                    current += val\n                else:\n                    for ending, replacement in self.ordinal_endings:\n                        if word.endswith(ending):\n                            word = word.replace(ending, replacement)\n                    if word not in self.numwords:\n                        if current:\n                            current_str = str(current)\n                            result += int(current_str)\n                            current = 0\n                        result = int(str(result) + word)\n                    else:\n                        scale, increment = self.numwords[word]\n                        current = current * scale + increment\n        result += current\n        if 'minus' in textnum:\n            result = -result\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        minus_present = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus_present = True\n            elif word in self.ordinal_words:\n                current = self.ordinal_words[word]\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:len(word) - len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if current:\n                        current = int(current)\n                        if minus_present:\n                            current = -current\n                        result += current\n                        current = 0\n                    curstring += word\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n\n        if current:\n            current = int(current)\n            if minus_present:\n                current = -current\n            result += current\n\n        if minus_present:\n            return str(result)\n        else:\n            return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result *= -1\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n                if word.isdigit():\n                    result += int(word)\n                else:\n                    result = None\n        if current:\n            result += current\n        if result is None:\n            return None\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = 0\n        curstring = \"\"\n        minus = False\n\n        for word in textnum.split():\n            if word == \"minus\":\n                minus = True\n            else:\n                if word in self.ordinal_words:\n                    current += self.ordinal_words[word]\n                else:\n                    for ending in self.ordinal_endings:\n                        if word.endswith(ending[0]):\n                            word = word.replace(ending[0], ending[1])\n                    if word not in self.numwords:\n                        if current:\n                            curstring += str(current) + \" \"\n                            current = 0\n                        curstring += word + \" \"\n                    else:\n                        scale, increment = self.numwords[word]\n                        current = current * scale + increment\n\n        if current:\n            curstring += str(current)\n\n        if minus:\n            curstring = \"-\" + curstring.strip()\n\n        return curstring",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        minus = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n            elif word in self.ordinal_words:\n                current = self.ordinal_words[word]\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    curstring += word\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n\n        if minus:\n            result = str(result)\n            result = '-' + result\n\n        return curstring + str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        words = textnum.split()\n        current = result = 0\n        minus_flag = False\n\n        for word in words:\n            if word == \"minus\":\n                minus_flag = True\n                continue\n\n            if word in self.ordinal_words:\n                val = self.ordinal_words[word]\n                current += val\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = f\"{word[:-len(ending)]}{replacement}\"\n                        break\n                if word not in self.numwords:\n                    if current:\n                        result += current\n                        current = 0\n                    result = f\"{result} {word}\" if result else word\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        \n        if current:\n            result += current\n\n        if minus_flag:\n            result = f\"-{result}\"\n\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                if word not in self.numwords:\n                    result += current\n                    current = 0\n                    if word == \"minus\":\n                        result *= -1\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    current = result = 0\n    for word in textnum.split():\n        if word in self.ordinal_words:\n            scale, increment = 1, self.ordinal_words[word]\n            current += scale * increment\n            if scale > 100:\n                result += current\n                current = 0\n        else:\n            for ending, replacement in self.ordinal_endings:\n                if word.endswith(ending):\n                    word = word.replace(ending, replacement)\n            if word not in self.numwords:\n                if current:\n                    result += current\n                current = 0\n                if word == 'minus':\n                    result = -result\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n    return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                if word not in self.numwords:\n                    if current != 0:\n                        scale, increment = (1, current)\n                        current = 0\n                    else:\n                        result += int(word)\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n            if word == \"minus\":\n                result = -result\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = textnum\n        minus = False\n\n        for word in curstring.split():\n            if word == 'minus':\n                minus = True\n                continue\n\n            if word not in self.numwords:\n                curstring = curstring.replace(word, '')\n                if current:\n                    result += current\n                    current = 0\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n\n        if current:\n            result += current\n\n        if minus:\n            result = -result\n\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result -= current\n                current = 0\n            elif word in self.ordinal_words:\n                current += self.ordinal_words[word]\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                if word not in self.numwords:\n                    result += current\n                    current = 0\n                    result = result * 1000\n                    result += self.numwords[word][0] * self.numwords[word][1]\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        result += current\n        curstring = str(result)\n        if 'minus' in textnum:\n            curstring = '-' + curstring\n        return curstring",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = textnum\n        minus = False\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n            else:\n                if word in self.ordinal_words:\n                    scale, increment = (1, self.ordinal_words[word])\n                    current = current * scale + increment\n                else:\n                    for ending, replacement in self.ordinal_endings:\n                        if word.endswith(ending):\n                            word = f\"{word[:-len(ending)]}{replacement}\"\n                            break\n                    if word in self.numwords:\n                        scale, increment = self.numwords[word]\n                        current = current * scale + increment\n                    elif word.isdigit():\n                        current = int(word)\n                    else:\n                        curstring = str(current) if current else curstring\n                        curstring = f\"{curstring} {word} \"\n                        current = 0\n        if current:\n            result += current\n        result = str(result) if not minus else f\"-{result}\"\n        return result",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        for word in textnum.split():\n            if word == \"minus\":\n                result = -current\n                current = 0\n            elif word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                else:\n                    if current != 0:\n                        result += current\n                        current = 0\n                    result += int(word)\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result *= -1\n            elif word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                if word not in self.numwords:\n                    current = current + result\n                    result = 0\n                    break\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                result -= current\n                current = 0\n            else:\n                if word in self.ordinal_words:\n                    scale, increment = (1, self.ordinal_words[word])\n                    current += scale * increment\n                else:\n                    for ending in self.ordinal_endings:\n                        if word.endswith(ending[0]):\n                            word = word[:-len(ending[0])] + ending[1]\n                    if word in self.numwords:\n                        scale, increment = self.numwords[word]\n                        current = current * scale + increment\n                    elif word not in self.scales:\n                        result += current\n                        current = 0\n        result += current\n        if 'minus' in textnum:\n            result = -result\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'minus':\n                current = -current\n            elif word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current += scale * increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    try:\n                        current = int(word)\n                    except ValueError:\n                        pass\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        textnum = textnum.split()\n        \n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = f\"{word[:-len(ending[0])]}{ending[1]}\"\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                curstring += f\"{current} {word} \"\n\n        if current:\n            result += current\n\n        if 'minus' in textnum:\n            return '-' + str(result)\n\n        return str(result)",
                true
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = 0\n        curstring = ''\n        minus = False\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n            elif word in self.ordinal_words:\n                current += self.ordinal_words[word]\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                if word not in self.numwords:\n                    if curstring and curstring[-1].isdigit():\n                        curstring += str(current) + ' '\n                        current = 0\n                    curstring += word + ' '\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n\n        if curstring and curstring[-1].isdigit():\n            curstring += str(current)\n        else:\n            curstring += str(current) if current else 'zero'\n\n        if minus:\n            curstring = '-' + curstring\n\n        return curstring",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = 0\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                val = self.ordinal_words[word]\n                current += val\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                if word not in self.numwords:\n                    if current:\n                        current = str(current)\n                    curstring = curstring + ' ' + current if current else curstring + ' ' + word\n                    current = 0\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        if current:\n            current = str(current)\n        curstring = curstring + ' ' + current if current else curstring\n        if textnum.startswith('minus '):\n            curstring = '-' + curstring\n        return curstring.strip()",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        curstring = \"\"\n        textnum = textnum.split()\n        for word in textnum:\n            if word == \"minus\":\n                result = -result\n            elif word in self.ordinal_words:\n                current = self.ordinal_words[word]\n                if current > 9:\n                    result = result + current\n                    current = 0\n                else:\n                    current = current\n            else:\n                if word.endswith(self.ordinal_endings[0]):\n                    word = word.replace(self.ordinal_endings[0][0], self.ordinal_endings[0][1])\n                elif word.endswith(self.ordinal_endings[1][0]):\n                    word = word.replace(self.ordinal_endings[1][0], self.ordinal_endings[1][1])\n                if word not in self.numwords:\n                    if current:\n                        current = int(current)\n                        result = result + current\n                    curstring += word\n                    current = 0\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n        if current:\n            result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = f'{word[:-len(ending)]}{replacement}'\n                        break\n                if word not in self.numwords:\n                    if word == 'minus':\n                        result -= current\n                    else:\n                        current = f\"{current} {word}\"\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        minus = False\n\n        def process_current():\n            \"\"\"\n            Process the current word\n            \"\"\"\n            if curstring != \"\":\n                val, mag = self.numwords[curstring]\n                current += val * mag\n                if val >= 1000:\n                    result += current\n                    current = 0\n            return\n\n        for word in textnum.split():\n            if word == 'minus':\n                minus = True\n            else:\n                if word in self.ordinal_words:\n                    current += self.ordinal_words[word]\n                    if current >= 1000:\n                        result += current\n                        current = 0\n                    curstring = \"\"\n                else:\n                    for ending, replacement in self.ordinal_endings:\n                        if word.endswith(ending):\n                            word = word.replace(ending, replacement)\n                    if word in self.numwords:\n                        curstring += word\n                    else:\n                        process_current()\n                        curstring = word\n\n        process_current()\n        \n        if minus:\n            result = -result\n\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n    textnum = textnum.replace(\"-\", \" \")\n    current = result = 0\n    curstring = \"\"\n    minus = False\n    for word in textnum.split():\n        if word == \"minus\":\n            minus = True\n            continue\n        if word not in self.numwords:\n            if curstring:\n                curstring += \" \"\n            curstring += word\n        else:\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n    if curstring:\n        if result:\n            result += current\n        else:\n            result = current\n    if minus:\n        result = \"-\" + str(result)\n    return str(result)",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        curstring = \"\"\n        minus_exists = False\n        for word in textnum.split():\n            if word == \"minus\":\n                minus_exists = True\n                continue\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                else:\n                    curstring += \" \" + word if curstring else word\n        if current != 0:\n            result += current\n        if minus_exists:\n            result = -result\n        return str(result)",
                true
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        curstring = \"\"\n        current = 0\n        for word in textnum.split():\n            if word == \"minus\":\n                curstring = \"-\" + curstring\n            elif word in self.ordinal_words:\n                current += self.ordinal_words[word]\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word.replace(ending[0], ending[1])\n                        break\n                if current >= 1000:\n                    current = current * self.numwords['thousand'][0]\n            elif word not in self.numwords:\n                curstring += str(current) if current != 0 else \"\"\n                curstring += \" \" + word\n                current = 0\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n        curstring += str(current) if current != 0 else \"\"\n        return curstring",
                false
            ],
            [
                "def text2int_with_minus(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        idx = 0\n        tokens = textnum.strip().lower().split()\n        for word in tokens:\n            if word == 'minus':\n                curstring = \"-\" + curstring\n                continue\n\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                    onnumber = False\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    onnumber = True\n\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                true
            ]
        ]
    },
    "3": {
        "level 1": [
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return f\"MINUS {self.trans_two(s[1:])}\"\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if int(s) < 0:\n            return \"MINUS \" + self.trans_two(s[1:])\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if int(s) < 0:\n            return \"MINUS \" + self.trans_two(str(abs(int(s))))\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUS \" + self.trans_two(s[1:])\n        return self.trans_two(s)\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if '-' in s:\n            return \"MINUS \" + self.trans_two(s[1:])\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s.startswith('-'):\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if '-' in s:\n            return \"MINUS \" + self.trans_two_minus(s[1:])\n        return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return 'MINUS ' + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s.startswith(\"-\"):\n        return \"MINUS \" + self.trans_two(s[1:])\n    return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(s[1:])\n    return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if int(s) < 0:\n            return \"MINUS \" + self.trans_two(s[1])\n        else:\n            return self.trans_two(s)\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(s[1:])\n    return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(str(abs(int(s))))\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        num = int(s)\n        if num < 0:\n            return \"MINUS \" + self.trans_two(str(-num))\n        return self.trans_two(s)\n\n",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if int(s) < 0:\n        return \"MINUS \" + self.trans_two(s[1:])\n    else:\n        return self.trans_two(s)",
                false
            ]
        ],
        "level 2": [
            [
                "def trans_two_minus(self, s):\n    if s.startswith(\"-\"):\n        result = \"MINUS \"\n        s = s[1:]\n    else:\n        result = \"\"\n    \n    s = s.zfill(2)\n    if s[0] == \"1\":\n        result += self.NUMBER_TEEN[int(s[1])]\n    elif s[0] == \"0\":\n        result += self.NUMBER[int(s[1])]\n    else:\n        result += self.NUMBER_TEN[int(s[0]) - 1] + (\" \" + self.NUMBER[int(s[1])]).lower() if s[1] != \"0\" else \"\"\n    \n    return result",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s.startswith(\"-\"):\n        negative = True\n        s = s[1:]\n    else:\n        negative = False\n\n    s = s.zfill(2)\n    words = []\n\n    if s[0] == \"1\":\n        words.append(self.NUMBER_TEEN[int(s[1])])\n    else:\n        if s[0] != \"0\":\n            words.append(self.NUMBER_TEN[int(s[0]) - 1])\n        if s[1] != \"0\":\n            words.append(self.NUMBER[int(s[1])])\n\n    if negative:\n        return \"MINUS \" + \" \".join(words)\n    else:\n        return \" \".join(words)",
                true
            ],
            [
                "def trans_two_minus(self, s):\n    if s.startswith(\"-\"):\n        output = \"MINUS \"\n        s = s[1:]\n    else:\n        output = \"\"\n    \n    s = s.zfill(2)\n    \n    if s[0] == \"0\":\n        output += self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        output += self.NUMBER_TEEN[int(s[1])]\n    else:\n        output += self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] != \"0\":\n            output += \" \" + self.NUMBER[int(s[1])]\n    \n    return output",
                true
            ],
            [
                "def trans_two_minus(self, s):\n    if s.startswith(\"-\"):\n        output = \"MINUS \"\n        s = s[1:]\n    else:\n        output = \"\"\n    s = s.zfill(2)\n    if int(s) < 10:\n        output += self.NUMBER[int(s[1])]\n    elif int(s) < 20:\n        output += self.NUMBER_TEEN[int(s[1])]\n    else:\n        output += self.NUMBER_TEN[int(s[0]) - 1]\n        if s[1] != \"0\":\n            output += \" \" + self.NUMBER[int(s[1])]\n    return output",
                true
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == \"-\":\n        return \"MINUS \" + self.trans_two(s[1:].zfill(2))\n    else:\n        return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        negative = \"MINUS \"\n        s = s[1:]\n    else:\n        negative = \"\"\n\n    s = s.zfill(2)\n\n    if s[0] == '0':\n        return negative + self.trans_three(s[1])\n    elif s[0] == '1':\n        return negative + self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] == '0':\n            return negative + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return negative + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        negative = True\n        s = s[1:]\n    else:\n        negative = False\n    s = s.zfill(2)\n    digit_one = int(s[0])\n    digit_two = int(s[1])\n    if digit_one == 0 and digit_two == 0:\n        return \"ZERO\"\n    if digit_one == 0:\n        return self.NUMBER[digit_two].lower()\n    if digit_one == 1:\n        return self.NUMBER_TEEN[digit_two].lower()\n    if digit_two == 0:\n        return self.NUMBER_TEN[digit_one - 1].lower()\n    return f\"{self.NUMBER_TEN[digit_one - 1].lower()} {self.NUMBER[digit_two].lower()}\"",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            result = \"MINUS \"\n            s = s[1:]\n        else:\n            result = \"\"\n        s = s.zfill(2)\n        if s[0] == \"0\" and s[1] == \"0\":\n            return \"ZERO\"\n        elif s[0] == \"0\":\n            return result + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return result + self.NUMBER_TEEN[int(s[1])]\n        else:\n            if s[1] == \"0\":\n                return result + self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return result + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == \"-\":\n        sign = \"MINUS \"\n        s = s[1:]\n    else:\n        sign = \"\"\n\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        return sign + self.trans_three(s[1])\n    else:\n        return sign + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.trans_three(s[1])",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == \"-\":\n        negative = \"MINUS \"\n        s = s[1:]\n    else:\n        negative = \"\"\n\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        return negative + self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        return negative + self.NUMBER_TEEN[int(s[1])]\n    else:\n        if s[1] == \"0\":\n            return negative + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return negative + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                true
            ],
            [
                "def trans_two_minus(self, s):\n    s = s[1:].zfill(2)\n    if s[0] == '-':\n        return \"MINUS \" + self.NUMBER[int(s[1])]\n    else:\n        if s[0] == '1':\n            return self.NUMBER_TEEN[int(s[1])]\n        elif s[0] == '0':\n            return self.NUMBER[int(s[1])]\n        else:\n            if s[1] == '0':\n                return self.NUMBER_TEN[int(s[0]) - 1]\n            else:\n                return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return 'MINUS ' + self.trans_two(s[1:].zfill(2))\n    else:\n        return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:].zfill(2))\n    else:\n        return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two_minus(s[1:])\n    num = int(s)\n    ones = num % 10\n    tens = num // 10\n    if num < 10:\n        return self.NUMBER[ones]\n    elif num < 20:\n        return self.NUMBER_TEEN[num - 10]\n    else:\n        return self.NUMBER_TEN[tens - 1] + (\" \" + self.NUMBER[ones] if ones != 0 else \"\")",
                true
            ],
            [
                "def trans_two_minus(self, s):\n    is_negative = False\n    if s[0] == '-':\n        is_negative = True\n        s = s[1:]\n        \n    s = s.zfill(2)\n    if s == '00':\n        return \"ZERO\"\n    \n    ones = int(s[1])\n    tens = int(s[0])\n    \n    if is_negative:\n        result = \"MINUS \"\n    else:\n        result = \"\"\n    \n    if tens == 1:\n        result += self.NUMBER_TEEN[ones]\n    else:\n        result += self.NUMBER_TEN[tens - 1]\n        if ones > 0:\n            result += \" \" + self.NUMBER[ones]\n    \n    return result",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    s = s[1:] if s[0] == \"-\" else s\n    s = s.zfill(2)\n    ones_digit = int(s[1])\n    tens_digit = int(s[0])\n\n    if tens_digit == 0:\n        return self.NUMBER[ones_digit]\n    elif tens_digit == 1:\n        return self.NUMBER_TEEN[ones_digit]\n    else:\n        if ones_digit == 0:\n            return self.NUMBER_TEN[tens_digit - 1]\n        else:\n            return self.NUMBER_TEN[tens_digit - 1] + \" \" + self.NUMBER[ones_digit]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        return \"MINUS \" + self.trans_two(s[1:].zfill(2))\n    else:\n        return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s[0] == '-':\n        num_str = \"MINUS \" + self.trans_two(s[1:].zfill(2))\n    else:\n        num_str = self.trans_two(s.zfill(2))\n    return num_str",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        s = s[1:]  if s[0] == '-' else s\n        s = s.zfill(2)\n        if int(s) == 0:\n            return \"ZERO\"\n        \n        if int(s) < 10:\n            return self.NUMBER[int(s)]\n        elif int(s) < 20:\n            return self.NUMBER_TEEN[int(s[1])]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.NUMBER[int(s[1])]).lower() if s[1] != '0' else self.NUMBER_TEN[int(s[0]) - 1]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            prefix = \"MINUS \"\n            s = s[1:]\n        else:\n            prefix = \"\"\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return prefix + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return prefix + self.NUMBER_TEEN[int(s[1])]\n        else:\n            return prefix + self.NUMBER_TEN[int(s[0]) - 1] + (\" \" + self.NUMBER[int(s[1])]).lower() if s[1] != \"0\" else self.NUMBER_TEN[int(s[0]) - 1]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUSA \" + self.trans_two(s[1:].zfill(2))\n        else:\n            return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if int(s) < 0:\n            return \"MINUSA \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUSA \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUSA \" + self.trans_two(s[1:])\n        return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == \"-\":\n            return \"MINUSA \" + self.trans_two(s[1:].zfill(2))\n        else:\n            return self.trans_two(s.zfill(2))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    s = s[1:]\n    s = s.zfill(2)\n    return \"MINUS \" + (self.NUMBER[int(s[0])] + (\" \" + self.NUMBER_TEN[int(s[1])]) if int(s) >= 20 else (self.NUMBER_TEEN[int(s)]))",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    s = s[1:] if s.startswith(\"-\") else s\n    s = s.zfill(2)\n    if s[0] == \"0\":\n        return self.NUMBER[int(s[1])]\n    if s[0] == \"1\":\n        return self.NUMBER_TEEN[int(s[1])]\n    return self.NUMBER_TEN[int(s[0]) - 1] + (\"-\" + self.NUMBER[int(s[1])]) if s[1] != \"0\" else self.NUMBER_TEN[int(s[0]) - 1]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    s = s[1:] if s.startswith('-') else s.zfill(2)\n    if s[0] == '1':\n        return self.NUMBER_TEEN[int(s[1])]\n    else:\n        return self.NUMBER_TEN[int(s[0]) - 1] + ('' if s[1] == '0' else ' ' + self.NUMBER[int(s[1])])",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return 'MINUS ' + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            return \"MINUS \" + self.trans_two(s[1:])\n        else:\n            return self.trans_two(s)",
                false
            ]
        ],
        "level 3": [
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n        \n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s) - 10]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s) - 10]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if s.startswith('-') else s\n        s = s.zfill(2)\n\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s) - 10]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if s.startswith('-') else s\n        s = s.zfill(2)\n        \n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s) - 10]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[-1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s) - 10]\n        elif s[-1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == '-' else \"\"\n        s = s[1:] if s[0] == '-' else s\n        s = s.zfill(2)\n\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if s.startswith('-') else s\n        s = s.zfill(2)\n        \n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    c = \"MINUS\" if s.startswith(\"-\") else \"\"\n    s = s[1:] if s.startswith(\"-\") else s\n    s = s.zfill(2)\n    \n    if s[0] == \"0\":\n        return c + self.NUMBER[int(s[1])]\n    elif s[0] == \"1\":\n        return c + self.NUMBER_TEEN[int(s[1])]\n    elif s[1] == \"0\":\n        return c + self.NUMBER_TEN[int(s[0]) - 1]\n    else:\n        return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if s.startswith('-') else s\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        if s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        if s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0])-1]\n        return c + self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])] if int(s) != 0 else \"\"\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == '-' else \"\"\n        s = s.lstrip('-').zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == '-' else \"\"\n        s = s[1:] if s[0] == '-' else s\n        s = s.zfill(2)\n        \n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == '-' else \"\"\n        s = s.lstrip('-').zfill(2)\n        \n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s.lstrip('-').zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == \"-\" else \"\"\n        s = s[1:] if s[0] == \"-\" else s\n        s = s.zfill(2)\n      \n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1]) - 10]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if s.startswith('-') else s\n        s = s.zfill(2)\n        \n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1]) - 10]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == '-' else \"\"\n        s = s[1:] if s[0] == '-' else s\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith('-') else \"\"\n        s = s[1:] if c else s\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n      \n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"\"\n        if s.startswith('-'):\n            c = \"MINUS\"\n            s = s[1:]\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + \" \" + self.NUMBER[int(s[1])]\n        if s[0] == '1':\n            return c + \" \" + self.NUMBER_TEEN[int(s[1])]\n        if s[1] == '0':\n            return c + \" \" + self.NUMBER_TEN[int(s[0]) - 1]\n        return c + \" \" + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            c = \"MINUS\"\n            s = s[1:]\n        else:\n            c = \"\"\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        if s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        if s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    c = \"\"\n    if s[0] == '-':\n        c = \"MINUS\"\n        s = s[1:]\n    s = s.zfill(2)\n    if s[0] == '0':\n        return c + \" \" + self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return c + \" \" + self.NUMBER_TEEN[int(s[1])]\n    elif s[1] == '0':\n        return c + \" \" + self.NUMBER_TEN[int(s[0]) - 1]\n    else:\n        return c + \" \" + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == \"-\" else \"\"\n        s = s[1:] if s[0] == \"-\" else s\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    if s.startswith('-'):\n        c = 'MINUS '\n        s = s[1:]\n    else:\n        c = ''\n    s = s.zfill(2)\n    if s[0] == '0':\n        return c + self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return c + self.NUMBER_TEEN[int(s[1])]\n    elif s[1] == '0':\n        return c + self.NUMBER_TEN[int(s[0]) - 1]\n    else:\n        return c + self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[1])]",
                true
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == \"-\" else \"\"\n        s = s[1:] if s[0] == \"-\" else s\n        s = s.zfill(2)\n        \n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s.startswith(\"-\") else \"\"\n        s = s[1:] if s.startswith(\"-\") else s\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        if s[0] == '-':\n            c = \"MINUS\"\n            s = s[1:]\n        else:\n            c = \"\"\n        s = s.zfill(2)\n        if s[0] == '0':\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == '1':\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == '0':\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n    c = \"MINUS\" if s.startswith(\"-\") else \"\"\n    s = s[1:] if s.startswith(\"-\") else s\n    s = s.zfill(2)\n    \n    if s[0] == '0':\n        return c + self.NUMBER[int(s[1])]\n    elif s[0] == '1':\n        return c + self.NUMBER_TEEN[int(s[1])]\n    elif s[1] == '0':\n        return c + self.NUMBER_TEN[int(s[0])-1]\n    else:\n        return c + self.NUMBER_TEN[int(s[0])-1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ],
            [
                "def trans_two_minus(self, s):\n        c = \"MINUS\" if s[0] == \"-\" else \"\"\n        s = s[1:] if s[0] == \"-\" else s\n        s = s.zfill(2)\n        \n        if s[0] == \"0\":\n            return c + self.NUMBER[int(s[1])]\n        elif s[0] == \"1\":\n            return c + self.NUMBER_TEEN[int(s[1])]\n        elif s[1] == \"0\":\n            return c + self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return c + self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[1])]",
                false
            ]
        ]
    },
    "4": {
        "level 1": [
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        numbers = []\n        for word in textnum.split():\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                numbers.append(scale * increment)\n            elif word == \"point\":\n                numbers.append('.')\n        \n        return str(eval(''.join(map(str, numbers))))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == \"point\":\n                current = num\n                num = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    num += current\n                    current = 0\n                elif scale == 1:\n                    num += current\n                    current = 0\n                else:\n                    current = 0\n            else:\n                raise ValueError(\"Invalid input\")\n        num += current\n        return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        parts = textnum.split('point')\n        integer_text = parts[0]\n        decimal_text = parts[1]\n        integer_value = self.text2int(integer_text)\n        decimal_value = self.text2int(decimal_text)\n        return str(integer_value + decimal_value / (10 ** len(decimal_text)))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == \"point\":\n                break\n            if word not in self.numwords:\n                continue\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                num += current\n                current = 0\n        if current:\n            num += current\n        if \"point\" in words:\n            current = 0\n            for word in words[words.index(\"point\") + 1:]:\n                if word not in self.numwords:\n                    continue\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            num += current / (10 ** len(str(current)))\n        return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        tokens = textnum.replace('-', ' ').replace(' and ', ' ').replace(',', ' ').split()\n        num = 0\n        current = 0\n        for word in tokens:\n            if word == 'point':\n                current = num\n                num = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current + num * scale + increment\n                if scale > 100:\n                    num = 0\n                num = 0\n            elif word == \"point\":\n                current = num\n                num = 0\n            elif word.isdigit():\n                num = int(word)\n            else:\n                return \"Invalid input\"\n        return str(current + num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    nums = []\n    for word in textnum.replace('-', ' ').replace(' and ', ' ').replace('point', ' ').split():\n        if word not in self.numwords:\n            return \"Invalid input: {}\".format(word)\n        scale, increment = self.numwords[word]\n        nums.append(scale * increment)\n    \n    if len(nums) == 0:\n        return \"Invalid input: {}\".format(textnum)\n\n    numbers = [n for n in nums if n < 1000]\n    total = sum(numbers) + max(n for n in nums if n >= 1000)\n    \n    return str(total)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').replace(' and ', ' ').replace(',', ' ').split()\n        try:\n            numbers = [self.numwords[word] for word in words]\n            numbers.append((1, 0))  # Ensure decimal point is correctly handled\n            numbers.reverse()\n\n            n, result = 0, 0\n            for word, value in numbers:\n                if word == 1:\n                    n += value\n                else:\n                    result += n * word + value\n                    n = 0\n            return str(result)\n        except (ValueError, KeyError):\n            return 'Not a valid input'",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    # Split the input text into integer and decimal parts\n    parts = textnum.lower().split(\" point \")\n    integer_text = parts[0]\n    decimal_text = parts[1] if len(parts) > 1 else \"\"\n\n    # Convert integer part\n    integer_result = self.text2int(integer_text)\n\n    # Convert decimal part\n    decimal_result = 0\n    if decimal_text:\n        decimal_result = self.text2int(decimal_text) / (10 ** len(decimal_text))\n\n    return integer_result + decimal_result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        parts = textnum.split('point')\n        integer_part = self.text2int(parts[0])\n        decimal_part = self.text2int(parts[1])\n        return float(str(integer_part) + '.' + str(decimal_part))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == \"point\":\n                num += current\n                current = 0\n            else:\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                else:\n                    return \"Invalid input\"\n        return str(num + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    textnum = textnum.replace('point', '.')\n    return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').replace(' and ', ' ').split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == \"point\":\n                num += current\n                current = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                return \"Invalid input\"\n        return str(num + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        if self.is_valid_input(textnum):\n            textnum = textnum.replace('-', ' ')\n            textnum = textnum.split()\n            if 'point' in textnum:\n                index = textnum.index('point')\n                integer_part = self.text2int(' '.join(textnum[:index]))\n                decimal_part = self.text2int(' '.join(textnum[index+1:]))\n                return str(float(integer_part) + float(decimal_part) / 10 ** len(decimal_part))\n            else:\n                return self.text2int(textnum)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        if self.is_valid_input(textnum):\n            return self.text2int(textnum)\n        else:\n            return \"Invalid input\"",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    result = 0\n    current = 0\n    tokens = textnum.split()\n    \n    for word in tokens:\n        if word == \"point\":\n            result += current\n            current = 0\n        elif word in self.numwords:\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            \n    return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word not in self.numwords:\n                raise Exception(\"Illegal word: \" + word)\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        # Split the input text based on the word 'point'\n        if 'point' in textnum:\n            int_part, decimal_part = textnum.split('point')\n        else:\n            int_part = textnum\n            decimal_part = \"zero\"\n\n        # Convert the integer part using the existing text2int method\n        integer_result = self.text2int(int_part)\n\n        # Convert the decimal part using the existing text2int method and divide by appropriate power of 10\n        decimal_result = self.text2int(decimal_part) / (10 ** len(decimal_part))\n\n        # Combine the integer and decimal parts to form the final float-like number\n        final_result = integer_result + decimal_result\n        \n        return str(final_result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        parts = textnum.split('point')\n        integer_part = self.text2int(parts[0])\n        if len(parts) == 2:\n            decimal_part = self.text2int(parts[1])\n            return str(integer_part) + '.' + str(decimal_part)\n        return str(integer_part)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == 'point':\n                break\n            if word not in self.numwords:\n                return None\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                num += current\n                current = 0\n        if current:\n            num += current\n        if 'point' in words:\n            decimal_part = words[words.index('point')+1:]\n            if not decimal_part:\n                return None\n            dec_num = 0\n            current = 0\n            for word in decimal_part:\n                if word not in self.numwords:\n                    return None\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    dec_num += current\n                    current = 0\n            if current:\n                dec_num += current\n            num_str = str(num) + \".\" + str(dec_num)\n            return num_str\n        return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        tokens = textnum.replace('-', ' ').replace(' and ', ' ').replace(',', ' ').split()\n        if 'point' in tokens:\n            integer_part = ' '.join(tokens[:tokens.index('point')])\n            decimal_part = ' '.join(tokens[tokens.index('point')+1:])\n            return str(int(self.text2int(integer_part))) + '.' + str(int(self.text2int(decimal_part)))\n        else:\n            return str(int(self.text2int(textnum)))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        try:\n            textnum = textnum.replace('-', ' ')\n            word_tokens = textnum.split()\n            point_index = word_tokens.index('point')\n            whole_num_string = ' '.join(word_tokens[:point_index])\n            decimal_num_string = ' '.join(word_tokens[point_index + 1:])\n\n            whole_num = self.text2int(whole_num_string)\n            decimal_num = self.text2int(decimal_num_string)\n\n            return str(whole_num) + '.' + str(decimal_num).zfill(len(decimal_num_string))\n        except (ValueError, KeyError):\n            return \"Invalid input. Please provide a valid numeric phrase.\"",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num, total, final_num = 0, 0, None\n        \n        if 'point' in words:\n            index = words.index('point')\n            num = self.text2int(' '.join(words[:index]))\n            total = num\n            \n            if index < len(words) - 1:\n                decimal = self.text2int(' '.join(words[index + 1:]))\n                total += float(decimal) / 10**len(str(decimal))\n            \n            final_num = f\"{total}\"\n        return final_num",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        try:\n            num = float(textnum)\n            return str(num)\n        except ValueError:\n            pass\n\n        if not self.is_valid_input(textnum):\n            return None\n\n        textnum = textnum.replace(' and ', ' ')\n        textnum = textnum.replace('-', ' ')\n        textnum = textnum.replace(',', ' ')\n\n        current = result = 0\n        current_string = \"\"\n        for word in textnum.split():\n            if word == 'point':\n                break\n            if word not in self.numwords:\n                return None\n            scale, increment = self.numwords[word]\n            current_string += word + ' '\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n\n        result += current\n        if 'point' in textnum:\n            dec_part = textnum.split('point ')[1]\n            dec_result = self.text2int(dec_part)\n            return str(result) + '.' + dec_result\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == \"point\":\n                current = int(result)\n                result = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                return None\n        return str(current + result * (10 ** -len(str(result))))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        try:\n            return str(float(text2int(textnum)))\n        except ValueError:\n            return None",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        tokens = textnum.split()\n        if \"point\" in tokens:\n            whole_part = self.text2int(\" \".join(tokens[:tokens.index(\"point\")]))\n            decimal_part = self.text2int(\" \".join(tokens[tokens.index(\"point\") + 1:]))\n            return str(whole_part) + \".\" + str(decimal_part)\n        else:\n            return str(self.text2int(textnum))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('point', 'point ')\n        words = textnum.replace('-', ' ').split()\n        words = [self.numwords[word] for word in words]\n        numbers = []\n        for word in words:\n            scale, increment = word\n            numbers.append(scale * increment)\n        return str(sum(numbers))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.split('point')\n        integer_part = self.text2int(textnum[0])\n        fractional_part = self.text2int(textnum[1]) if len(textnum) == 2 else 0\n        return str(integer_part) + \".\" + str(fractional_part)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        textnum = textnum.replace(' and ', ' ')\n        text_parts = textnum.split(' point ')\n        result = self.text2int(text_parts[0])\n        if len(text_parts) > 1:\n            result += '.' + self.text2int(text_parts[1])\n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n            if self.is_valid_input(textnum):\n                words = textnum.replace('-', ' ').replace(' and ', ' ').split()\n                numbers = []\n                for word in words:\n                    if word not in self.numwords:\n                        return None\n                    scale, increment = self.numwords[word]\n                    numbers.append(scale * increment)\n                return str(sum(numbers))\n            else:\n                return None",
                false
            ]
        ],
        "level 2": [
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        result = \"\"\n        for word in words:\n            if word not in self.numwords:\n                if word == \"point\":\n                    result += str(num) + \".\"\n                    num = 0\n                else:\n                    result += str(num) + \" \" + word + \" \"\n                    num = 0\n            else:\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n        result += str(num)\n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        words = textnum.split()\n        result = \"\"\n        current_num = 0\n        decimal_part = \"\"\n        for word in words:\n            if word == \"point\":\n                decimal_part = str(current_num) + \".\"\n                current_num = 0\n            else:\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current_num = current_num * scale + increment\n                elif word in self.ordinal_words:\n                    current_num += self.ordinal_words[word]\n                else:\n                    if current_num != 0:\n                        result += str(current_num) + \" \"\n                        current_num = 0\n                    result += word + \" \"\n        if current_num != 0:\n            result += str(current_num)\n        if decimal_part:\n            result = decimal_part + result\n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        result = \"\"\n        current = 0\n        for word in words:\n            if word == 'point':\n                result += str(current)\n                current = 0\n                result += word\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                if current != 0:\n                    result += str(current) + \" \"\n                result += word + \" \"\n                current = 0\n        if current != 0:\n            result += str(current)\n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        result = 0\n        current = 0\n        for word in textnum.replace('-', ' ').split():\n            if word == 'point':\n                result += current\n                current = 0\n                current_float = 0\n                factor = 0.1\n                continue\n            if self.is_ordinal(word):\n                current = self.handle_ordinal(current, word)\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current_number = 0\n        result = \"\"\n        for word in textnum.split():\n            if word == \"point\":\n                result += str(current_number) + \".\"\n                current_number = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current_number = current_number * scale + increment\n            elif word in self.ordinal_words:\n                current_number += self.ordinal_words[word]\n            else:\n                if current_number:\n                    result += str(current_number) + \" \"\n                    current_number = 0\n                result += word + \" \"\n        \n        if current_number:\n            result += str(current_number)\n        \n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'point':\n                current = float(result)\n                result = 0\n            else:\n                scale, increment = self.numwords.get(word, (1, 0))\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word not in self.numwords:\n                return \"Invalid input\"\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if word == 'point':\n                result += current\n                current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        number = 0\n        decimal_flag = False\n        decimal_place = 1\n\n        for word in words:\n            if word == 'point':\n                decimal_flag = True\n                continue\n\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                if scale == 1:\n                    if decimal_flag:\n                        number += increment / (10 ** decimal_place)\n                        decimal_place += 1\n                    else:\n                        number += increment\n                else:\n                    if decimal_flag:\n                        number = (number + increment) * scale\n                    else:\n                        number = number * scale + increment\n            else:\n                break\n\n        return str(number)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word not in self.numwords:\n                if word == \"point\":\n                    result += current\n                    current = 0\n                else:\n                    return str(result + current)\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'point':\n                current = result\n                result = 0\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        current = result = 0\n        decimals = 0\n        for word in words:\n            if word == \"point\":\n                decimals = 1\n                current = 0\n                continue\n            if word not in self.numwords:\n                result += current\n                current = 0\n                if decimals:\n                    decimals *= 0.1\n                continue\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n        result += current\n        final_result = str(result)\n        if decimals:\n            final_result += \".\" + str(int(result * decimals) % 10)\n        return final_result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        result = 0\n        current = 0\n        for word in textnum.split():\n            if word == 'point':\n                result += current\n                current = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        textnum = textnum.split()\n        \n        num = 0\n        scale = 1\n        result = \"\"\n        is_decimal = False\n        decimal_scale = 0.1\n        \n        for word in textnum:\n            if word == \"point\":\n                is_decimal = True\n                scale = 1\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n                if is_decimal:\n                    scale *= decimal_scale\n            else:\n                result += str(num) + \" \" + word + \" \"\n                num = 0\n        \n        result += str(num)\n        \n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        result = 0\n        current = 0\n        for word in textnum.split():\n            if word == 'point':\n                result += current\n                current = 0\n                continue\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        current = result = 0\n        decimal_flag = False\n        for word in words:\n            if word == 'point':\n                current = result\n                result = 0\n                decimal_flag = True\n            else:\n                try:\n                    value, scale = self.numwords[word]\n                    current = current * scale + value\n                except KeyError:\n                    if word in self.ordinal_words:\n                        current = self.ordinal_words[word]\n                    elif word.endswith(self.ordinal_endings[0]):\n                        current = self.text2int_ordinal(word.replace(self.ordinal_endings[0][0], self.ordinal_endings[0][1]))\n                    else:\n                        result += current\n                        current = 0\n        if decimal_flag:\n            result += current / 10 ** len(str(current))\n        else:\n            result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        num = 0\n        current = 0\n        result = \"\"\n        textnum = textnum.replace('-', ' ')\n        for word in textnum.split():\n            if word == 'point':\n                result += str(num) + '.'\n                num = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    num += current\n                    current = 0\n            else:\n                if num:\n                    result += str(num + current) + ' '\n                current = 0\n                num = 0\n        result += str(num + current)\n        return result",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        num = 0\n        current_num = 0\n        current_scale = 1\n\n        for word in textnum.split():\n            if word == 'point':\n                current_scale = 0.1\n            elif word not in self.numwords:\n                num += current_num * current_scale\n                current_num = 0\n                current_scale = 1\n            else:\n                scale, increment = self.numwords[word]\n                current_num = current_num * scale + increment\n\n        num += current_num * current_scale\n        return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        numwords = self.numwords\n        scales = self.scales\n        endswith = textnum.endswith\n        for word in textnum.split():\n            if word == 'point':\n                current = float(current)\n                continue\n            if word not in numwords:\n                raise Exception(\"Illegal word: \" + word)\n            scale, increment = numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        current = 0\n        for word in words:\n            if word == \"point\":\n                current = 1\n                continue\n            if word not in self.numwords:\n                num += self.numwords[word][0] * self.numwords[word][1]\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n        if current > 0:\n            num += current\n        return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        result = 0\n        current = 0\n        for word in textnum.split():\n            if word == 'point':\n                result += current\n                current = 0\n                continue\n            if word not in self.numwords:\n                continue\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        words = textnum.replace('-', ' ').lower().split()\n        num = 0\n        decimal_num = 0\n        for word in words:\n            if word == 'point':\n                decimal_num = num\n                num = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                num = num * scale + increment\n            else:\n                break\n        if decimal_num > 0:\n            return str(num) + '.' + str(decimal_num)\n        else:\n            return str(num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        point = False\n        for word in textnum.split():\n            if word == 'point':\n                point = True\n            else:\n                num = self.numwords[word]\n                if num[0] == 1:\n                    current += num[1]\n                else:\n                    current = num[0] * current if current != 0 else num[0]\n                if point:\n                    current /= 10 ** len(word)\n                result += current\n                current = 0\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = point = 0\n        for word in textnum.split():\n            if word == \"point\":\n                point = 1\n                continue\n            try:\n                value, scale = self.numwords[word]\n                current = current * scale + value\n            except (KeyError, ValueError):\n                if point:\n                    current /= float(10 ** len(word))\n                    result += current\n                    current = point = 0\n                else:\n                    result += current\n                    current = 0\n        return str(int(result)) if int(result) == result else str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        current = result = 0\n        point = False\n        for word in words:\n            if word == \"point\":\n                point = True\n                continue\n            if word not in self.numwords:\n                raise ValueError(\"Invalid input\")\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n        result += current\n        return str(result) if not point else str(result) + '.' + str(current)\n\n",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        tokens = textnum.lower().split()\n        number = 0\n        current = 0\n        for word in tokens:\n            if word == 'point':\n                number += current\n                current = 0\n                continue\n            if not self.is_valid_input(word):\n                number += current\n                current = 0\n                continue\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n        number += current\n        return str(number)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        current = result = 0\n        point_seen = False\n        for word in words:\n            if word == \"point\":\n                point_seen = True\n                continue\n            if word not in self.numwords:\n                result += current\n                current = 0\n                if point_seen:\n                    break\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n        result += current\n        return str(result)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'point':\n                current = float(result)\n                result = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            else:\n                result += current\n                current = 0\n        return str(result + current)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        num = 0\n        final_num = 0\n        scale = 1\n        is_decimal = False\n        for word in words:\n            if word == 'point':\n                is_decimal = True\n                scale = 0.1\n                continue\n            if word not in self.numwords:\n                final_num += num * scale\n                num = 0\n                scale = 1\n                if is_decimal:\n                    break\n            else:\n                scale_temp, increment = self.numwords[word]\n                scale *= scale_temp\n                if scale == 1:\n                    num += increment\n                else:\n                    num *= scale_temp\n        final_num += num * scale\n        return str(final_num)",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        words = textnum.split()\n        numbers = []\n        decimal = False\n\n        for word in words:\n            if word == 'point':\n                decimal = True\n                continue\n\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                if scale == 1:\n                    numbers.append(increment)\n                else:\n                    numbers[-1] = numbers[-1] * scale + increment\n\n        if decimal:\n            whole_number = str(sum(numbers[:-1]))\n            decimal_part = str(sum(numbers[-1:]))\n            return '.'.join([whole_number, decimal_part])\n        else:\n            return str(sum(numbers))",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        for word in textnum.split():\n            if word == 'point':\n                current = float(result)\n                result = 0\n            elif word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                elif scale == 1:\n                    result += current\n                    current = 0\n            else:\n                if current:\n                    result += current\n                    current = 0\n        result += current\n        return str(result)",
                false
            ]
        ],
        "level 3": [
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word == 'and':\n                continue\n                \n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                onnumber = True\n            \n            for ending in self.ordinal_endings:\n                if word.endswith(ending[0]):\n                    word = word[:-len(ending[0])] + ending[1]\n                    break\n                \n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                onnumber = True\n            elif word == 'point':\n                curstring += str(current) + '.'\n                current = 0\n            else:\n                if onnumber:\n                    curstring += str(current) + \" \"\n                    current = 0\n                    onnumber = False\n                curstring += word + \" \"\n        \n        if onnumber:\n            curstring += str(current)\n        \n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        textnum = textnum.split()\n        \n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n                elif word == 'point':\n                    curstring += str(result + current) + '.'\n                    result = current = 0\n                else:\n                    if onnumber:\n                        curstring += str(result + current) + ' '\n                        result = current = 0\n                    curstring += word + ' '\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                true
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        curstring = ''\n        current = result = 0\n        onnumber = False\n        for word in textnum.split():\n            if word not in self.numwords:\n                return \"Input is not a valid number: {}\".format(word)\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n            onnumber = True\n            if word == 'point':\n                curstring += str(result + current) + '.'\n                result = current = 0\n                onnumber = False\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n                elif word == 'point':\n                    curstring += str(result + current) + '.'\n                    current = 0\n                    result = 0\n                else:\n                    if onnumber:\n                        curstring += str(result + current) + ' '\n                        current = 0\n                        result = 0\n                    curstring += word + ' '\n                    onnumber = False\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                true
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        textnum = textnum.split()\n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    onnumber = True\n                elif word == \"point\":\n                    curstring += str(result + current) + \".\"\n                    current = 0\n                    result = 0\n                    onnumber = False\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    current = result = 0\n    curstring = \"\"\n    onnumber = False\n    def is_valid_input(textnum):\n        pass\n    for word in textnum.split():\n        if word in self.ordinal_words:\n            scale, increment = (1, self.ordinal_words[word])\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n            onnumber = True\n        else:\n            for ending, replacement in self.ordinal_endings:\n                if word.endswith(ending):\n                    word = \"%s%s\" % (word[:-len(ending)], replacement)\n            if word not in self.numwords:\n                if onnumber:\n                    curstring += repr(result + current) + \" \"\n                curstring += word + \" \"\n                result = current = 0\n                onnumber = False\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n    if onnumber:\n        curstring += repr(result + current)\n    return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                onnumber = True\n                current = current * scale + increment\n            else:\n                for ending in self.ordinal_endings:\n                    if word.endswith(ending[0]):\n                        word = word[:-len(ending[0])] + ending[1]\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    onnumber = True\n                    current = current * scale + increment\n                elif word == \"point\":\n                    curstring += str(current) + '.'\n                    current = 0\n                else:\n                    if onnumber:\n                        curstring += str(current) + ' '\n                        current = 0\n                        onnumber = False\n                    curstring += word + ' '\n        if onnumber:\n            curstring += str(current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = word.replace(ending, replacement)\n            if word not in self.numwords:\n                if onnumber:\n                    curstring += str(result + current) + \" \"\n                curstring += word + \" \"\n                current = 0\n                result = 0\n                onnumber = False\n            else:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word == \"point\":\n                curstring += str(result + current) + \".\"\n                current = result = 0\n                onnumber = False\n            else:\n                if word in self.ordinal_words:\n                    scale, increment = (1, self.ordinal_words[word])\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n                else:\n                    for ending, replacement in self.ordinal_endings:\n                        if word.endswith(ending):\n                            word = \"%s%s\" % (word[:-len(ending)], replacement)\n                    if word in self.numwords:\n                        scale, increment = self.numwords[word]\n                        current = current * scale + increment\n                        if scale > 100:\n                            result += current\n                            current = 0\n                        onnumber = True\n                    else:\n                        if onnumber:\n                            curstring += str(result + current) + \" \"\n                        curstring += word + \" \"\n                        if not scale:\n                            result = current\n                        current = 0\n                        onnumber = False\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                true
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + ' '\n                    curstring += word + ' '\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        lastunit = False\n        lastscale = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + word + ' '\n                    else:\n                        curstring += word + ' '\n                    current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n\n            if word in self.units:\n                lastunit = True\n            elif word in self.scales:\n                lastscale = True\n            else:\n                lastunit = False\n                lastscale = False\n\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = f\"{word[:-len(ending)]}{replacement}\"\n                        break\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    current = result = 0\n    curstring = ''\n    onnumber = False\n    point = False\n\n    def is_valid_input(textnum):\n        pass\n\n    for word in textnum.split():\n        if word == 'point':\n            curstring += str(result + current) + '.'\n            current = result = 0\n            onnumber = False\n            point = True\n        else:\n            num, numword = self.numwords.get(word, (None, None))\n            if num is not None:\n                onnumber = True\n                current = current * num + numword\n                if num >= 100:\n                    result += current\n                    current = 0\n            else:\n                if word.isdigit():\n                    curstring += str(result + current) + word + ' '\n                    current = result = 0\n                    onnumber = False\n                elif onnumber:\n                    curstring += str(result + current) + ' '\n                    current = result = 0\n                    onnumber = False\n                curstring += word + ' '\n\n    if onnumber:\n        curstring += str(result + current)\n\n    return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += repr(result + current) + \" \"\n                    curstring += word + \" \"\n                    current = result = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n\n            if word == 'point':\n                curstring += repr(result + current) + \".\"\n                current = result = 0\n                onnumber = False\n\n        if onnumber:\n            curstring += repr(result + current)\n\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        onnumber = False\n        scale = 1\n        multiple = 1\n        for word in textnum.split():\n            if word == 'point':\n                curstring += str(current) + '.'\n                current = 0\n                scale = 1\n                onnumber = False\n            else:\n                if word not in self.numwords:\n                    continue\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current * multiple\n                    current = 0\n                    scale = 1\n                    multiple = scale\n                    onnumber = False\n                else:\n                    onnumber = True\n        if onnumber:\n            curstring += str(current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        numbers = []\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        numbers.append(current)\n                        result += current\n                        current = 0\n                    onnumber = True\n                elif word == \"point\":\n                    curstring += str(result + current) + \".\"\n                    current = 0\n                    onnumber = False\n                else:\n                    curstring += str(result + current) + (\".\" if onnumber else \" \") + word\n                    if onnumber:\n                        result += current\n                        current = 0\n                    onnumber = False\n        if onnumber:\n            numbers.append(current)\n        curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        scale = 0\n\n        for word in textnum.split():\n            if word == \"and\":\n                continue\n\n            if word == \"point\":\n                curstring += str(current) + \".\"\n                current = 0\n                onnumber = False\n                continue\n\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current + increment * scale\n                onnumber = True\n\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n                else:\n                    if onnumber:\n                        curstring += str(current) + \" \"\n                    curstring += word + \" \"\n                    if scale == 1:\n                        result += current\n                    current = 0\n                    onnumber = False\n\n        if onnumber:\n            curstring += str(current) + \" \"\n\n        return curstring.strip()",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n    textnum = textnum.replace('-', ' ')\n    current = result = 0\n    curstring = ''\n    \n    for word in textnum.split():\n        if word in self.ordinal_words:\n            scale, increment = self.numwords[word]\n            current = current * scale + increment\n            if scale > 100:\n                result += current\n                current = 0\n        else:\n            for ending, replacement in self.ordinal_endings:\n                if word.endswith(ending):\n                    word = word.replace(ending, replacement)\n            if word in self.numwords:\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n            elif word == 'point':\n                curstring += str(result + current) + '.'\n                result = current = 0\n            else:\n                curstring += word\n\n    if current != 0:\n        curstring += str(result + current)\n\n    return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        curstring = \"\"\n        textnum += \" \"\n\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                ordinal = False\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        ordinal = True\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    curstring += \" \" + word\n                else:\n                    scale, increment = self.numwords[word]\n\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n\n            if word == \"point\":\n                curstring += \".\"\n                break\n\n        if current != 0:\n            result += current\n\n        return str(result) + curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        textnum = textnum.split()\n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    curstring += word\n                    scale = increment = 1\n                else:\n                    scale, increment = self.numwords[word]\n            if scale > 1:\n                current = max(1, current) * scale\n            current += increment\n            if scale > 100:\n                result += current\n                current = 0\n        curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = ''\n        \n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                        break\n                if word not in self.numwords:\n                    curstring += word\n                    continue\n                scale, increment = self.numwords[word]\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n        \n        curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = 0\n        result = 0\n        curstring = ''\n        textnum = textnum.split()\n        \n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                        break\n                if word not in self.numwords:\n                    if word == 'point':\n                        curstring += '.'\n                        if current:\n                            result += current\n                            current = 0\n                    else:\n                        curstring += word + ' '\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n        \n        if current:\n            result += current\n        return curstring.strip()",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        onnumber = False\n        current = result = 0\n        curstring = \"\"\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace('-', ' ')\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        point = 'point'\n\n        for word in textnum.lower().split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word in self.numwords:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n                elif word == point:\n                    curstring += str(result + current) + '.'\n                    current = 0\n                else:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = 0\n        result = 0\n        curstring = \"\"\n        onnumber = False\n\n        for word in textnum.split():\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n\n                if word == \"point\":\n                    curstring += str(result + current) + \".\"\n                    result = current = 0\n                    onnumber = False\n\n        if onnumber:\n            curstring += str(result + current)\n\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        onnumber = False\n        current = result = 0\n        curstring = \"\"\n        textnum = textnum.replace('-', ' ')\n        textnum = textnum.split()\n        for word in textnum:\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current) + \" \"\n                    curstring += word + \" \"\n                    result = current = 0\n                    onnumber = False\n                else:\n                    scale, increment = self.numwords[word]\n                    current = current * scale + increment\n                    if scale > 100:\n                        result += current\n                        current = 0\n                    onnumber = True\n        if onnumber:\n            curstring += str(result + current)\n        return curstring",
                false
            ],
            [
                "def text2int_with_decimal(self, textnum):\n        textnum = textnum.replace(\"-\", \" \")\n        current = result = 0\n        curstring = \"\"\n        onnumber = False\n        point = False\n        is_decimal = False\n\n        for word in textnum.split():\n            if word == \"point\":\n                point = True\n                continue\n\n            if word in self.ordinal_words:\n                scale, increment = (1, self.ordinal_words[word])\n                current = current * scale + increment\n                if scale > 100:\n                    result += current\n                    current = 0\n                onnumber = True\n            else:\n                for ending, replacement in self.ordinal_endings:\n                    if word.endswith(ending):\n                        word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n                if word not in self.numwords:\n                    if onnumber:\n                        curstring += str(result + current)\n                    curstring += word\n                    result = current = 0\n                    onnumber = False\n                    is_decimal = False\n                else:\n                    scale, increment = self.numwords[word]\n\n                    if point:\n                        result += current\n                        current = increment\n                        is_decimal = True\n                    else:\n                        current = current * scale + increment\n\n                    onnumber = True\n\n        if onnumber and not is_decimal:\n            curstring += str(result + current)\n\n        return curstring",
                false
            ]
        ]
    }
}