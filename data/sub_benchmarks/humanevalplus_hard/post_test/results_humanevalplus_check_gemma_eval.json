{
    "0": {
        "level 1": [
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n\n    if not re.match(r\"\\d{1,2}-\\d{1,2}-\\d{4}\", date):\n        return False\n\n    month, day, year = map(int, date.split(\"-\"))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month == 2:\n        if not (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)) and day > 28:\n            return False\n\n        if day > 29:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Checks if a given date string is valid.\n\n    Args:\n      date_str: The date string to check.\n\n    Returns:\n      True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check if the date string is empty.\n    if not date_str:\n        return False\n\n    # Check if the date string is in the 'mm-dd-yyyy' format.\n    if not re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date_str):\n        return False\n\n    # Extract the month, day, and year from the date string.\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check if the month is between 1 and 12.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is within the valid range for the month.\n    if day < 1 or day > max([31, 28 + (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)), 31, 30]):\n        return False\n\n    # Return True if the date is valid.\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month == 2:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            if day != 28:\n                return False\n\n    elif month in (4, 6, 9, 11):\n        if day != 30:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if len(date) != 10 or date.count('-') != 2 or month < 1 or month > 12 or day < 1 or day > 31:\n        return False\n    if month not in [2, 4, 6, 9, 11]:\n        return True\n    elif month == 2 and (day > 29 or (year % 4 != 0 and day > 28)):\n        return False\n    elif year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if day == 29 and month == 2:\n        if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n            return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day > days_in_month[month - 1]:\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r\"\\d{2}-\\d{2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split(\"-\"))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2 and day == 29 and year % 4 != 0:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Determines if a date string is valid.\n\n    Args:\n      date_str: The date string to validate.\n\n    Returns:\n      True if the date string is valid, False otherwise.\n    \"\"\"\n\n    # Check if the date string is empty.\n    if not date_str:\n        return False\n\n    # Check if the date string is in the 'mm-dd-yyyy' format.\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date_str):\n        return False\n\n    # Split the date string into month, day, and year values.\n    month, day, year = date_str.split('-')\n\n    # Check if the month value is valid (1 to 12).\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day value is valid for the given month.\n    if int(day) < 1 or int(day) > max_days(int(month), int(year)):\n        return False\n\n    return True\n\ndef max_days(month, year):\n    \"\"\"\n    Returns the maximum number of days in a given month.\n\n    Args:\n      month: The month number.\n      year: The year.\n\n    Returns:\n      The maximum number of days in the given month.\n    \"\"\"\n\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31\n\ndef is_leap_year(year):\n    \"\"\"\n    Determines if a year is a leap year.\n\n    Args:\n      year: The year to check.\n\n    Returns:\n      True if the year is a leap year, False otherwise.\n    \"\"\"\n\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Determines if a date string is valid, taking into account leap years.\n\n    Args:\n    date_str: The date string to validate.\n\n    Returns:\n    True if the date string is valid, False otherwise.\n    \"\"\"\n    # Check if the date string is empty.\n    if not date_str:\n        return False\n\n    # Check if the date string is in the 'mm-dd-yyyy' format.\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date_str):\n        return False\n\n    # Convert the date string to a datetime object.\n    try:\n        datetime.datetime.strptime(date_str, '%m-%d-%Y')\n    except ValueError:\n        return False\n\n    # Extract the month, day, and year values from the date string.\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check if the month value is valid.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day value is valid for the given month.\n    if day < 1 or day > 31:\n        return False\n\n    # Check if February 29 is valid for leap years.\n    if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    # The date string is valid.\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n    elif day > days_in_month[month - 1]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^[0-9]{2}-[0-9]{2}-[0-9]{4}$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            if day == 29:\n                return False\n    elif month in (4, 6, 9, 11):\n        if day > 30:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n    month, day, year = [int(x) for x in date.split('-')]\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if day > 31:\n        return False\n    if day == 29 and month == 2 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Validates a date string with leap year considerations.\n\n    Args:\n        date_str: The date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the string is blank or not in the expected format\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Extract month, day, and year\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Check day range based on month\n    if day < 1 or day > 31:\n        return False\n\n    # February special case\n    if month == 2 and day == 29:\n        if not ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Validates a date string, with special attention to leap years.\n\n    Args:\n      date_str: The date string to validate.\n\n    Returns:\n      True if the date string is valid, False otherwise.\n    \"\"\"\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month not in range(1, 13):\n        return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2:\n        days_in_month[1] = 29 if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else 28\n\n    if day not in range(1, days_in_month[month - 1] + 1):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2:\n        if (year % 4 == 0 and not (year % 100 == 0 and year % 400 != 0)) and day != 29:\n            return False\n        elif year % 4 != 0 and day > 28:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1:\n        return False\n\n    if day > 28:\n        if month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        elif month in (4, 6, 9, 11):\n            if day > 30:\n                return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date):\n    if not date:\n        return False\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(day) <= 0 or int(day) > 31 or (int(day) == 31 and int(month) in [4, 6, 9, 11]):\n        return False\n    if int(month) == 2 and int(day) > 29:\n        if int(year) % 400 == 0:\n            return True\n        elif int(year) % 100 == 0:\n            return False\n        elif int(year) % 4 == 0:\n            return True\n        else:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date_str):\n    \"\"\"\n    Constructs a function `valid_paint_leap_year` tasked with confirming the authenticity of a date string, considering leap years.\n\n    This function should ensure the string follows the 'mm-dd-yyyy' pattern, is not empty, and that its month values range from 1 to 12. Additionally, it must validate that the day numbers are within the permissible range for the corresponding month, with a particular check for February 29 only being valid in leap years.\n\n    Args:\n        date_str: The input date string to validate.\n\n    Returns:\n        True if the date string is valid, False otherwise.\n    \"\"\"\n    import re\n\n    pattern = r'^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(19|20)\\d{2}$'\n\n    if not date_str:\n        return False\n\n    if not re.match(pattern, date_str):\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        # Check for February 29 in leap years\n        if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Validates a date string, considering leap years.\n\n    Args:\n      date_str: The date string to validate.\n\n    Returns:\n      True if the date string is valid, False otherwise.\n    \"\"\"\n\n    # Check if the string is empty or not in the correct format.\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Extract the month, day, and year from the string.\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check if the month is valid.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for the given month.\n    if day < 1 or day > (28 + (month == 2 and is_leap_year(year))):\n        return False\n\n    return True\n\ndef is_leap_year(year: int) -> bool:\n    \"\"\"\n    Checks if a year is a leap year.\n\n    Args:\n      year: The year to check.\n\n    Returns:\n      True if the year is a leap year, False otherwise.\n    \"\"\"\n\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date):\n    months = {\"01\": 31, \"02\": 28, \"03\": 31, \"04\": 30, \"05\": 31, \"06\": 30, \"07\": 31, \"08\": 31, \"09\": 30, \"10\": 31, \"11\": 30, \"12\": 31}\n    if not date or len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    month, day, year = date.split(\"-\")\n    if int(year) % 400 == 0:\n        months[\"02\"] = 29\n    elif int(year) % 100 == 0:\n        months[\"02\"] = 28\n    elif int(year) % 4 == 0:\n        months[\"02\"] = 29\n    if not 1 <= int(month) <= 12 or not 1 <= int(day) <= months[month]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2 and day == 29 and not (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r\"\\d{2}-\\d{2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split(\"-\"))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2 and day == 29 and year % 4 != 0:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Checks if a date string adheres to standards.\n\n    Args:\n        date_str (str): The date string in 'mm-dd-yyyy' format.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check if the string is empty or not in 'mm-dd-yyyy' format.\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Split the string into month, day, and year.\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check if the month is between 1 and 12.\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is within the valid range for the month.\n    if day < 1 or day > (29 if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else ((31 if month <= 7 else 30) if month != 2 else 28)):\n        return False\n\n    # The date is valid.\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Checks if a date string adheres to standards, especially with respect to leap years.\n\n    Args:\n        date_str: The date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date string is valid, False otherwise.\n    \"\"\"\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[1] += 1\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    This function checks if a date string adheres to standards, especially with respect to leap years.\n\n    Args:\n        date_str (str): The date string to check.\n\n    Returns:\n        bool: True if the date string is valid, False otherwise.\n    \"\"\"\n\n    # Check for empty string or incorrect format\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Extract month, day, and year from the string\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Check day range\n    if day < 1 or day > 31:\n        return False\n\n    # Handle February days in leap years\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) and day != 29:\n            return False\n        elif day == 29:\n            return False\n\n    # Check other month specific days\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 30:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1:\n        return False\n\n    if month in (4, 6, 9, 11) and day > 30:\n        return False\n\n    if month == 2:\n        if day > 29:\n            return False\n        if day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Evaluates the validity of a date string concerning leap years.\n\n    Parameters:\n    date_str (str): The date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n    bool: True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Validate format\n    if not date_str.startswith('0') and len(date_str) != 10 or not date_str.count('-') == 2:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date_str.split('-'))\n\n    # Validate month range\n    if month < 1 or month > 12:\n        return False\n\n    # Validate day range\n    if day < 1 or day > 31:\n        return False\n\n    # Validate February 29 during leap years\n    if month == 2 and day == 29 and not (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)):\n        return False\n\n    # Return True if all validations pass\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    if not date_str:\n        return False\n\n    if not len(date_str) == 10 or not date_str.count('-') == 2:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if not 1 <= month <= 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month == 2:\n        if day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    month_lengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if day > month_lengths[month - 1]:\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_string):\n    try:\n        month, day, year = map(int, date_string.split('-'))\n        if not (1 <= month <= 12 and 1 <= day <= 31 and year >= 0):\n            raise ValueError\n        if month == 2 and (day > 29 or (day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))):\n            raise ValueError\n        return True\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > (29 if month == 2 and is_leap_year(year) else month_days[month]):\n        return False\n    return True\n\ndef is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    return False\n\nmonth_days = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r\"\\d{2}-\\d{2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split(\"-\"))\n    if not (1 <= month <= 12):\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[1] = 29\n    if not (1 <= day <= days_in_month[month - 1]):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Validates a date string based on specific conditions and considering leap years.\n    \"\"\"\n    # Check if the date string is empty or not in the correct format\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date_str.split('-'))\n\n    # Verify if the month and day are numeric\n    if not (isinstance(month, int) and isinstance(day, int)):\n        return False\n\n    # Define the number of days for each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Adjust February days for leap years\n    if month == 2:\n        days_in_month[1] = 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28\n\n    # Verify if the month is between 1 and 12 and the day is within the valid range\n    if not (1 <= month <= 12) or day not in range(1, days_in_month[month - 1] + 1):\n        return False\n\n    # All conditions satisfied, return True\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Validates a date string based on specific conditions and considering leap years.\n\n    Args:\n        date_str: The input date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n\n    if not date_str:\n        return False\n\n    if len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if not (1 <= month <= 12):\n        return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n\n    if not (1 <= day <= days_in_month[month - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    months_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    date = date.strip()\n    if not date:\n        return False\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > months_days[month-1]:\n        if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n        days_in_month[month - 1] = 28\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date_str):\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12 or day < 1 or day > 31:\n        return False\n\n    max_days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and (day > 29 or (day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))):\n        return False\n\n    if day > max_days_per_month[month - 1]:\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date_str):\n    if not date_str:\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check month range\n    if not 1 <= month <= 12:\n        return False\n\n    # Check day range\n    max_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day > max_days[month - 1]:\n        return False\n\n    # Check leap year conditions for February 29\n    if day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    month, day, year = map(int, date.split('-'))\n    max_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month not in range(1, 13):\n        return False\n    if year < 0:\n        return False\n    if day not in range(1, max_days[month - 1] + 1):\n        if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if not (1 <= month <= 12):\n        return False\n\n    max_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    if not (1 <= day <= max_days[month - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    # Check for empty string\n    if not date:\n        return False\n\n    # Divide date into components\n    month, day, year = date.split('-')\n\n    # Check for numeric values\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    # Check month range\n    month = int(month)\n    if not (1 <= month <= 12):\n        return False\n\n    # Check day range\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day > days_in_month[month - 1]:\n        return False\n\n    # Check Leap Year Conditions\n    if month == 2 and day == 29:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    # All checks passed\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date_str):\n    \"\"\"\n    Validates a date string to see if it conforms to the 'mm-dd-yyyy' format and accounts for leap years.\n\n    Args:\n        date_str: The input date string.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check if the string is blank or not.\n    if not date_str.strip():\n        return False\n\n    # Divide the date string into components.\n    components = date_str.split('-')\n    if len(components) != 3:\n        return False\n\n    # Check if the month, day, and year components are numerical.\n    try:\n        month, day, year = map(int, components)\n    except ValueError:\n        return False\n\n    # Validate the month value.\n    if month < 1 or month > 12:\n        return False\n\n    # Validate the day value.\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n\n    # Account for leap years.\n    if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    # If all criteria are met, the date is valid.\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date_input):\n    months_31 = [1, 3, 5, 7, 8, 10, 12]\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n    date_split = date_input.split(\"-\")\n    if len(date_split) != 3 or not all(date.isdigit() for date in date_split):\n        return False\n    month, day, year = [int(s) for s in date_split]\n    if not (1 <= month <= 12 and 1 <= day <= days_in_month[month]):\n        return False\n    if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    \"\"\"\n    Validates date string according to 'mm-dd-yyyy' format.\n    \"\"\"\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if not (1 <= month <= 12):\n        return False\n    days = months_leap if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else months\n    if not (1 <= day <= days[month - 1]):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not isinstance(date, str) or not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if not (1 <= month <= 12):\n        return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n\n    if not (1 <= day <= days_in_month[month - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    # Check for blank string\n    if not date:\n        return False\n\n    # Validate format\n    pattern = r'^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(19|20)\\d{2}$'\n    if not re.match(pattern, date):\n        return False\n\n    # Extract month, day, year\n    month, day, year = map(int, date.split('-'))\n\n    # Validate month range\n    if month < 1 or month > 12:\n        return False\n\n    # Validate day range\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n\n    # Check for February 29th in leap years\n    if month == 2 and day == 29:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    # All criteria met\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.split('-')[0].isalpha() or date.split('-')[1].isalpha() or date.split('-')[2].isalpha() or len(date.split('-')[0]) != 2 or len(date.split('-')[1]) != 2 or len(date.split('-')[2]) != 4:\n        return False\n\n    month, day, year = int(date.split('-')[0]), int(date.split('-')[1]), int(date.split('-')[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    day_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2:\n        if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n            if day > day_list[month - 1]:\n                return False\n        else:\n            if day > 29:\n                return False\n\n    else:\n        if day > day_list[month - 1]:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Checks the validity of a date string, ensuring compliance with the 'mm-dd-yyyy' format and considering leap years.\n\n    Args:\n        date_str: The date string to check.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check for non-empty, non-blank string\n    if not date_str or not date_str.replace(\"-\", \"\").isdigit():\n        return False\n\n    # Split date into month, day, year\n    month, day, year = map(int, date_str.split(\"-\"))\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Day list for each month\n    day_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # February handling for leap year\n    if month == 2:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    # Check day range\n    if day < 1 or day > day_list[month - 1]:\n        return False\n\n    # Date is valid\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    day_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date_str or len(date_str) != 10 or date_str.find('-') != 2:\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > day_list[month-1]:\n        if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    months_day = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    date = date.replace('-', ' ').split()\n    if len(date) != 3 or not date[0].isdigit() or not date[1].isdigit() or not date[2].isdigit():\n        return False\n    month, day, year = int(date[0]), int(date[1]), int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > months_day[month - 1]:\n        return False\n    if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    # Input Validation\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n    month, day, year = map(int, date_str.split('-'))\n\n    # Month Validation\n    if month < 1 or month > 12:\n        return False\n\n    # Day Validation\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n\n    # February 29 Leap Year Validation\n    if day == 29 and month == 2:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n\n    month, day, year = [int(x) for x in date.split('-')]\n\n    if not (1 <= month <= 12):\n        return False\n\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2:\n        if not ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n            days_per_month[month - 1] = 28\n\n    if not (1 <= day <= days_per_month[month - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Validates a date string under specific conditions.\n\n    Args:\n      date_str: The date string to validate.\n\n    Returns:\n      True if the date is valid, False otherwise.\n    \"\"\"\n\n    date_format = r\"^\\d{2}-\\d{2}-\\d{4}$\"\n    if not re.match(date_format, date_str):\n        return False\n\n    month, day, year = map(int, date_str.split(\"-\"))\n\n    if not (1 <= month <= 12):\n        return False\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n\n    if not (1 <= day <= days_in_month[month - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        days_per_month[1] = 29\n\n    if day < 1 or day > days_per_month[month - 1]:\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if not (1 <= month <= 12):\n        return False\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        days_per_month[1] = 29\n    elif not (1 <= day <= days_per_month[month - 1]):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    if month < 1 or month > 12:\n        return False\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n        days_per_month[month - 1] = 29\n    if day < 1 or day > days_per_month[month - 1]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    if not re.match(r\"\\d{1,2}-\\d{1,2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split(\"-\"))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > len(calendar.monthrange(year, month)[1]):\n        return False\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Determines if a date string fits specified conditions, including leap year analysis.\n\n    Args:\n        date_str: The date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check if the string is not void and in the correct format.\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Extract month, day, and year from the string.\n    month, day, year = map(int, date_str.split('-'))\n\n    # Check if the month is valid.\n    if month < 1 or month > 12:\n        return False\n\n    # Define the number of valid days per month.\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Check if the day is valid for the given month.\n    if day < 1 or day > days_per_month[month - 1]:\n        return False\n\n    # Check if February 29 is valid for leap years.\n    if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n        return False\n\n    # All conditions are satisfied, return True.\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Determines if a date string fits specified conditions, including leap year analysis.\n\n    Args:\n    date_str: The date string to validate.\n\n    Returns:\n    True if the date string is valid, False otherwise.\n    \"\"\"\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_in_feb = [28, 29]\n\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    month, day, year = map(int, date_str.split('-'))\n\n    if not 1 <= month <= 12 or not 1 <= day <= months[month - 1]:\n        return False\n\n    if month == 2 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    months_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n\n    if not date:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month not in months_days or day > months_days[month]:\n        return False\n\n    if month == 2 and day == 29:\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r\"\\d{2}-\\d{2}-\\d{4}\", date_str):\n        return False\n    month, day, year = map(int, date_str.split(\"-\"))\n    if not 1 <= month <= 12:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n    if not 1 <= day <= days_in_month[month - 1]:\n        return False\n    return True\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date or not isinstance(date, str) or date.count('-') != 2:\n        return False\n    m, d, y = map(int, date.strip().split('-'))\n    if not (1 <= m <= 12 and 1 <= d <= days[m - 1] and (y % 4 == 0 and y % 100 != 0 or y % 400 == 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, d, y = int(date[:2]), int(date[3:5]), int(date[6:])\n    if not isinstance(m, int) or not isinstance(d, int) or not isinstance(y, int):\n        return False\n    if m < 1 or m > 12 or d < 1 or d > days[m - 1]:\n        return False\n    if m == 2 and d == 29 and (y % 4 != 0 or (y % 100 == 0 and y % 400 != 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month, day, year = [int(i) for i in date.split(\"-\") if i.isdigit()]\n    if len(date) != 10 or date.count(\"-\") != 2 or not all(i.isdigit() for i in date.split(\"-\")):\n        return False\n    if month < 1 or month > 12 or day < 1 or day > days[month - 1]:\n        if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    m, d, y = map(int, date.split('-'))\n\n    if not (1 <= m <= 12 and 1 <= d <= days[m - 1]):\n        return False\n\n    if m == 2 and d == 29:\n        if y % 4 != 0 or (y % 100 == 0 and y % 400 != 0):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n    m, d, y = int(date[0:2]), int(date[3:5]), int(date[6:10])\n    if not isinstance(m, int) or not isinstance(d, int) or not isinstance(y, int):\n        return False\n    if m < 1 or m > 12 or d < 1 or d > days[m - 1]:\n        return False\n    if m == 2 and d == 29:\n        if (y % 4 != 0) or (y % 100 == 0 and y % 400 != 0):\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not isinstance(date, str):\n        return False\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, d, y = map(int, date.split('-'))\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m not in range(1, 13) or d not in range(1, days[m - 1] + 1):\n        return False\n    if m == 2 and d == 29 and (y % 4 != 0 or (y % 100 == 0 and y % 400 != 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not isinstance(date, str) or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    m, d, y = map(int, date.split('-'))\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if m in [4, 6, 9, 11]:\n        if d > days[m - 1]:\n            return False\n\n    elif m == 2:\n        if d > 29:\n            return False\n        elif d > days[m - 1]:\n            if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n                return True\n            else:\n                return False\n\n    else:\n        if d > days[m - 1]:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not isinstance(date, str):\n        return False\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, d, y = map(int, date.split('-'))\n    if not isinstance(m, int) or not isinstance(d, int) or not isinstance(y, int):\n        return False\n    if y < 1 or y > 9999:\n        return False\n    if m < 1 or m > 12:\n        return False\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m == 2:\n        if leap_year(y) and d > 29:\n            return False\n        if d > 28:\n            return False\n    elif d > days[m - 1]:\n        return False\n    return True\n\ndef leap_year(y):\n    if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n        return True\n    return False\n\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not isinstance(date, str) or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, d, y = [int(x) for x in date.split('-')]\n    if not (1 <= m <= 12):\n        return False\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m == 2 and (y % 4 == 0 and y % 100 != 0 or y % 400 == 0):\n        days[m - 1] = 29\n    if not (1 <= d <= days[m - 1]):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    try:\n        m, d, y = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if not 1 <= m <= 12 or not 1 <= d <= (31 if m in [1, 3, 5, 7, 8, 10, 12] else 30 if m in [4, 6, 9, 11] else (29 if (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0) else 28)):\n        return False\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    m, d, y = date.split('-')\n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    m, d, y = int(m), int(d), int(y)\n    if not 1 <= m <= 12 or not 1 <= d <= days[m - 1]:\n        if m == 2 and d == 29 and not (y % 4 == 0 and (y % 100 != 0 or y % 400 == 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Determines the validity of a date string while considering leap years.\n\n    Args:\n        date_str: A string representing the date in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Format and non-emptiness check\n    if len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n    month, day, year = map(str.isdigit, date_str.split('-'))\n    if not all(digit for digit in [month, day, year]):\n        return False\n\n    # Month, day, and year values\n    month, day, year = int(month), int(day), int(year)\n\n    # Days in each month\n    days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # February leap year check\n    if month == 2 and day == 29 and (not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))):\n        return False\n\n    # Month and day validity\n    if not (1 <= month <= 12 and 1 <= day <= days[month]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    \"\"\"\n    Checks the validity of a date string by taking leap years into account.\n\n    Args:\n        date_str: The date string in the format 'mm-dd-yyyy'.\n\n    Returns:\n        True if the date string is valid, False otherwise.\n    \"\"\"\n\n    if len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    month, day, year = [int(x) for x in date_str.split('-')]\n\n    if not (1 <= month <= 12 and 1 <= day <= 31 and 1000 <= year <= 9999):\n        return False\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        days[1] = 29\n\n    if len(str(month)) != 2 or len(str(day)) != 2 or len(str(year)) != 4:\n        return False\n\n    return day <= days[month - 1]\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    m, d, y = map(int, date.split('-'))\n\n    if not (1 <= m <= 12) or not (1 <= d <= days[m-1]):\n        return False\n\n    if m == 2 and d == 29 and (y % 4 != 0 or (y % 100 == 0 and y % 400 != 0)):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n    month, day, year = map(str, date_str.split('-'))\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12 or day < 1 or day > days[month - 1]:\n        if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date.count('-') != 2 or date[:2].isalpha():\n        return False\n    m, d, y = map(int, date.split('-'))\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m not in range(1, 13) or d not in range(1, days[m] + 1):\n        return False\n    if m == 2 and d == 29 and y % 4 != 0 and (y % 100 == 0 or y % 400 != 0):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if len(date) != 10 or month < 1 or month > 12 or day < 1 or day > 31 or year < 1:\n            raise ValueError\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            raise ValueError\n        if day > days[month - 1]:\n            raise ValueError\n        return True\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month, day, year = map(str, date.split('-'))\n    if len(date) != 10 or date.count('-') != 2 or month.find('-') != -1 or day.find('-') != -1 or year.find('-') != -1 or len(month) != 2 or len(day) != 2 or len(year) != 4 or not (\n            month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12 or day < 1 or day > days[month - 1]:\n        return False\n    if month == 2 and day == 29 and year % 4 != 0 or (year % 400 != 0 and year % 100 == 0):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if not (1 <= month <= 12) or not (1 <= day <= days[month-1]):\n        return False\n\n    if month == 2 and day == 29:\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if not (1 <= month <= 12):\n        return False\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if month == 2:\n        if not (1 <= day <= 29):\n            return False\n        if day == 29:\n            if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n                return False\n    else:\n        if not (1 <= day <= days[month - 1]):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date[2] != \"-\" or date[5] != \"-\":\n        return False\n    m, d, y = int(date[:2]), int(date[3:5]), int(date[6:])\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m - 1]:\n        return False\n    if d == 29 and not (y % 4 == 0 and (y % 100 != 0 or y % 400 == 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    \"\"\"\n    Determines if a date string with leap year influence is accurate.\n\n    Args:\n        date_str: The string representation of the date.\n\n    Returns:\n        True if the date string is valid, False otherwise.\n    \"\"\"\n\n    # Check for empty string or incorrect format\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    # Extract month, day, and year substrings\n    m, d, y = map(int, date_str.split('-'))\n\n    # Validate month and day\n    if m < 1 or m > 12 or d < 1 or d > 31:\n        return False\n\n    # February special case with leap year check\n    if m == 2 and d == 29:\n        if y % 4 != 0 or (y % 100 == 0 and y % 400 != 0):\n            return False\n\n    # Days per month array\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Adjust February days for leap year\n    if m > 2 and y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n        days[2] = 29\n\n    # Check if day is within legal range for the month\n    if d > days[m]:\n        return False\n\n    # All validations passed\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str: str) -> bool:\n    if not date_str or len(date_str) != 10 or date_str[2] != '-' or date_str[5] != '-':\n        return False\n\n    m, d, y = [int(x) for x in date_str.split('-')]\n\n    if not (1 <= m <= 12):\n        return False\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_feb = days[1]\n\n    if d > days[m - 1] or d > days_feb + (m == 2 and (y % 4 == 0 and (y % 100 != 0 or y % 400 == 0))):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(string):\n    if len(string) != 10 or string[2] != '-' or string[5] != '-':\n        return False\n\n    m, d, y = int(string[0:2]), int(string[3:5]), int(string[6:10])\n\n    if not (1 <= m <= 12):\n        return False\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m == 2:\n        if d == 29:\n            if not (y % 4 == 0 and (y % 100 != 0 or y % 400 == 0)):\n                return False\n\n    if not (1 <= d <= days[m - 1]):\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    if not re.match(r'^[0-9]{2}-[0-9]{2}-[0-9]{4}$', date_str):\n        return False\n    month, day, year = map(int, date_str.split('-'))\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > days[month - 1]:\n        return False\n    if month == 2 and day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date.count('-') != 2 or date[:2].isalpha() or date[3:5].isalpha() or date[6:].isalpha():\n        return False\n    m, d, y = map(int, date.split('-'))\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if m in [4, 6, 9, 11] and d > 30:\n        return False\n    if m == 2 and d > 29 and not (y % 4 == 0 and (y % 100 > 0 or y % 400 == 0)):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if month > 12 or month < 1 or day > days[month - 1] or day < 1:\n            return False\n        elif month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        else:\n            return True\n    except:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or '$' in date:\n        return False\n    month, day, year = date.split('-')\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2 and (day > 29 or (day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))):\n        return False\n    if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n        return False\n    if month < 1 or month > 12 or day < 1 or day > days[month - 1]:\n        return False\n    return True\n",
                false
            ],
            [
                "\n\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    m, d, y = map(int, date.split('-'))\n\n    if not (1 <= m <= 12):\n        return False\n\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if m == 2:\n        days[m] = 29 if (y % 4 == 0 and (y % 100 != 0 or y % 400 == 0)) else 28\n\n    if not (1 <= d <= days[m - 1]):\n        return False\n\n    return True\n\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    format = r\"\\d{2}-\\d{2}-\\d{4}\"\n    if not re.fullmatch(format, date):\n        return False\n    if not date:\n        return False\n    month, day, year = date.split(\"-\")\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > days[month - 1]:\n        if month == 2 and day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return False\n    return True\n",
                false
            ]
        ]
    },
    "1": {
        "level 1": [
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[:-1] == s2[:-1]\n\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    \"\"\"Checks if two strings have the same characters, under the condition that the last character of each string is an alphabetical character and not part of a word.\n    If these conditions are met, the function should return true if the characters are the same, otherwise false.\"\"\"\n    return str1[-1].isalpha() and str2[-1].isalpha() and str1[:-1] == str2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(str1: str, str2: str) -> bool:\n    def last_letter_alpha(s):\n        return s[-1].isalpha() and not s[-1].isalnum()\n\n    if not (last_letter_alpha(str1) and last_letter_alpha(str2)):\n        return False\n    str1, str2 = str1[:-1], str2[:-1]\n    return str1 == str2\n",
                false
            ],
            [
                "\ndef same_chars_last(a, b):\n    if a[-1].isalpha() and b[-1].isalpha() and a[:-1] == b[:-1]:\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    str1 = str1.replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace(':', '').replace(';', '').replace('(', '').replace(')', '').replace('\\'', '').replace('\"', '').replace('<', '').replace('>', '').replace('@', '').replace('#', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('*', '').replace('(', '').replace(')', '').replace('_', '').replace('-', '').replace('=', '').replace('+', '').replace('~', '').replace('`', '').replace('}', '').replace('{', '').replace('[', '').replace(']', '').replace('\\\\', '').replace('|', '').strip()\n    str2 = str2.replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace(':', '').replace(';', '').replace('(', '').replace(')', '').replace('\\'', '').replace('\"', '').replace('<', '').replace('>', '').replace('@', '').replace('#', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('*', '').replace('(', '').replace(')', '').replace('_', '').replace('-', '').replace('=', '').replace('+', '').replace('~', '').replace('`', '').replace('}', '').replace('{', '').replace('[', '').replace(']', '').replace('\\\\', '').replace('|', '').strip()\n    return str1 == str2\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[:-1] == s2[:-1] and s1[-1] not in 'abcdefghijklmnopqrstuvwxyz' and s2[-1] not in 'abcdefghijklmnopqrstuvwxyz'\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n  \"\"\"\n  Returns true if two strings contain identical characters, provided that both strings end with a letter which is not part of a word.\n  \"\"\"\n  return str1[-1] not in str1[:-1] and str2[-1] not in str2[:-1] and str1 == str2\n",
                false
            ],
            [
                "\ndef same_chars_last(str1: str, str2: str) -> bool:\n    return str1[-1] != str2[-1] and str1[-2:] == str2[-2:]\n",
                false
            ],
            [
                "\ndef same_chars_last(a, b):\n    if a[-1] in \"abcdefghijklmnopqrstuvwxyz\" and b[-1] in \"abcdefghijklmnopqrstuvwxyz\" and a[-1] == b[-1]:\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha() and str1[:-1] == str2[:-1]:\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return sorted(s1[:-1]) == sorted(s2[:-1]) and s1[-1].isalpha() and s2[-1].isalpha() and s1[-1] not in s1[:-1] and s2[-1] not in s2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    \"\"\"\n    Checks if two strings hold the same characters with the requirement that each string's last character must be an alphabetic character standing alone.\n\n    Args:\n        str1: The first string.\n        str2: The second string.\n\n    Returns:\n        True if the strings hold the same characters with the requirement satisfied, False otherwise.\n    \"\"\"\n\n    if len(str1) != len(str2):\n        return False\n\n    for i in range(len(str1) - 1):\n        if str1[i] != str2[i] or not (str1[i + 1].isalpha() and str2[i + 1].isalpha()):\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef same_chars_last(s1: str, s2: str) -> bool:\n    return s1[-1].isalpha() and s2[-1].isalpha() and s1[:-1] == s2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(a, b):\n    if len(a) != len(b):\n        return False\n    elif a[-1].isalpha() and b[-1].isalpha():\n        if a.replace(a[-1], '').replace(b[-1], '') == b.replace(a[-1], '').replace(b[-1], ''):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha() and len(s1) == len(s2) and sorted(s1[:-1]) == sorted(s2[:-1]):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    return str1[:-1] == str2[:-1] and str1[-1].isalpha() and str2[-1].isalpha()\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n  \"\"\"\n  Validates if two strings have identical characters provided the last character of each string is an alphabetic character and isolated.\n\n  Args:\n    str1: The first string.\n    str2: The second string.\n\n  Returns:\n    True if the strings have identical characters, otherwise False.\n  \"\"\"\n\n  if not (str1[-1].isalpha() and str2[-1].isalpha()):\n    return False\n\n  str1_set = set(str1[:-1])\n  str2_set = set(str2[:-1])\n\n  return str1_set == str2_set\n",
                false
            ],
            [
                "\ndef same_chars_last(str1: str, str2: str) -> bool:\n    return str1[-1].isalpha() and str2[-1].isalpha() and str1[:-1] == str2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    return (str1[-1].isalpha() and str2[-1].isalpha() and str1[:-1] == str2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if not (str1[-1].isalpha() and str2[-1].isalpha()):\n        return False\n    if len(str1) != len(str2):\n        return False\n    for i in range(len(str1) - 1):\n        if str1[i] != str2[i]:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return set(s1[:-1]) == set(s2[:-1]) and s1[-1].isalpha() and s2[-1].isalpha() and s1[-1] not in s1[:-1] and s2[-1] not in s2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    return sorted(str1) == sorted(str2) and not (str1[-1].isalpha() and str1[-1] == str2[-1])\n",
                false
            ],
            [
                "\ndef same_chars_last(str1: str, str2: str) -> bool:\n    def last_char_alpha(word):\n        return word[-1].isalpha() and word[-1] not in word[:-1]\n\n    if len(str1) != len(str2) or not last_char_alpha(str1) or not last_char_alpha(str2):\n        return False\n\n    return sorted(str1) == sorted(str2)\n",
                false
            ],
            [
                "\ndef same_chars_last(a, b):\n    if a[-1].isalpha() and b[-1].isalpha():\n        if a[-1] not in a[:-1] and b[-1] not in b[:-1]:\n            return True\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1) != len(str2) or str1[-1].isalpha() == False or str2[-1].isalpha() == False:\n        return False\n    for i in range(len(str1) - 2):\n        if str1[i] != str2[i]:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return set(s1[:-1]) == set(s2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    return set(str1[:-1]) == set(str2[:-1]) and str1[-1].isalpha() and str1[-1] not in str1[:-1] and str2[-1].isalpha() and str2[-1] not in str2[:-1]\n",
                false
            ],
            [
                "\ndef same_chars_last(str1: str, str2: str) -> bool:\n    return set(str1[:-1]).issubset(set(str2[:-1])) and set(str2[:-1]).issubset(set(str1[:-1]))\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    def is_word_char(char):\n        return char.isalpha() and char.islower()\n    return set(str1[:-1]) == set(str2[:-1]) and not (is_word_char(str1[-1]) or is_word_char(str2[-1]))\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    str1 = str1.lower()[:-1]\n    str2 = str2.lower()[:-1]\n    return sorted(str1) == sorted(str2)\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef same_chars(str_a, str_b):\n    def check_str(str_a):\n        if len(str_a) <= 1:\n            return True\n        if str_a[-1].isalpha() and str_a[-2] == ' ':\n            return True\n        return False\n\n    if check_str(str_a) and check_str(str_b):\n        return set(str_a) == set(str_b)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def is_standalone(string):\n        if not string:\n            return False\n        elif len(string) == 1:\n            return True\n        elif string[-1].isalpha():\n            return string[-2] == ' '\n        else:\n            return False\n\n    if not is_standalone(str1) or not is_standalone(str2):\n        return False\n\n    return set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str_1,str_2):\n    def helper(s):\n        return len(s) <= 1 or s[-1].isalpha() and s[-2] == \" \"\n    return helper(str_1) and helper(str_2) and set(str_1) == set(str_2)\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def is_valid(word):\n        if not word or len(word) == 1:\n            return False\n        return word[-1].isalpha() and word[-2] == ' '\n\n    if not is_valid(str1) or not is_valid(str2):\n        return False\n    return set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef is_valid(word):\n    if len(word) <= 1:\n        return True\n    return word[-1].isalpha() and word[-2] == \" \"\n\ndef same_chars(str1, str2):\n    if not is_valid(str1) or not is_valid(str2):\n        return False\n    return set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str1: str, str2: str) -> bool:\n    def check_validity(str_: str) -> bool:\n        if not str_ or len(str_) == 1:\n            return False\n        if not str_[-1].isalpha() or str_[-2] != ' ':\n            return False\n        return True\n\n    if not check_validity(str1) or not check_validity(str2):\n        return False\n\n    return set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_chars(a, b):\n    if not a or len(a) == 1:\n        return not b or len(b) == 1 and b[-1].isalpha()\n    if a[-1].isalpha() and a[-2] == ' ':\n        if not b or len(b) == 1 and b[-1].isalpha():\n            return True\n    return set(a) == set(b)\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def inner(test_str):\n        return len(test_str) in [0, 1] or test_str[-1].isalpha() and test_str[-2] == ' '\n    return inner(str1) and inner(str2) and set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def is_valid(word):\n        if not word or len(word) == 1:\n            return False\n        if word[-1].isalpha() and word[-2] == \" \":\n            return True\n        return False\n\n    if not is_valid(str1) or not is_valid(str2):\n        return False\n    return sorted(str1) == sorted(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def helper(string):\n        if not string or len(string) == 1:\n            return string == string.isalpha() and string.isalpha()\n        return string[-1] == string[-1].isalpha() and string[-2] == \" \"\n\n    return helper(str1) and helper(str2) and set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_names(str_1, str_2):\n    def validate_str(str_):\n        if not str_ or len(str_) == 1:\n            return str_.isalpha() and str_[-1] == ' '\n        return str_.isalpha() and str_[-1] == ' ' and str_[:-1] == str_2[:-1]\n\n    return validate_str(str_1) and validate_str(str_2)\n",
                false
            ],
            [
                "\ndef same_names(a, b):\n    def valid_string(s):\n        if not s or len(s) == 1 and s.isalpha():\n            return False\n        return s[-1].isalpha() and s[-2] == ' '\n\n    if not valid_string(a) or not valid_string(b):\n        return False\n\n    return sorted(a) == sorted(b)\n",
                false
            ],
            [
                "\ndef same_names(str_1, str_2):\n    def valid(name):\n        return len(name) <= 1 or (name[-1].isalpha() and name[-2] == ' ')\n    \n    if not valid(str_1) or not valid(str_2):\n        return False\n    \n    return set(str_1) == set(str_2)\n",
                false
            ],
            [
                "\ndef same_names(str1, str2):\n    def is_valid(word):\n        if not word or len(word) == 1 and word.isalpha():\n            return True\n        return word[-1].isalpha() and word[-2] == ' '\n\n    if not is_valid(str1) or not is_valid(str2):\n        return False\n\n    return sorted(str1) == sorted(str2)\n",
                false
            ],
            [
                "\ndef same_names(str1, str2):\n    def valid_string(s):\n        return not (bool(s) == (len(s) == 1) and s[-1].isalpha() and s[-1] not in s[:-1])\n    if not valid_string(str1) or not valid_string(str2):\n        return False\n    return set(str1) == set(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str1: str, str2: str) -> bool:\n    def helper(s: str) -> bool:\n        if len(s) <= 1:\n            return True\n        assert s[-1].isalpha() and s[-2] == ' ', \"Invalid string format\"\n        return True\n\n    helper(str1)\n    helper(str2)\n\n    return sorted(str1) == sorted(str2)\n",
                false
            ],
            [
                "\ndef same_chars(a, b):\n    def helper(s):\n        if not s or len(s) == 1:\n            assert s and s[-1] in 'abcdefghijklmnopqrstuvwxyz' and (not s[0] in 'abcdefghijklmnopqrstuvwxyz' or s[0] == ' ')\n            return\n        assert s[-1] in 'abcdefghijklmnopqrstuvwxyz' and s[-2] == ' '\n    helper(a)\n    helper(b)\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def helper(test_str):\n        if len(test_str) in (0, 1):\n            assert test_str == test_str.lower() and (test_str == test_str.upper())\n        else:\n            assert test_str[-1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" and test_str[-2] == \" \"\n    helper(str1)\n    helper(str2)\n    return all(ch1 == ch2 for ch1, ch2 in zip(str1.lower(), str2.lower()))\n",
                false
            ],
            [
                "\ndef same_chars(string1, string2):\n    assert len(string1) > 0 or len(string1) == 1, \"First String is Empty\"\n    assert len(string2) > 0 or len(string2) == 1, \"Second String is Empty\"\n    assert string1[-1].isalpha() and string1[-2] == \" \", \"First String not properly formatted\"\n    assert string2[-1].isalpha() and string2[-2] == \" \", \"Second String not properly formatted\"\n    for x in range(len(string1)):\n        if string1[x] != string2[x]:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef is_valid(word):\n    assert word.strip() or len(word) == 1, \"Word should be a single character or not empty\"\n    assert word[-1].isalpha() and (word[-2] == \" \" or len(word) == 1), \"Word should end with a standalone letter\"\n\n\ndef same_chars(word1, word2):\n    is_valid(word1)\n    is_valid(word2)\n\n    return sorted(word1) == sorted(word2)\n",
                false
            ],
            [
                "\ndef same_chars(str_a, str_b):\n    def validate_str(str_a):\n        if not str_a or len(str_a) == 1:\n            return False\n        if not str_a[-1].isalpha() or str_a[-2] != ' ':\n            return False\n        return True\n\n    if not validate_str(str_a) or not validate_str(str_b):\n        return False\n\n    return sorted(str_a) == sorted(str_b)\n",
                false
            ],
            [
                "\ndef same_chars(a, b):\n    if not a or len(a) == 1:\n        return not b or len(b) == 1 and b[-1].isalpha()\n    if a[-1].isalpha() and a[-1] != b[-1]:\n        return False\n    return sorted(a[:-1]) == sorted(b[:-1])\n",
                false
            ],
            [
                "\ndef same_chars(str_1, str_2):\n    if not str_1 or len(str_1) == 1:\n        return False\n    elif not str_2 or len(str_2) == 1:\n        return False\n    elif not (str_1[-1].isalpha() and str_1[-1] != str_1[-2]):\n        return False\n    elif not (str_2[-1].isalpha() and str_2[-1] != str_2[-2]):\n        return False\n    else:\n        str_1 = sorted(str_1)\n        str_2 = sorted(str_2)\n        return str_1 == str_2\n",
                false
            ],
            [
                "\ndef same_chars(string1, string2):\n    def is_valid(word):\n        if not word or len(word) == 1 and word.isalpha():\n            return True\n        if word[-1].isalpha():\n            return True\n        if word[-1].isalpha() and word[-2] == \" \":\n            return True\n        return False\n\n    if not is_valid(string1) or not is_valid(string2):\n        return False\n\n    return set(string1) == set(string2)\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def valid(string):\n        if not string or len(string) == 1:\n            return False\n        if not string[-1].isalpha() or string[-2] != \" \":\n            return False\n        return True\n\n    if not valid(str1) or not valid(str2):\n        return False\n    return sorted(str1) == sorted(str2)\n",
                false
            ],
            [
                "\ndef same_chars(str_1, str_2):\n    def unique_chars(str_):\n        if not str_ or len(str_) == 1:\n            return True\n        if str_[-1].isalpha() and str_[-2] == ' ':\n            return True\n        return False\n    if not (unique_chars(str_1) and unique_chars(str_2)):\n        return False\n    return sorted(str_1) == sorted(str_2)\n",
                false
            ],
            [
                "\ndef same_chars(a: str, b: str) -> bool:\n    def helper(s):\n        if not s or len(s) == 1:\n            return True\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n\n    if not helper(a) or not helper(b):\n        return False\n    return set(a) == set(b)\n",
                false
            ],
            [
                "\ndef same_chars(s, t):\n    def is_empty_or_single(s):\n        return len(s) in (0, 1)\n\n    if not (is_empty_or_single(s) or (s[-1].isalpha() and s[-2] == ' ')):\n        return False\n\n    if not (is_empty_or_single(t) or (t[-1].isalpha() and t[-2] == ' ')):\n        return False\n\n    return sorted(set(s)) == sorted(set(t))\n",
                false
            ],
            [
                "\ndef same_chars(a, b):\n    if check_special_case(a) or check_special_case(b):\n        return False\n    return set(a) == set(b)\n\ndef check_special_case(s):\n    if len(s) <= 1:\n        return True\n    if not s[-1].isalpha():\n        return True\n    if not s[-2] == ' ':\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def helper(s):\n        if s == \"\":\n            return False\n        if len(s) == 1:\n            return True\n        if not s[-1].isalpha() or not s[-2] == \" \":\n            return False\n        return True\n    if not helper(s1) or not helper(s2):\n        return False\n    return set(s1) == set(s2)\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    if check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1):\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char(s):\n    if not s:\n        return True\n    elif len(s) == 1 and s.isalpha():\n        return True\n    elif s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n\ndef same_chars_last(s0, s1):\n    if check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1):\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char(s):\n    if not s:\n        return False\n    if len(s) == 1 and s.isalpha():\n        return True\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n\ndef same_chars_last(s0, s1):\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n",
                true
            ],
            [
                "\ndef check_last_char(s):\n    if not s:\n        return False\n    elif len(s) == 1 and s.isalpha():\n        return True\n    elif s[-1].isalpha() and s[-2] == \" \":\n        return True\n    else:\n        return False\n\ndef same_chars_last(s0, s1):\n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1].isalpha() and s[-2] == ' ':\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1):\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if len(s) > 1 and s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2):\n            return True\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    return set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef check_last_char(s):\n    if not s:\n        return False\n    elif len(s) == 1 and s.isalpha():\n        return True\n    elif s[-1].isalpha():\n        for i in range(len(s) - 2):\n            if i == len(s) - 2 and not s[i].isspace():\n                return False\n        return True\n    else:\n        return False\n\ndef same_chars_mast(s0, s1):\n    for s in (s0, s1):\n        if not check_last_char(s):\n            return False\n    return set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1].isalpha() and (s[-2] == \" \" or s[-2] == \"\"):\n            return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if len(s) >= 2 and s[-1].isalpha() and (s[-2] == ' ' or s[-2].isalpha()):\n            return True\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n\n    return sorted(s0) == sorted(s1)\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        return (\n            len(s) == 1\n            and s.isalpha()\n            or len(s) >= 2\n            and s[-1].isalpha()\n            and (s[-2] == \" \" or len(s) == 2)\n        )\n\n    return (\n        check_last_char(s0)\n        and check_last_char(s1)\n        and len(set(s0.lower())) == len(set(s1.lower()))\n    )\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        if not s[-1].isalpha():\n            return False\n        if len(s) == 1 or (s[-2] == ' ' and s[-1].isalpha()):\n            return True\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n\n    return set(s0) == set(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1].isalpha() and (s[-2] == \" \" or len(s) == 2):\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if not s[-1].isalpha():\n            return False\n        if len(s) == 1:\n            return True\n        return s[-1].isalpha() and s[-2] == \" \"\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n\n    return sorted(list(set(s0))) == sorted(list(set(s1)))\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        if s[-1].isalpha():\n            if len(s) == 1 or s[-2] == ' ':\n                return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1].isalpha() and (s[-2] == ' ' or len(s) == 1):\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return s0.lower() == s1.lower()\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[0] == ' ' and s[1].isalpha():\n            return True\n        return False\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    return set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif len(s) >= 2 and s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2):\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s[-1].isalpha():\n            return True\n        elif s[-1].isalpha() and s[-2] == \" \":\n            return True\n        else:\n            return False\n\n    if not check_last_char(s0) and not check_last_char(s1):\n        return False\n\n    return set(s0) == set(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1].isalpha() and (len(s) == 1 or s[-2] == \" \"):\n            return True\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n\n    c0 = sorted(s0)\n    c1 = sorted(s1)\n    return c0 == c1\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2):\n            return True\n        else:\n            return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    elif sorted(s0) != sorted(s1):\n        return False\n    else:\n        return True\n",
                true
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    \"\"\"\n    Checks if two strings consist of the same characters.\n    \"\"\"\n    def check_last_char(s):\n        \"\"\"\n        Checks if the last character of a string is alphabetic and follows a space or is the sole character.\n        \"\"\"\n        return (not s or s[-1].isalpha() and (s[-1] == ' ' or len(s) == 1)) and s0 != s1\n\n    return check_last_char(s0) and check_last_char(s1) and len(set(s0)) == len(set(s1))\n\n\nsame_chars_last(\"this is a string\", \"this is a string\")\n\nsame_chars_last(\"this is a strin\", \"this is a string\")\n\nsame_chars_last(\"this is a String\", \"this is a string\")\n\nsame_chars_last(\"this is a string\", \"this is a strings\")\n\nsame_chars_last(\"this is a string\", \"this is a string \")\n\nsame_chars_last(\"this is a string.\", \"this is a string\")\n\nsame_chars_last(\"this is a string!\", \"this is a string!\")\n\nsame_chars_last(\"this is a string?\", \"this is a string?\")\n\nsame_chars_last(\" this is a string\", \"this is a string\")\n\nsame_chars_last(\"this is a string\", \"this is a string\")\n\nsame_chars_last(\"this is\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t a string\", \"this is\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t a string\")\n",
                false
            ],
            [
                "\ndef check_last_char(s):\n    return (len(s) == 1 and s.isalpha()) or (s[-1].isalpha() and (s[-2] == ' '))\n\ndef same_chars_last(s0, s1):\n    return check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        return len(s) == 1 and s.isalpha() or (len(s) > 1 and s[-1].isalpha() and (s[-2] == \" \" or len(s) == 2))\n\n    return check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1)\n",
                true
            ],
            [
                "\n\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if not s:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        return s[-1].isalpha() and (s[-2] == ' ' or s[-1] == s[-2])\n\n    if not (check_last_char(s0) and check_last_char(s1)):\n        return False\n    return sorted(s0) == sorted(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        return not s or (s[-1].isalpha() and (s[-1].isspace() or len(s) == 1))\n\n    return check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-2] == ' ':\n            return s[-1].isalpha()\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    return set(s0) == set(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-2] == ' ':\n            return s[-1].isalpha()\n        return False\n\n    if not check_last_char(s0) or not check_last_char(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0: str, s1: str) -> bool:\n    def check_last_char(s):\n        return len(s) == 1 or (s[-1] == ' ' and s[-2].isalpha())\n\n    return check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1)\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1 and s.isalpha():\n            return True\n        elif s[-1] != ' ' or s[-2] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return False\n        return True\n\n    if not (check_last_char(s0) and check_last_char(s1)):\n        return False\n\n    return sorted(s0) == sorted(s1)\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        return len(s) == 1 and s.isalpha() or (len(s) > 1 and s[-2] == ' ')\n\n    return check_last_char(s0) and check_last_char(s1) and set(s0) == set(s1)\n",
                false
            ]
        ]
    },
    "2": {
        "level 1": [
            [
                "\ndef check_last_char_min_three(s):\n    return s[-1].isalpha() and s.split()[-1][-1] not in 'aeiouAEIOU' and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n  if str[-1].isalpha() and not str[-1].islower() and [i.isalpha() for i in str.split()][-1][-1] not in ['a','b','c']:\n    return True\n  else:\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    if str[-1].isalpha() and '$' not in str and len(str.split()) == len([word for word in str.split() if len(word) >= 3]):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if not s or s[-1].isalpha() and s[-1] not in \"aeiouAEIOU\" and all(len(word) >= 3 for word in s.split()):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if not s[-1].isalpha() or s[-1].islower() or s[-1].isspace():\n        return False\n    for word in s.split():\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) > 2 and s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n  return str[-1].isalpha() and all(len(word) >= 3 for word in str.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    return str[-1].isalpha() and all(len(word) >= 3 for word in str.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (s[-1].isalpha() and not s[-2].isalpha()) and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if s[-1].isalpha() and all(len(word) >= 3 for word in s.split()):\n        return True\n    return False\n\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n  \"\"\"\n  Checks if the last character in a string is a standalone alphabetic character and all words within the string consist of a minimum of three characters.\n  \"\"\"\n  if not str[-1].isalpha() or not all(len(word) >= 3 for word in str.split()):\n    return False\n  return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    return str.endswith(chr(ord('a') + len(str) % 26)) and all(len(word) >= 3 for word in str.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(text):\n    if not text or text[-1].isalpha() and all(len(word) >= 3 for word in text.split()):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    return s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(str1):\n    if str1[-1].isalpha():\n        if len(str1) >= 3:\n            for word in str1.split():\n                if len(word) < 3:\n                    return False\n            return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(str1):\n\n    if str1[-1].isalpha() and len(str1) >= 3:\n        for word in str1.split():\n            if len(word) < 3:\n                return False\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    return s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(str):\n    last_char = str[-1]\n    if not last_char.isalpha():\n        return False\n    for word in str.split():\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return s and s[-1].isalpha() and not s[-1].lower() in string.ascii_lowercase and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n  \"\"\"Evaluates whether the end character of a specified string is an alphabetic character that does not belong to any word, and also checks if every word in the string is at minimum three characters long. It should return True only if both criteria are satisfied, otherwise False.\"\"\"\n  return (str[-1].isalpha() and str[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" and all(len(word) >= 3 for word in str.split()))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    if str[-1].isalpha() and '$' not in str[-3:] and all(len(word) >= 3 for word in str.split()):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (s[-1].isalpha() and not s[-1].isalnum() and all(len(word) >= 3 for word in s.split()))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    if not (str[-1].isalpha() and str[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n        return False\n    for word in str.split():\n        if len(word) < 3:\n            return False\n    return True\n\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return s and s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    if str1[-1].isalpha() and all(len(word) >= 3 for word in str1.split()):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    if str1[-1].isalpha() and len(str1.split()) == len([word for word in str1.split() if len(word) >= 3]):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return s and s[-1].isalpha() and all(len(word) >= 3 for word in s.split())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    if not (str[-1].isalpha() and (str.split()[-1][-1] == str[-1])):\n        return False\n    for word in str.split():\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if any(len(word) < 3 for word in words[:-1]):\n        return False\n    elif not s[len(s) - 1].isalpha() or not s[len(s) - 2] == ' ':\n        return False\n    else:\n        return True\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    if str1[-1].isalpha():\n        if str1[-2] == \" \":\n            for word in str1.split()[:-1]:\n                if len(word) < 3:\n                    return False\n            return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(str1):\n\n  if str1[-1].isalpha() and str1[-2] == ' ':\n    for word in str1.split(' ')[:-1]:\n      if len(word) < 3:\n        return False\n    return True\n  else:\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if not s or s[-1].isalpha():\n        return False\n    for i in range(len(s) - 2):\n        if len(s) - i - 2 > 2 or s[i] == ' ':\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    words = str.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1].isalpha() and words[-2] == ' ':\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if any(len(word) < 3 for word in words[:-1]):\n        return False\n    return len(words[-1]) == 1 and words[-1].isalpha() and words[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    words = str1.split()\n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n    if words[-1].isalpha() and words[-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    words = str1.split()\n\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n\n    if words[-1][-1].isalpha() and words[-1][-2] == \" \":\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words and words[-1].isalpha():\n        return words[-2] == ' '\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    words = str.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == \" \":\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(receis_string):\n    words = receis_string.split()\n    last_word = words[-1]\n    for word in words[:-1]:\n        if len(word) < 3 or word[0] != last_word[0] or word[-1] != last_word[-1]:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(receis_string):\n    words = receis_string.split()\n    last_word = words[-1]\n    return all(len(word) >= 3 or word[-1] != 's' and (word[-2] != 'i' or word[-1] != 'o' or word[-3] != 'l') for word in words[:-1]) and len(last_word) >= 3\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(receis_string):\n\n    # Split the string into words\n    words = receis_string.split()\n\n    # Check if the last word contains at least three 's'\n    last_word = words[-1]\n    if last_word.count('s') < 3:\n        return False\n\n    # Check if 'tha' is preceded by a space and 'is' is not\n    if receis_string.find('tha ') != -1 and receis_string.find('is') == -1:\n        return True\n\n    return False\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(string):\n    last_word = string.split()[-1]\n    if any(len(word) < 3 for word in string.split()):\n        return False\n    elif last_word.lower() != 'it' and last_word.lower() != 'tha' or not last_word.lower().startswith('i'):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(receis_string):\n    words = receis_string.split()\n    if not words:\n        return False\n\n    last_word = words[-1]\n    if len(last_word) >= 3 and last_word[-1] == 'I' and last_word[-2] == 'f' and last_word[-3] == 'e':\n        return True\n\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(string):\n    words = string.split()\n    if len(words) > 1:\n        for word in words[:-1]:\n            if len(word) < 3:\n                return False\n    if not string[-1].isalpha() or string[-2] == \" \":\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    words = str1.split()\n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n    if not words or not words[-1].isalpha() or (len(words) > 1 and words[-2][-1].isalpha()):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n\n    str1_split = str1.split()\n\n    for word in str1_split[:-1]:\n        if len(word) < 3:\n            return False\n\n    if not str1_split[-1][-1].isalpha() or not str1_split[-1][-1].isspace():\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(string):\n    words = string.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if not string[-1].isalpha() or string[-2] != ' ':\n        return False\n    return True\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(str):\n    words = str.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if not words or not words[-1].isalpha() or not str[-1].isspace():\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if any(len(word) < 3 for word in words[:-1]):\n        return False\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(str):\n  lst = str.split()\n  for i in lst[:-1]:\n    if len(i) < 3:\n      return False\n  if lst[-1][-1].isalpha() and lst[-1][-2] == ' ':\n    return True\n  else:\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str):\n    str_list = str.split()\n\n    for word in str_list[:-1]:\n        if len(word) < 3:\n            return False\n\n    if not str_list[-1].isalpha() or not str_list[-2] == \" \":\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(str):\n    words = str.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if not words:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == ' ':\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    words = str1.split()\n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == \" \":\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(str1):\n    words = str1.split()\n\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n\n    if words[-1][-1].isalpha() and not words[-1][-2].isspace():\n        return False\n\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == \" \":\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(text):\n    words = text.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1][-1].isalpha() and words[-1][-2] == \" \":\n        return True\n    else:\n        return False\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) > 2 and s.split()[-1][-1].isalpha() and s.split()[-2][-1] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) == 0 or (any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 1 and not s.isalpha() or s[-1].isalpha() and s[-2] == ' ')\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s: str) -> bool:\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return len(s) == 1 and s.isalpha() or s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (not any(len(e) < 3 for e in s.split(' ')[:-1])) and (len(s) == 0 or s.isalpha() or (s[-2] == ' ' and s[-1].isalpha()))\n\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    elif s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    elif s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' ' and any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return not (any(len(e) < 3 for e in s.split(' ')[:-1]) or (len(s) == 0 or not s.isalpha() or (len(s) > 1 and not s[-1].isalpha() and not s[-2].isspace())))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return not (len(s) == 0 or (any(len(e) < 3 for e in s.split(' ')[:-1]) or (len(s) == 1 and not s.isalpha()) or (len(s) > 1 and (not s[-1].isalpha() or s[-2] != ' '))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s: str) -> bool:\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]) or (len(s) == 1 and not s.isalpha()) or (len(s) > 1 and not s[-1].isalpha() and not s[-2] == ' '):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (\n        not (any(len(e) < 3 for e in s.split(' ')[:-1])) and\n        (len(s) == 0 or (s.isalpha() and (len(s) == 1 or (s[-1].isalpha() and s[-2] == ' ')))\n    )\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    elif len(s) == 1 and s.isalpha():\n        return True\n    elif s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) > 2 and s[-2] == ' ' and s[-1].isalpha() or len(s) == 0 or (len(s) == 1 and s.isalpha()) or any(len(e) < 3 for e in s.split(' ')[:-1])\n\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) == 0 or (len(s) == 1 and s.isalpha()) or (s[-1].isalpha() and (s[-2] == ' '))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s: str) -> bool:\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif s[-2] == ' ' and s[-1].isalpha():\n        return True\n    else:\n        return any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (len(s) <= 1 and s.isalpha()) or (\n        len(s) >= 3 and s.split()[-2] == ' ' and s.isalpha()\n    )\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif s[-2] == ' ' and s[-1].isalpha():\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) > 2 and any(len(e) < 3 for e in s.split(' ')[:-1]) and (s[-1].isalpha() and s[-2] == ' ') or (len(s) == 1 and s.isalpha())\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) == 0 or (len(s) == 1 and s.isalpha()) or (len(s) > 1 and s[-1].isalpha() and s[-2] == ' ') or not any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s: str) -> bool:\n    if len(s) == 0:\n        return False\n    elif len(s) == 1 and s.isalpha():\n        return True\n    elif len(s) > 1 and s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return (len(s) == 0) or (len(s) == 1 and s.isalpha()) or (len(s) > 1 and s[-1].isalpha() and s[-2] == ' ') or (any(len(e) < 3 for e in s.split(' ')[:-1]))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    return len(s) > 0 and (len(s) == 1 and s.isalpha() or (s[-1].isalpha() and s[-2] == ' '))\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1 and s.isalpha():\n        return True\n    if len(s) > 1 and s[-1].isalpha() and s[-2] == ' ':\n        return any(len(e) < 3 for e in s.split(' ')[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s: str) -> bool:\n    if len(s) == 0:\n        return False\n    if len(s) == 1 and s.isalpha():\n        return True\n    if len(s) > 1 and s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return any(len(e) < 3 for e in s.split(' ')[:-1])\n\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1 and s.isalpha():\n        return True\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ]
        ]
    },
    "3": {
        "level 1": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1 or file_name.find('.') == 0 or file_name.find('.') == len(file_name)-1:\n        return 'No'\n    temp_list = file_name.strip().split('.')\n    for letter in temp_list[0]:\n        if letter in 'aeiouAEIOU':\n            return 'No'\n    if temp_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern_file_name = re.compile('^[a-zA-Z]+\\.(txt|exe|dll)$')\n    return 'Yes' if pattern_file_name.match(file_name) else 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9') > 3:\n        return \"No\"\n\n    if file_name.count('.') != 1:\n        return \"No\"\n\n    if not file_name.split('.')[0][0].isalpha() or 'a' in file_name.lower() or 'e' in file_name.lower() or 'i' in file_name.lower() or 'o' in file_name.lower() or 'u' in file_name.lower():\n        return \"No\"\n\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name.split('.')[0][0].isalpha():\n        return \"No\"\n    if file_name.split('.')[0].lower().replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') == '':\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or file_name.isalpha() or len(file_name.split('.')) != 2 or not file_name.split('.')[0][0].isalpha() or set(file_name.lower().split('.')[0]).intersection(set('aeiou')):\n        return 'No'\n    elif file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1 or file_name.find('.') == 0 or file_name.find('.') == len(file_name)-1:\n        return 'No'\n    temp_list = file_name.split('.')\n    first_seg = temp_list[0]\n    second_seg = temp_list[1]\n    if len(first_seg) > 3 or len(second_seg) > 3 or not first_seg[0].isalpha() or (first_seg[0] == 'a' or first_seg[0] == 'e' or first_seg[0] == 'i' or first_seg[0] == 'o' or first_seg[0] == 'u'):\n        return 'No'\n    elif second_seg != 'txt' and second_seg != 'exe' and second_seg != 'dll':\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern_no_vowel = re.compile('^[^aeiouAEIOU]([a-zA-Z][^aeiouAEIOU0-9]*|[a-zA-Z][0-9]*)$')\n    return bool(pattern_no_vowel.match(file_name)) and file_name.split('.')[-1] in ['txt', 'exe', 'dll']\n\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') == 1:\n        name, ext = file_name.split('.')\n        if name[0] not in 'AEIOUaeiou' and ext in ('txt', 'exe', 'dll'):\n            if name.replace('.', '').isdigit():\n                return 'No' if len(name.replace('.', '')) > 3 else 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') > 1:\n        return \"No\"\n    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return \"No\"\n    if file_name[0].isdigit():\n        return \"No\"\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    vowels = 'aeiouAEIOU'\n    for letter in file_name.split('.')[0]:\n        if letter in vowels:\n            return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or (file_name[:file_name.index('.')]).isdigit() or (file_name[:file_name.index('.')][0] in 'AEIOUaeiou'):\n        return 'No'\n    elif file_name.count('.') > 1 or file_name[-4:] not in ('.txt', '.exe', '.dll'):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2 or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not file_name[0].isalpha() or any(i in file_name.split('.')[0] for i in 'aeiouAEIOU'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = r'^[A-Z][^aeiouAEIOU]*\\.(txt|exe|dll)$'\n    return re.match(pattern, file_name) is not None\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    first_section, second_section = file_name.split('.')\n    if not first_section[0].isalpha() or any(letter.lower() in 'aeiou' for letter in first_section):\n        return 'No'\n    if second_section not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2 or file_name.split('.')[0].lower().startswith('0') or file_name.split('.')[0].lower().endswith('0') or file_name.split('.')[0].lower().find('a') != -1 or file_name.split('.')[0].lower().find('e') != -1 or file_name.split('.')[0].lower().find('i') != -1 or file_name.split('.')[0].lower().find('o') != -1 or file_name.split('.')[0].lower().find('u') != -1 or file_name.split('.')[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    first_section, second_section = file_name.split('.')\n    if not first_section[0].isalpha() or any(vowel in first_section for vowel in 'aeiouAEIOU'):\n        return 'No'\n    if second_section not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if not (3 >= sum([c.isdigit() for c in file_name]) <= 3 and '.' in file_name):\n        return 'No'\n    if not file_name[:file_name.index('.')].isalpha() or not all([i not in file_name[:file_name.index('.')].lower() for i in 'aeiou']):\n        return 'No'\n    if file_name[file_name.index('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  import re\n  pattern_no_vowel = re.compile(r'^[a-zA-Z]+\\d{0,3}\\.[txt|exe|dll]$')\n  if pattern_no_vowel.match(file_name):\n    return 'Yes'\n  else:\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if not name_parts[0][0].isalpha() or any(char in name_parts[0] for char in 'AEIOUaeiou'):\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  if (file_name.count('.') != 1 or file_name.find('.') == 0 or file_name.find('.') == len(file_name) - 1):\n    return 'No'\n  file_name_parts = file_name.split('.')\n  if (len(file_name_parts[0]) == 0 or not file_name_parts[0][0].isalpha() or not all(c not in file_name_parts[0] for c in 'aeiouAEIOU')):\n    return 'No'\n  if (file_name_parts[1] not in ['txt', 'exe', 'dll']):\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  if file_name.isdigit() or (file_name[:file_name.find('.')].lower() in 'aeiou' and not file_name.endswith(('.txt', '.exe', '.dll'))):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    name, ext = file_name.split('.')\n    if ext not in ('txt', 'exe', 'dll'):\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    vowels = 'aeiou'\n    for char in name:\n        if char.lower() in vowels:\n            return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name[0].isalpha() or any(char.lower() in 'aeiou' for char in name):\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n   for i in file_name:\n      if i in ('a', 'e', 'i', 'o', 'u'):\n         return 'No'\n      if file_name.count('.') != 1:\n         return 'No'\n      if file_name.split('.')[0][0] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n         return 'No'\n      if file_name.split('.')[1] not in ('txt', 'exe', 'dll'):\n         return 'No'\n   return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n  if file_name.count('.') != 1:\n    return 'No'\n  elif not file_name.split('.')[0][0].isalpha():\n    return 'No'\n  elif 'a' in file_name.split('.')[0] or 'e' in file_name.split('.')[0] or 'i' in file_name.split('.')[0] or 'o' in file_name.split('.')[0] or 'u' in file_name.split('.')[0]:\n    return 'No'\n  elif file_name.split('.')[1] not in ['txt','exe','dll']:\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    return (file_name.count('.') == 1) and (file_name.split('.')[0][0].isalpha()) and (file_name.split('.')[-1] in ['txt', 'exe', 'dll']) and (not any(char.lower() in 'aeiou' for char in file_name.split('.')[0]))\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2 or file_name.split('.')[0].isdigit() or 'a' in file_name.split('.')[0] or 'e' in file_name.split('.')[0] or 'i' in file_name.split('.')[0] or 'o' in file_name.split('.')[0] or 'u' in file_name.split('.')[0] or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  import re\n  pattern = r'^[a-zA-Z][^aeiouAEIOU]*\\.[txt|exe|dll]{1}$'\n  if not re.match(pattern, file_name):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    first_part, second_part = file_name.split('.')\n    if not first_part[0].isalpha() or any(letter in first_part for letter in 'aeiouAEIOU'):\n        return 'No'\n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  if len(file_name.split('.')) != 2 or '.' in file_name.split('.')[0] or len(file_name.split('.')[0]) - file_name.split('.')[0].count('a') - file_name.split('.')[0].count('e') - file_name.split('.')[0].count('i') - file_name.split('.')[0].count('o') - file_name.split('.')[0].count('u') > 3 or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  parts = file_name.split('.')\n  if len(parts) != 2 or parts[0].isdigit() or parts[0].lower() in 'aeiou' or parts[1] not in ('txt', 'exe', 'dll'):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if not file_name or len(file_name) > 30 or file_name.count('.') != 1 or file_name.find('.') == 0 or file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name.isalpha() or len(name) > 20 or any(c in name.lower() for c in 'aeiou'):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern_file = r'^[A-Za-z][a-zA-Z0-9]*(\\.[a-z]{3})$'\n    if re.fullmatch(pattern_file, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('0123456789') > 3 or file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or name[0] in 'aeiouAEIOU' or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return \"No\"\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or any(i in name for i in 'aeiouAEIOU'):\n        return \"No\"\n    if ext not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or (file_name == '.'):\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.split('.')[0].isalpha() is False:\n        return 'No'\n    elif file_name.split('.')[0] == '':\n        return 'No'\n    elif file_name.split('.')[0].lower() in 'aeiouAEIOU':\n        return 'No'\n    elif file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name) <= 3 or file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or name[0] in 'aeiouAEIOU' or ext not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  import re\n  if len(re.findall(r'\\d', file_name)) <= 3 and file_name.count('.') == 1 and file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n    return 'Yes'\n  return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name) <= 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name[0].isalpha() or not name or name.lower() in 'aeiou':\n        return 'No'\n    if ext not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  if len(file_name) > 3 and file_name.count('.') != 1 or not file_name[0].isalpha() or file_name.lower().count('a') + file_name.lower().count('e') + file_name.lower().count('i') + file_name.lower().count('o') + file_name.lower().count('u') == 0 or file_name.rsplit('.', 1)[-1] not in ('txt', 'exe', 'dll'):\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  if len(file_name) > 3 or file_name.count('.') != 1 or not file_name[0].isalpha() or file_name.lower().count('a') + file_name.lower().count('e') + file_name.lower().count('i') + file_name.lower().count('o') + file_name.lower().count('u') == len(file_name) or file_name[-3:] not in ['.txt', '.exe', '.dll']:\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if not (file_name.count('.') == 1 and file_name.rindex('.') + 1 < len(file_name)):\n        return 'No'\n    segment, extension = file_name.split('.')\n    if not segment[0].isalpha() or not segment or len(segment) > 3:\n        return 'No'\n    for c in segment:\n        if c in 'aeiouAEIOU':\n            return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    segment, extension = file_name.split('.')\n    if not segment or segment[0] in 'aeiouAEIOU' or any(char in segment for char in re.findall(r'\\W', segment)):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or any(i in name.lower() for i in 'aeiouAEIOU'):\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    segment1, segment2 = file_name.split('.')\n    if not segment2 in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not segment1.isalpha():\n        return 'No'\n    if len([letter for letter in segment1 if letter in 'aeiouAEIOU']) > 0:\n        return 'No'\n    if len([digit for digit in segment1 if digit.isdigit()]) > 3:\n        return 'No'\n    if not segment1:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name[0].isalpha() or not name or name.lower() in 'aeiouAEIOU' or extension not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1 or file_name.find('.') == 0 or file_name.find('.') == len(file_name)-1:\n        return 'No'\n    if file_name.split('.')[0].isalpha() and not any(char in file_name.split('.')[0] for char in 'aeiouAEIOU') and ('txt' in file_name.split('.')[-1] or 'exe' in file_name.split('.')[-1] or 'dll' in file_name.split('.')[-1]):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern_file_name = r'^[a-zA-Z][^aeiouAEIOU]*\\.[txt|exe|dll]$'\n    if re.fullmatch(pattern_file_name, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name_list = file_name.split('.')\n    if not name_list[0][0].isalpha():\n        return 'No'\n    if len(name_list[0]) == 0 or any(letter.lower() in 'aeiou' for letter in name_list[0]):\n        return 'No'\n    if name_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name[0].isalpha():\n        return 'No'\n    if len(name) > 3 and name.count(str(i)) >= 4 for i in range(10)):\n        return 'No'\n    vowels = 'aeiouAEIOU'\n    if any(c in vowels for c in name):\n        return 'No'\n    if ext not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or (file_name[:1].isdigit() and file_name[1:].count('.') > 1) or file_name.startswith('.') or file_name.endswith('.') or file_name.lower().endswith(('.txt', '.exe', '.dll')):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    first, second = file_name.split('.')\n    if not first.isalpha() or first.lower() in 'aeiou' or not first:\n        return 'No'\n    if second not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    import re\n    b_letter = re.search(r'^[a-zA-Z]', file_name)\n    b_empty = file_name.strip()\n    b_vowels = re.search(r'[aeiouAEIOU]', file_name)\n    b_dot = re.search(r'\\.', file_name)\n    b_count = file_name.count('.')\n\n    if b_letter and not b_empty and not b_vowels and b_dot and b_count <= 3 and (file_name.split('.')[-1] == 'txt' or file_name.split('.')[-1] == 'exe' or file_name.split('.')[-1] == 'dll'):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    count = 0\n    dot_count = 0\n    for i in file_name:\n        if i.isdigit():\n            count += 1\n        if i == '.':\n            dot_count += 1\n    if count > 3 or dot_count != 1:\n        return 'No'\n    for i in file_name:\n        if i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    first, second = file_name.split('.')\n    if first.isalpha():\n        if not file_name.lower().count('a') and not file_name.lower().count('e') and not file_name.lower().count('i') and not file_name.lower().count('o') and not file_name.lower().count('u'):\n            if second in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    parts = file_name.split('.')\n    if len(parts) != 2 or parts[0] == '' or parts[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n\n    if not all(ch.isalpha() or ch.isspace() for ch in parts[0]):\n        return 'No'\n\n    if any(ch.lower() in 'aeiou' for ch in parts[0]):\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2 or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    segment_before_dot = file_name.split('.')[0]\n    if not segment_before_dot[0].isalpha() or not segment_before_dot or any(char.lower() in 'aeiou' for char in segment_before_dot):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    b_file_name = file_name.lower()\n    if len(re.findall(r'[0-9]', b_file_name)) > 3 or b_file_name.count('.') != 1:\n        return 'No'\n    elif not re.findall(r'^[a-z][^aeiouAEIOU]*', b_file_name.split('.')[0]):\n        return 'No'\n    elif b_file_name.split('.')[-1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') == 1:\n        file_name_list = file_name.split('.')\n        if len(file_name_list[0]) <= 3 and file_name_list[0][0].isalpha() and not any(char in file_name_list[0] for char in 'aeiouAEIOU') and file_name_list[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2 or file_name.split('.')[0] == '' or file_name.split('.')[0].lower() in 'aeiouAEIOU' or file_name.split('.')[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.isdigit() or (file_name.count('.') != 1 or file_name.index('.') >= len(file_name) - 4):\n        return 'No'\n    if not file_name[:file_name.index('.')].isalpha() or not file_name[:file_name.index('.')]:\n        return 'No'\n    if file_name[file_name.index('.') + 1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    elif f_list[1] not in ['txt', 'exe', 'dll'] or any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3 or len(file_name.split(\".\")) != 2 or not file_name.split(\".\")[0] or not file_name.split(\".\")[0][0].isalpha() or file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"] or any(char in file_name.split(\".\")[0] for char in \"aeiouAEIOU\"):\n        return \"No\"\n    else:\n        return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3 or len(file_name.split(\".\")) != 2 or not file_name.split(\".\")[0] or not file_name.split(\".\")[0][0].isalpha() or file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"] or any(i in \"aeiouAEIOU\" for i in file_name.split(\".\")[0]):\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len([x for x in file_name if x.isdigit()]) <= 3:\n        f_list = file_name.split(\".\")\n        if len(f_list) == 2 and f_list[0] != \"\" and f_list[0][0].isalpha():\n            if f_list[1] in [\"txt\", \"exe\", \"dll\"] or not any(x in f_list[0] for x in \"aeiouAEIOU\"):\n                return \"Yes\"\n    return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(x in \"aeiouAEIOU\" for x in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: all(i.isdigit() for i in x)\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any(i in 'aeiouAEIOU' for i in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  digit_check = lambda x: (True if len([i for i in x if i.isdigit()]) <= 3 else False)\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll'] or any(i in f_list[0] for i in 'aeiouAEIOU'):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(c.isdigit() for c in x) <= 3\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(x in f_list[0] for x in 'aeiouAEIOU'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  digit_check = lambda x: not bool([i for i in x if i.isdigit()])\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll'] or any([i in 'aeiouAEIOU' for i in f_list[0]]):\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n  digit_checker = lambda x: sum(c.isdigit() for c in x) <= 3\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll'] or any(c in 'aeiouAEIOU' for c in f_list[0]):\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] and f_list[0][0].isalpha() and f_list[1] in ['txt', 'exe', 'dll']:\n            if not bool(re.findall(r'[aeiouAEIOU]', f_list[0])):\n                return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_count = len(list(filter(str.isdigit, file_name)))\n    f_list = file_name.split('.')\n\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any(i in f_list[0] for i in 'aeiouAEIOU'):\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and (not f_list[0] or not f_list[0][0].isalpha()):\n            if f_list[1] in ['txt', 'exe', 'dll']:\n                if not any(i in f_list[0] for i in 'aeiouAEIOU'):\n                    return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] and f_list[0][0].isalpha() and f_list[1] in ['txt', 'exe', 'dll']:\n            if not (any(True for i in f_list[0] if i in 'aeiouAEIOU')):\n                yield 'Yes'\n    yield 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any([i in 'aeiouAEIOU' for i in f_list[0]]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    elif f_list[1] not in ['txt', 'exe', 'dll'] or any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: (True if len([i for i in x if i.isdigit()]) <= 3 else False)\n    f_list = file_name.split('.')\n    return 'Yes' if len(f_list) == 2 and f_list[0] != '' and f_list[0][0].isalpha() and f_list[1] in ['txt', 'exe', 'dll'] and not any([i in 'aeiouAEIOU' for i in f_list[0]]) else 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    elif f_list[1] not in ['txt', 'exe', 'dll'] or any(x.lower() in 'aeiou' for x in f_list[0]):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] and not any(char in 'aeiouAEIOU' for char in f_list[0]):\n            if f_list[1] in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return \"No\"\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if any([i in 'aeiouAEIOU' for i in f_list[0]]):\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] and f_list[0][0].isalpha() and f_list[1] in ['txt', 'exe', 'dll'] and not any(l in f_list[0].lower() for l in 'aeiou'):\n            return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: (True if len([y for y in x if y.isdigit()]) <= 3 else False)(file_name)\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(i in 'aeiouAEIOU' for i in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3 and (len(file_name.split('.')[-1]) in [3, 4, 5] and file_name.split('.')[0].isalpha() and file_name.split('.')[-1] in ['txt', 'exe', 'dll'] and not any(i in file_name.split('.')[0] for i in \"aeiouAEIOU\")):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] != '' and f_list[0][0].isalpha():\n            if f_list[1] in ['txt', 'exe', 'dll'] and not any(i.lower() in 'aeiou' for i in f_list[0]):\n                return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3:\n        f_list = file_name.split('.')\n        if len(f_list) == 2 and f_list[0] and f_list[0][0].isalpha() and f_list[1] in ['txt', 'exe', 'dll']:\n            if not any(i in 'aeiouAEIOU' for i in f_list[0]):\n                return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: any(z.isdigit() for z in x)\n    f_list = file_name.split('.')\n\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll', 'f']:\n        return 'No'\n    elif any(z in 'aeiouAEIOU' for z in f_list[0]):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: (True if len([i for i in x if i.isdigit()]) <= 3 else False)\n    if not digit_check(file_name): return \"No\"\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == \"\" or not f_list[0].isalpha(): return \"No\"\n    if f_list[1] not in ['txt', 'exe', 'dll', 'f']: return \"No\"\n    if any(i in \"aeiouAEIOU\" for i in f_list[0]): return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_filter = lambda x: x.isdigit()\n    f_list = file_name.split('.')\n    return 'Yes' if len(list(filter(digit_filter, file_name))) <= 3 and len(f_list) == 2 and f_list[0] != '' and f_list[0][0].isalpha() and f_list[1] in ('txt', 'exe', 'dll', 'f') and not any(i in 'aeiouAEIOU' for i in f_list[0]) else 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: any(c.isdigit() for c in x)\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll', 'f']:\n        return 'No'\n    if digit_check(f_list[0]) and digit_check(f_list[1]):\n        return 'No'\n    if any(c in 'aeiouAEIOU' for c in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_count = len(list(filter(lambda c: c.isdigit(), file_name))) <= 3\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[1] not in 'txt|exe|dll|f':\n        return 'No'\n    if any(c in 'aeiouAEIOU' for c in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ]
        ]
    },
    "4": {
        "level 1": [
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    dot_index = file_name.index('.')\n    before_dot, after_dot = file_name[:dot_index], file_name[dot_index + 1:]\n    if not before_dot or not before_dot[0].isalpha() or any(char.isupper() for char in before_dot):\n        return 'No'\n    if after_dot not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') > 1 or file_name.count('.') < 1:\n        return 'No'\n    elif file_name.index('.') == 0 or file_name.index('.') == len(file_name) - 1:\n        return 'No'\n    elif not file_name.split('.')[0][0].isalpha() or not file_name.split('.')[0].isalnum():\n        return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name_list = file_name.split('.')\n    if not name_list[0][0].isalpha() or any(i.isupper() for i in name_list[0]):\n        return 'No'\n    if name_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name.split('.')[0].isalpha() or file_name.split('.')[0].isupper():\n        return \"No\"\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if len([char for char in file_name.split('.')[0] if char.isdigit()]) > 3:\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() or (file_name[:file_name.index('.')].isdigit() and len(file_name[:file_name.index('.')]) > 3) or len(file_name.split('.')) != 2 or file_name.split('.')[0][0].isupper() or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if len([char for char in name if char.isdigit()]) > 3 or name.count('.') != 1:\n        return 'No'\n    if not name.split('.')[0][0].isalpha() or any(char.isupper() for char in name.split('.')[0]):\n        return 'No'\n    if name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    \"\"\"\n    Checks if a filename is deemed proper based on certain rules.\n\n    Args:\n        filename: The name of the file.\n\n    Returns:\n        'Yes' if the name is proper, 'No' otherwise.\n    \"\"\"\n\n    count = 0\n    period_count = 0\n    section_before_period = \"\"\n    section_after_period = \"\"\n\n    for char in filename:\n        if char.isdigit():\n            count += 1\n\n        if char == '.':\n            period_count += 1\n            break\n\n    if count > 3 or period_count != 1:\n        return 'No'\n\n    for char in filename.split('.')[0]:\n        if not char.isalpha() or char.isupper():\n            return 'No'\n        section_before_period += char\n\n    if filename.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if filename.count('.') != 1:\n        return 'No'\n    if not filename.startswith('.') and not filename.endswith('.') and not filename[:filename.index('.')].isalnum():\n        return 'No'\n    if filename.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0 or file_name.endswith('.') or file_name.startswith('.'):\n        return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    section_before, ext = file_name.split('.')\n    if not section_before.isalpha():\n        return 'No'\n    if section_before.isupper():\n        return 'No'\n    if section_before == '':\n        return 'No'\n    elif section_before.isdigit() and len([digit for digit in section_before if digit.isdigit()]) > 3:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() or (file_name[:file_name.rfind('.')].lower() + file_name[file_name.rfind('.'):]).isalnum():\n        if file_name.count('.') > 1 or file_name[:file_name.rfind('.')].lower() == '':\n            return 'No'\n        elif file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n            if file_name[-4].isdigit():\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(str(file_name).split('.')) > 2 or len(str(file_name).split('.')) == 1:\n        return 'No'\n    elif file_name.find('.') == 0 or file_name.rfind('.') == len(file_name) - 1:\n        return 'No'\n    elif file_name[:file_name.find('.')].isalnum() == False and file_name[:file_name.find('.')].isalpha() == False:\n        return 'No'\n    elif file_name[:file_name.find('.')][0].isupper():\n        return 'No'\n    elif file_name.rpartition('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  import re\n  return \"Yes\" if re.match(r'^[a-z][a-z0-9]{0,3}\\.[txt|exe|dll]$', file_name) else \"No\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name.split('.')[-2]) > 3:\n        return 'No'\n    elif file_name.count('.') > 1:\n        return 'No'\n    elif (not file_name[0].isalpha()) or (file_name[0].isupper()):\n        return 'No'\n    elif file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  if len(file_name.split('.')[-1]) not in (3, 4, 5):\n    return 'No'\n  elif file_name.split('.')[0][0].isnumeric() or file_name.split('.')[0].isupper():\n    return 'No'\n  elif len(file_name.split('.')[0]) == 0:\n    return 'No'\n  elif file_name.split('.')[-1] not in ('txt', 'exe', 'dll'):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  if len(file_name.split('.')[-1]) == 3:\n    return 'No'\n  elif file_name.split('.')[0].islower() and file_name.split('.')[0].isalpha():\n    if file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n      return 'Yes'\n    else:\n      return 'No'\n  else:\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    return ('Yes' if name.isalnum() and name.split('.')[0].isalpha() and name.split('.')[-1] in ('txt', 'exe', 'dll') and name.count('.') == 1 and len(name.split('.')) == 2 and len(name.split('.')[0]) <= 3 else 'No')\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n  if len(name) <= 3 and name.count('.') == 1 and name[0].isalpha() and not name[0].isupper() and name != '' and name.split('.')[-1] in ['txt', 'exe', 'dll']:\n    return 'Yes'\n  return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if len(name) > 6:\n        return 'No'\n    if name.count('.') != 1:\n        return 'No'\n    if not name.split('.')[0].isalpha() or name.split('.')[0].isupper():\n        return 'No'\n    if name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name) > 3 and file_name.count('.') != 1 or not (file_name.split('.')[0][0].isalpha() and not file_name.split('.')[0][0].isupper()) or file_name.split('.')[0] == '' or file_name.split('.')[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name != '' and file_name.count('.') == 1 and 3 > len(file_name.split('.')[-1]) > 0 and file_name.split('.')[0][0].islower():\n        if file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    return bool(not name.isupper() and name.isalpha() and name.find('.') == name.rfind('.') and name.rfind('.') < len(name)-3 and name[-3:] in ['txt', 'exe', 'dll'])\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    return bool(not name.istitle() and name.split('.')[-1] in ['txt', 'exe', 'dll'] and name.split('.')[0] and len([i for i in name if i.isdigit()]) <= 3)\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    return name.split('.')[-1] in ('txt', 'exe', 'dll') and name.lower().split('.')[0] and len(name.split('.')[-1]) <= 3 and name.split('.')[-2].isdigit() <= 3\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if not file_name[0].isalpha() or file_name[0].isupper():\n        return 'No'\n\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    if not parts[0] or parts[0].isdigit():\n        return 'No'\n\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if not file_name.isalnum() or file_name.isupper() or '.' not in file_name or file_name.rsplit('.', 1)[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name.split('.')) > 2 or len(file_name.split('.')) < 2:\n        return 'No'\n    if file_name.split('.')[0].isdigit() or file_name.split('.')[0].isupper() or file_name.split('.')[0] == '':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    dots = file_name.count('.')\n    if dots > 1:\n        return 'No'\n    segments = file_name.split('.')\n    first_segment = segments[0]\n    if not first_segment or first_segment.isupper() or not first_segment[0].isalpha():\n        return 'No'\n    if len(first_segment) > 3:\n        return 'No'\n    if len(segments) == 2 and segments[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name_list = file_name.split('.')\n    if not name_list[0][0].isalpha():\n        return 'No'\n    for x in name_list[0]:\n        if x.isupper():\n            return 'No'\n    if len(name_list[0]) > 3:\n        return 'No'\n    if name_list[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    segment, extension = file_name.split('.')\n    if not segment.isalpha() or segment.isupper() or segment == '':\n        return 'No'\n    if extension not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() or (file_name.count('.') > 1 or file_name.count('.') == 0):\n        return 'No'\n    segment = file_name.split('.')\n    if len(segment[0]) > 3 or not segment[0][0].isalpha() or segment[0].isupper() or segment[0] == '':\n        return 'No'\n    if segment[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(str(file_name).strip()) > 3 and str(file_name).strip().isdigit():\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0]:\n        return 'No'\n    if not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() or file_name.count('.') != 1:\n        return 'No'\n\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or name.isupper():\n        return 'No'\n\n    extensions = ['txt', 'exe', 'dll']\n    if ext not in extensions:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() and len(file_name) > 3:\n        return 'No'\n    elif file_name.count('.') != 1 or file_name.split('.')[-1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        file_name_split = file_name.split('.')\n        if not file_name_split[0] or not file_name_split[0][0].isalpha() or any(char.isupper() for char in file_name_split[0]):\n            return 'No'\n        else:\n            return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(str(file_name).split('.')) > 2 or len(str(file_name).split('.')) == 1:\n        return \"No\"\n    elif len(str(file_name).split('.')[0]) > 3 or not str(file_name).split('.')[0][0].isalpha() or any([letter.isupper() for letter in str(file_name).split('.')[0]]):\n        return \"No\"\n    elif str(file_name).split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.isdigit() and len(file_name) > 3:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    file_name_split = file_name.split('.')\n    if not file_name_split[0] or not file_name_split[0].isalpha() or any(char.isupper() for char in file_name_split[0]):\n        return 'No'\n\n    if file_name_split[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count(str(i)) >= 4 for i in range(0, 10)):\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    allowed_extensions = {'txt', 'exe', 'dll'}\n    if parts[1] not in allowed_extensions:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    allowed_extensions = ['txt', 'exe', 'dll']\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if len(parts[0]) == 0 or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in allowed_extensions:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if file_name.count(str(file_name)) > 3:\n        return 'No'\n    elif file_name.count('.') != 1:\n        return 'No'\n    elif file_name.split('.')[0] == '' or not file_name.split('.')[0].isalnum() or any(char.isupper() for char in file_name.split('.')[0]):\n        return 'No'\n    elif file_name.split('.')[1] not in allowed_extensions:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count(r'[0-9]') > 3:\n        return 'No'\n\n    if file_name.count('.') != 1 or '.' in file_name[:file_name.index('.')]:\n        return 'No'\n\n    first_part, extension = file_name.split('.')\n    if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n        return 'No'\n\n    allowed_extensions = ('txt', 'exe', 'dll')\n    if extension not in allowed_extensions:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    extensions = ['txt', 'exe', 'dll']\n    if file_name.count(str(i)) > 3 for i in range(0, 10)) or file_name.count('.') != 1:\n        return 'No'\n    first_part, second_part = file_name.split('.')\n    if not first_part or not first_part[0].isalpha() or any(i.isupper() for i in first_part) or second_part not in extensions:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    extensions = ['txt', 'exe', 'dll']\n    for ext in extensions:\n        if filename.endswith('.' + ext):\n            parts = filename.rsplit('.', 1)\n            if len(parts) != 2:\n                return 'No'\n            first_part, second_part = parts[0], parts[1]\n            if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n                return 'No'\n            return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    parts = filename.split('.')\n    if len(parts) != 2 or not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    elif len(parts[0]) == 0 or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    elif sum(char.isdigit() for char in parts[0]) > 3:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if filename.count('.') != 1:\n        return 'No'\n    if not filename.split('.')[0][0].isalpha() or filename.split('.')[0].upper() != filename.split('.')[0]:\n        return 'No'\n    if filename.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if filename.count('.') != 1 or filename.index('.') >= len(filename) - 4:\n        return 'No'\n\n    parts = filename.split('.')\n    first, ext = parts[0], parts[1]\n\n    if not first or not first[0].isalpha() or any(char.isupper() for char in first):\n        return 'No'\n\n    allowed_extensions = {'txt', 'exe', 'dll'}\n    if ext not in allowed_extensions:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    count = 0\n    for c in filename:\n        if c.isdigit():\n            count += 1\n    if count > 3 or filename.count('.') != 1:\n        return 'No'\n    filename_split = filename.split('.')\n    if filename_split[0] == '' or not filename_split[0][0].isalpha() or not filename_split[0].islower() or filename_split[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    extensions = ['txt', 'exe', 'dll']\n    for ext in extensions:\n        if filename.endswith('.' + ext):\n            filename, ext = filename.rsplit('.', 1)\n            if filename.isalnum() and filename[0].isalpha():\n                if filename.isdigit() and len(filename) < 4:\n                    return 'Yes'\n            return 'No'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    \"\"\"\n    Checks if a filename fits specific standards.\n\n    Args:\n      filename: The filename to check.\n\n    Returns:\n      'Yes' if the filename is valid, 'No' otherwise.\n    \"\"\"\n\n    # Check if there are fewer than four digits in the filename.\n    num_digits = sum(char.isdigit() for char in filename)\n    if num_digits >= 4:\n        return 'No'\n\n    # Check if there's exactly one dot in the filename.\n    dot_index = filename.find('.')\n    if dot_index == -1 or filename.count('.') != 1:\n        return 'No'\n\n    # Check if the initial part is filled, starts with a character, doesn't contain uppercase letters.\n    initial_part = filename[:dot_index]\n    if not initial_part or not initial_part[0].isalpha() or any(char.isupper() for char in initial_part):\n        return 'No'\n\n    # Check if the final part corresponds to one of the given extensions.\n    final_part = filename[dot_index + 1:]\n    if final_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # All checks passed.\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if len(filename.split('.')) != 2:\n        return 'No'\n    first, last = filename.split('.')\n    if first == '' or first[0].isupper() or any(char.isupper() for char in first):\n        return 'No'\n    return 'Yes' if last in ('txt', 'exe', 'dll') else 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    extensions = [\"txt\", \"exe\", \"dll\"]\n    if filename.count(\" \") < 4 and filename.count(\".\") == 1:\n        main, extension = filename.split(\".\")\n        if main and main[0].isalpha() and not any(char.isupper() for char in main) and extension in extensions:\n            return \"Yes\"\n    return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    count = 0\n    for char in filename:\n        if char.isdigit():\n            count += 1\n    if count >= 4:\n        return \"No\"\n\n    parts = filename.split(\".\")\n    if len(parts) != 2:\n        return \"No\"\n\n    if not parts[0] or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return \"No\"\n\n    if parts[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n\n    return \"Yes\"\n",
                true
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if len(file_name) > 3 and file_name.split('.')[0].isdigit():\n        return 'No'\n    elif len(file_name.split('.')) != 2 or file_name.split('.')[0] == '':\n        return 'No'\n    elif not file_name.split('.')[0][0].isalpha() or file_name.split('.')[0].upper() != file_name.split('.')[0]:\n        return 'No'\n    elif file_name.split('.')[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if file_name.isdigit():\n        return 'No'\n    elif file_name.count('.') != 1:\n        return 'No'\n    elif not file_name.split('.')[0].isalnum():\n        return 'No'\n    elif file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n  if len(file_name) >= 6:\n    if file_name.split('.')[0].isdigit():\n      return 'No'\n    elif len(file_name.split('.')) != 2:\n      return 'No'\n    elif not file_name.split('.')[0][0].isalpha():\n      return 'No'\n    elif file_name.split('.')[0].isupper():\n      return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n      return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if file_name.count('.') > 1 or file_name.count('.') == 0:\n        return 'No'\n\n    lead, ext = file_name.split('.')\n\n    if len(lead) > 3 or not lead[0].isalpha() or any(c.isupper() for c in lead):\n        return 'No'\n\n    if ext not in ('txt', 'exe', 'dll'):\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(name):\n  if len(name) > 3 and str(name).isdigit():\n    return 'No'\n  elif '.' not in name:\n    return 'No'\n  elif name[:name.index('.')].islower() == False:\n    return 'No'\n  elif name[name.index('.') + 1:] not in ('txt', 'exe', 'dll'):\n    return 'No'\n  else:\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n    extensions = ('txt', 'exe', 'dll')\n\n    if filename.isdigit() or filename.count('.') != 1 or filename[0].isupper():\n        return 'No'\n\n    filename_section, extension = filename.split('.')\n\n    if not filename_section or not filename_section.isalpha() or filename_section.isupper():\n        return 'No'\n\n    if extension not in extensions:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n    ext = ['txt', 'exe', 'dll']\n    if len(filename) > 3 and filename.isdigit():\n        return 'No'\n    elif filename.count('.') != 1:\n        return 'No'\n    elif not filename.split('.')[0][0].isalpha() or filename.split('.')[0].isupper():\n        return 'No'\n    elif filename.split('.')[-1] not in ext:\n        return 'No'\n    else:\n        return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n  if filename.isdigit() or len(filename) > 3:\n    return 'No'\n  if filename.count('.') != 1:\n    return 'No'\n  first, ext = filename.rsplit('.', 1)\n  return ext in ['txt', 'exe', 'dll'] and first.isalpha() and not first.isupper() and first != ''\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n    if filename.isdigit() or filename.count(\".\") != 1:\n        return \"No\"\n    name, ext = filename.split(\".\")\n    if not name or not name.islower():\n        return \"No\"\n    if ext not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(file_name):\n    extensions = ('txt', 'exe', 'dll')\n    if len(file_name) > 3 and file_name.isdigit():\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    first, ext = file_name.split('.')\n    if not first or not first[0].isalpha() or any(char.isupper() for char in first):\n        return 'No'\n    if ext not in extensions:\n        return 'No'\n    return 'Yes'\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(str.isdigit, file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or ' '.join(f_list[0]).isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n   if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n      return \"No\"\n   f_list = file_name.split('.')\n   if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(i.isupper() for i in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n      return \"No\"\n   return \"Yes\"\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n    return 'No'\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any([char.isupper() for char in f_list[0]]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2:\n        return 'No'\n    if not f_list[0]:\n        return 'No'\n    if not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[0].isupper():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda i: i.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any([i.isupper() for i in f_list[0]]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(i.isupper() for i in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n  if digit_count > 3:\n    return 'No'\n\n  f_list = file_name.lower().split('.')\n  if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n    return 'No'\n\n  if any(c.isupper() for c in f_list[0]):\n    return 'No'\n\n  if f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n\n  return 'Yes'",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any([i.isupper() for i in f_list[0]]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3 and len(file_name.split('.')) == 2 and file_name.split('.')[0] != '' and file_name.split('.')[0][0].isalpha and not (file_name.split('.')[0][0].isupper()) and file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0].isalpha() or any(x.isupper() for x in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n   if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n      return 'No'\n   f_list = file_name.split('.')\n   if len(f_list) != 2 or f_list[0] == '' or not f_list[0].isalpha() or any(i.isupper() for i in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n      return 'No'\n   return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n    return 'No'\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(letter.isupper() for letter in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    return 'Yes' if len(list(filter(lambda x: x.isdigit(), file_name))) <= 3 and len(f_list := file_name.split('.')) == 2 and f_list[0] and f_list[0][0].isalpha() and not any(x.isupper() for x in f_list[0]) and f_list[1] in ['txt', 'exe', 'dll'] else 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3 and file_name.split('.')[-1] in ('txt', 'exe', 'dll') and file_name.split('.')[0] != '' and file_name.split('.')[0][0].isalpha() and not file_name.split('.')[0][0].isupper():\n        return \"Yes\"\n    else:\n        return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  if len(list(filter(lambda i: i.isdigit(), file_name))) > 3:\n    return 'No'\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or not f_list[0] or not f_list[0].isalpha() or f_list[0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n   if len(list(filter(lambda i: i.isdigit(), file_name))) > 3:\n      return 'No'\n   f_list = file_name.split('.')\n   if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[0][0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n      return 'No'\n   return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  digit_count = len(list(filter(str.isdigit, file_name)))\n  if digit_count > 3:\n    return 'No'\n\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[0].isupper() or f_list[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: len(str(x)) > 3, enumerate([int(i) for i in file_name.split('.')][0]))) > 0:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0].isalpha() or any([i.isupper() for i in f_list[0]]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: len(x) > 3, file_name.split('.')))) > 0:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0].isalpha():\n        return 'No'\n    if f_list[0].isupper():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: len(str(x)) > 3, map(int, file_name.split('.')))) > 0:\n        return \"No\"\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0].isalpha() or any(map(str.isupper, f_list[0])) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n  digit_check = next((True for digit in filter(lambda x: x.isdigit(), file_name) if int(digit) > 3), False)\n\n  f_list = file_name.split('.')\n\n  if len(f_list) != 2 or f_list[0] == '' or not f_list[0].isalpha() or next((True for letter in f_list[0] if letter.isupper()), False) or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n\n  return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    return 'Yes' if all(d <= 3 for d in filter(lambda a: a.isdigit(), file_name)) and len(f_list := file_name.split('.')) == 2 and f_list[0] and f_list[0][0].isalpha() and not f_list[0].isupper() and f_list[1] in ('txt', 'exe', 'dll') else 'No'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercape(file_name):\n    if len(list(filter(str.isdigit, file_name))) <= 3 and len(file_name.split('.')) == 2 and file_name.split('.')[0] != '' and file_name.split('.')[0][0].isalpha and not file_name.split('.')[0].isupper() and file_name.split('.')[1] in ('txt', 'exe', 'dll'):\n        return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercape(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any([x.isupper() for x in f_list[0]]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercape(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(i.isupper() for i in f_list[0]) or f_list[1] not in ('txt', 'exe', 'dll'):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercape(file_name):\n  digit_count = len(list(filter(str.isdigit, file_name)))\n  if digit_count > 3:\n    return 'No'\n\n  f_list = file_name.split('.')\n  if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n\n  return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercape(file_name):\n    return 'Yes' if len(list(filter(lambda x: x.isdigit(), file_name))) <= 3 and len(f_list := file_name.split('.')) == 2 and f_list[0] and f_list[0][0].isalpha() and not any(x.isupper() for x in f_list[0]) and f_list[1] in ['txt', 'exe', 'dll'] else 'No'\n",
                false
            ]
        ]
    }
}