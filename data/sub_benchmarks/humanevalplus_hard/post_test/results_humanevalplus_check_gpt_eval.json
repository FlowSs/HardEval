{
    "0": {
        "level 1": [
            [
                "\ndef valid_date_leap_year(date):\n    import calendar\n    \n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_month = calendar.monthrange(year, month)[1]\n        if day < 1 or day > days_in_month:\n            return False\n    else:\n        if month == 2 and (day < 1 or day > 28):\n            return False\n        elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif day < 1 or day > 31:\n            return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day > 30:\n                return False\n        else:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import calendar\n    \n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > calendar.monthrange(year, month)[1]:\n        return False\n    \n    if month == 2 and day == 29:\n        if not calendar.isleap(year):\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        if date == '':\n            return False\n        \n        date_obj = datetime.datetime.strptime(date, '%m-%d-%Y')\n        month = date_obj.month\n        day = date_obj.day\n        year = date_obj.year\n\n        if month < 1 or month > 12:\n            return False\n        \n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_string):\n    import datetime\n    \n    try:\n        date = datetime.datetime.strptime(date_string, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    if date_string != date.strftime('%m-%d-%Y'):\n        return False\n    \n    month = int(date_string.split('-')[0])\n    day = int(date_string.split('-')[1])\n    year = int(date_string.split('-')[2])\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        datetime.datetime.strptime(date_str, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    month, day, year = map(int, date_str.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:  # Leap year check\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        date = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date_str and 1 <= date.month <= 12:\n            if date.month in [1, 3, 5, 7, 8, 10, 12]:\n                return 1 <= date.day <= 31\n            elif date.month in [4, 6, 9, 11]:\n                return 1 <= date.day <= 30\n            elif date.month == 2:\n                if (date.year % 4 == 0 and date.year % 100 != 0) or date.year % 400 == 0:\n                    return 1 <= date.day <= 29\n                else:\n                    return 1 <= date.day <= 28\n        else:\n            return False\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        month, day, year = map(int, date.split('-'))\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\n    except:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    try:\n        if date_str == '':\n            return False\n        date = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0):\n            if date.month == 2 and date.day == 29:\n                return True\n        elif date.month == 2 and date.day == 29:\n            return False\n        return True if date.year >= 0 else False\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n\n    try:\n        if not date_str:\n            return False\n        \n        month, day, year = map(int, date_str.split('-'))\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1:\n            return False\n        \n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day > 30:\n                return False\n        else:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        \n        return True\n    except:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        date_obj = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date_str.count('-') != 2:\n            return False\n        \n        month, day, year = map(int, date_str.split('-'))\n        if month < 1 or month > 12:\n            return False\n        \n        if day < 1:\n            return False\n        \n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            max_days = 31\n        elif month in [4, 6, 9, 11]:\n            max_days = 30\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                max_days = 29\n            else:\n                max_days = 28\n        else:\n            return False\n        \n        if day > max_days:\n            return False\n        \n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        # Check if date_str is not blank\n        if not date_str:\n            return False\n        \n        # Validate date format\n        datetime.datetime.strptime(date_str, \"%m-%d-%Y\")\n        \n        # Extract month, day, and year from the date string\n        month, day, year = map(int, date_str.split('-'))\n        \n        # Validate month range\n        if month < 1 or month > 12:\n            return False\n        \n        # Validate day based on month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            # Check for leap year\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n        else:\n            return False\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if year % 100 != 0 or year % 400 == 0:\n                if day > 29:\n                    return False\n        else:\n            if day > 28:\n                return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_paint_leap_year(date_string):\n    import datetime\n    try:\n        date_obj = datetime.datetime.strptime(date_string, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    month = date_obj.month\n    day = date_obj.day\n    year = date_obj.year\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date_str):\n    import datetime\n    \n    try:\n        date = datetime.datetime.strptime(date_str, \"%m-%d-%Y\")\n        year = date.year\n        is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n        \n        if date_str == date.strftime(\"%m-%d-%Y\") and 1 <= date.month <= 12 and \\\n            (date.month in [1, 3, 5, 7, 8, 10, 12] and 1 <= date.day <= 31 or \\\n            date.month in [4, 6, 9, 11] and 1 <= date.day <= 30 or \\\n            date.month == 2 and (is_leap_year and 1 <= date.day <= 29 or 1 <= date.day <= 28)):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date):\n    import datetime\n    \n    try:\n        # Check if the date string is in the format 'mm-dd-yyyy'\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        \n        # Validate leap year for February 29\n        month, day, year = map(int, date.split('-'))\n        if month == 2 and day == 29:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                return True\n            else:\n                return False\n        \n        return True\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date_str):\n    import datetime\n    \n    try:\n        date = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    if date_str == '':\n        return False\n    \n    month = int(date_str.split('-')[0])\n    day = int(date_str.split('-')[1])\n    year = int(date_str.split('-')[2])\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_paint_leap_year(date):\n    import datetime\n    \n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        return True\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        date_obj = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date_obj.year % 4 == 0 and (date_obj.year % 100 != 0 or date_obj.year % 400 == 0):\n            if date_obj.month == 2 and date_obj.day == 29:\n                return True\n        elif date_obj.month == 2 and date_obj.day <= 28:\n            return True\n        elif date_obj.month in [1, 3, 5, 7, 8, 10, 12] and 1 <= date_obj.day <= 31:\n            return True\n        elif date_obj.month in [4, 6, 9, 11] and 1 <= date_obj.day <= 30:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        if date == '':\n            return False\n        \n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n        else:\n            return False\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        date = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date_str and 1 <= date.month <= 12:\n            if date.month in [1, 3, 5, 7, 8, 10, 12]:\n                return 1 <= date.day <= 31\n            elif date.month in [4, 6, 9, 11]:\n                return 1 <= date.day <= 30\n            elif date.month == 2:\n                if (date.year % 4 == 0 and date.year % 100 != 0) or date.year % 400 == 0:\n                    return 1 <= date.day <= 29\n                else:\n                    return 1 <= date.day <= 28\n        else:\n            return False\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        month, day, year = map(int, date.split('-'))\n        if len(date) != 10:\n            return False\n        if month < 1 or month > 12:\n            return False\n        if day < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    else:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    try:\n        date_obj = datetime.datetime.strptime(date_str, '%m-%d-%Y')\n        if date_obj.year % 4 == 0 and (date_obj.year % 100 != 0 or date_obj.year % 400 == 0):\n            if date_obj.month == 2 and date_obj.day == 29:\n                return True\n        elif date_obj.month == 2 and date_obj.day <= 28:\n            return True\n        elif date_obj.month in [1, 3, 5, 7, 8, 10, 12] and 1 <= date_obj.day <= 31:\n            return True\n        elif date_obj.month in [4, 6, 9, 11] and 1 <= date_obj.day <= 30:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n\n    try:\n        if not date:\n            return False\n\n        date_obj = datetime.datetime.strptime(date, '%m-%d-%Y')\n        month = date_obj.month\n        day = date_obj.day\n        year = date_obj.year\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:  # Months with 31 days\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:  # Months with 30 days\n            if day < 1 or day > 30:\n                return False\n        else:  # February\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):  # Leap year\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n\n        return True\n\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        if date == \"\":\n            return False\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        date_split = date.split('-')\n        month = int(date_split[0])\n        day = int(date_split[1])\n        year = int(date_split[2])\n        if month < 1 or month > 12:\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            if day < 1 or day > 31:\n                return False\n        return True\n    except ValueError:\n        return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]: \n        return 1 <= day <= 31\n    if month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    \n    return False\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import datetime\n    \n    try:\n        if not date_str:\n            return False\n        \n        date_format = \"%m-%d-%Y\"\n        date = datetime.datetime.strptime(date_str, date_format)\n        if date.strftime(date_format) != date_str:\n            return False\n        \n        month = int(date_str.split('-')[0])\n        day = int(date_str.split('-')[1])\n        year = int(date_str.split('-')[2])\n        \n        if month < 1 or month > 12:\n            return False\n        \n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n            \n        return True\n    except ValueError:\n        return False\n",
                true
            ]
        ],
        "level 2": [
            [
                "\ndef valid_date_leap_year(date):\n    if date == \"\":\n        return False\n\n    month, day, year = date.split('-')\n\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    if month not in days_in_month:\n        return False\n\n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n\n    if day <= days_in_month[month]:\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if not date:\n        return False\n    \n    if not date.count('-') == 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        if not is_leap_year(year):\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    def is_leap_year(year):\n        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if date == '':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        return is_leap_year(year)\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\n    month_days = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if year < 1:\n        return False\n\n    if is_leap_year(year):\n        month_days[2] = 29\n\n    if day < 1 or day > month_days[month]:\n        return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if date == \"\":\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    max_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > max_days[month - 1]:\n        return False\n    \n    if month == 2 and day == 29:\n        if year % 4 == 0:\n            if year % 100 != 0 or year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    max_days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            max_days_per_month[1] = 29\n    \n    if day < 1 or day > max_days_per_month[month-1]:\n        return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    max_days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > max_days_per_month[month-1]:\n        return False\n    \n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    max_days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month == 2 and ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n        max_days_per_month[1] = 29\n    \n    if day < 1 or day > max_days_per_month[month - 1]:\n        return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if date == \"\":\n        return False\n    \n    month, day, year = date.split(\"-\")\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    max_days_per_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if day < 1 or day > max_days_per_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    import datetime\n    \n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_month[2] = 29\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    try:\n        datetime.datetime(year, month, day)\n    except ValueError:\n        return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    segments = date.split('-')\n    if len(segments) != 3:\n        return False\n    \n    month, day, year = segments\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    import re\n    if not date:\n        return False\n    pattern = re.compile(r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$\")\n    if not re.match(pattern, date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_month[2] = 29\n    if day > days_in_month[month]:\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if date == \"\" or len(date) != 10:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[2] = 29\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leapt_year(date):\n    if not date:\n        return False\n    \n    date_list = date.split('-')\n    \n    if len(date_list) != 3:\n        return False\n    \n    month, day, year = date_list\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31,\n        2: 29 if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 else 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month not in days_in_month or day < 1 or day > days_in_month[month]:\n        return False\n    \n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    if not date_str:\n        return False\n    \n    try:\n        month, day, year = map(int, date_str.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    day_list = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        day_list[2] = 29\n    \n    if day < 1 or day > day_list[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    day_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        if day < 1 or day > day_list[month - 1]:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0\n    \n    if not date_str:\n        return False\n    \n    date_components = date_str.split('-')\n    if len(date_components) != 3:\n        return False\n    \n    month, day, year = date_components\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31,\n        2: 29 if is_leap_year(year) else 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 29 if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 else 28, \n        3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, \n        11: 30, 12: 31\n    }\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    \n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = date_parts\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[2] = 29\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    \n    components = date.split('-')\n    \n    if len(components) != 3:\n        return False\n    \n    month, day, year = components\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            days_in_month[2] = 29\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    \n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = date_parts\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month == 2:\n        if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            days_in_month[2] = 29\n    \n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date_str):\n    import calendar\n    \n    if not date_str:\n        return False\n    \n    date_parts = date_str.split('-')\n    \n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = date_parts\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_per_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month == 2 and calendar.isleap(year):\n        days_per_month[2] = 29\n    \n    if day < 1 or day > days_per_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_per_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if month == 2 and year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_per_month[2] = 29\n    \n    if day < 1 or day > days_per_month[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        \n        if month < 1 or month > 12:\n            return False\n        \n        days_in_month = {\n            1: 31, 2: 29 if is_leap_year(year) else 28, 3: 31,\n            4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, \n            10: 31, 11: 30, 12: 31\n        }\n        \n        if day < 1 or day > days_in_month[month]:\n            return False\n        \n        return True\n        \n    except:\n        return False\n\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if is_leap_year(year):\n            days_in_month[2] = 29\n        if day < 1 or day > days_in_month[month]:\n            return False\n        return True\n    except:\n        return False\n\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    def is_leap_year(year):\n        return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\n    if date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    days_in_month = {\n        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    if month == 2 and is_leap_year(year):\n        days_in_month[2] = 29\n\n    if day < 1 or day > days_in_month[month]:\n        return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if day < 1 or day > days_in_month.get(month, 0):\n        return False\n    \n    if month == 2 and day == 29:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 != 0:\n                    return False\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    import datetime\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if day < 1 or day > days_in_month.get(month, 0):\n        return False\n    \n    if month == 2 and day == 29:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ]
        ],
        "level 3": [
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if ((y % 4 == 0 and y % 100 != 0) or y % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n\n    m, d, y = date[:2], date[3:5], date[6:]\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n\n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if not 1 <= m <= 12:\n        return False\n    \n    if not 1 <= d <= days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    try:\n        m, d, y = map(int, date.split('-'))\n    except:\n        return False\n    \n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    m, d, y = date[:2], date[3:5], date[6:]\n    \n    if not m.isnumeric() or not d.isnumeric() or not y.isnumeric():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if date.count('-') != 2:\n        return False\n    try:\n        m, d, y = map(int, date.split('-'))\n    except:\n        return False\n    if m < 1 or m > 12:\n        return False\n    days = [0, 31, 29 if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if d < 1 or d > days[m]:\n        return False\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if date.count('-') != 2:\n        return False\n        \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    days = [31, 29 if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if not (1 <= month <= 12):\n        return False\n    if not (1 <= day <= days[month - 1]):\n        return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if date.count('-') != 2:\n        return False\n    try:\n        m, d, y = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isnumeric() or not d.isnumeric() or not y.isnumeric():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m-1]:\n        return False\n    if m == 2 and d == 29 and not ((y % 4 == 0 and y % 100 != 0) or y % 400 == 0):\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days_in_month = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days_in_month[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    days = [0, 31, 29 if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month < 1 or month > 12 or day < 1 or day > days[month]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    try:\n        m, d, y = date.split('-')\n        if not m.isdigit() or not d.isdigit() or not y.isdigit():\n            return False\n        \n        m, d, y = int(m), int(d), int(y)\n        \n        if m < 1 or m > 12:\n            return False\n        \n        days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        \n        if d < 1 or d > days[m]:\n            return False\n        \n        return True\n    except:\n        return False\n\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date.count('-') != 2 or not all(char.isdigit() or char == '-' for char in date):\n        return False\n    \n    try:\n        m, d, y = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if m < 1 or m > 12:\n        return False\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if not isinstance(date, str):\n        return False\n\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n\n    if not all(char.isdigit() or char == '-' for char in date):\n        return False\n\n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n    \n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > days[month-1]:\n        return False\n\n    if month == 2 and day == 29:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n        \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if len(date) != 10:\n        return False\n    \n    if date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    \n    if not parts[0].isdigit() or not parts[1].isdigit() or not parts[2].isdigit():\n        return False\n    \n    m, d, y = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    if m < 1 or m > 12:\n        return False\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if len(date) != 10:\n        return False\n    if date.count('-') != 2 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    m, d, y = date[:2], date[3:5], date[6:]\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m-1]:\n        return False\n    if m == 2 and d == 29:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    parts = date.split('-')\n    if not all(part.isdigit() for part in parts):\n        return False\n    \n    m, d, y = map(int, parts)\n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not (len(date) == 10 and date.count('-') == 2):\n        return False\n    try:\n        m, d, y = map(int, date.split('-'))\n    except:\n        return False\n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m]:\n        return False\n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if len(date) != 10:\n        return False\n    \n    if date.count('-') != 2:\n        return False\n    \n    try:\n        m, d, y = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if not(1 <= m <= 12):\n        return False\n    \n    if not(1 <= d <= days[m]):\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10:\n        return False\n    if date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    if m < 1 or m > 12:\n        return False\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n\n    m, d, y = date.split('-')\n\n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n\n    m, d, y = int(m), int(d), int(y)\n    \n    if m < 1 or m > 12:\n        return False\n\n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if d < 1 or d > days[m]:\n        return False\n\n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date:\n        return False\n    \n    if len(date) != 10:\n        return False\n    \n    if date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    if m < 1 or m > 12:\n        return False\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10:\n        return False\n    if date.count('-') != 2:\n        return False\n    \n    m, d, y = date[:2], date[3:5], date[6:]\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    if m < 1 or m > 12:\n        return False\n    \n    days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if d < 1 or d > days[m]:\n        return False\n    \n    if m == 2 and d == 29:\n        if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0:\n            return True\n        else:\n            return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10:\n        return False\n    \n    if date.count('-') != 2:\n        return False\n    \n    if not date.replace('-', '').isdigit():\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    if not 1 <= m <= 12:\n        return False\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if not 1 <= d <= days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if not date or len(date) != 10 or date.count('-') != 2:\n        return False\n    \n    m, d, y = date.split('-')\n    \n    if not m.isdigit() or not d.isdigit() or not y.isdigit():\n        return False\n    \n    m, d, y = int(m), int(d), int(y)\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12 or d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ],
            [
                "\ndef valid_date_leap_year(date):\n    if len(date) != 10:\n        return False\n    if date.count('-') != 2:\n        return False\n    if not all(x.isdigit() for x in date[:2]+date[3:5]+date[6:]):\n        return False\n    \n    m, d, y = map(int, date.split('-'))\n    \n    days = [0, 31, 29 if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > days[m]:\n        return False\n    \n    return True\n",
                true
            ]
        ]
    },
    "1": {
        "level 1": [
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(str1[:-1]) == sorted(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(str1[:-1]) == sorted(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(str1[:-1]) == sorted(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(str1[:-1]) == sorted(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[-1].isalpha() and s2[-1].isalpha() and set(s1) == set(s2)\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[-1].isalpha() and s2[-1].isalpha() and set(s1) == set(s2)\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha():\n        return set(s1) == set(s2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(set(str1[:-1])) == sorted(set(str2[:-1]))\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return set(str1) == set(str2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return sorted(s1[:-1]) == sorted(s2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[:-1] == s2[:-1] and s1[-1].isalpha() and s2[-1].isalpha()\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    return s1[:-1] == s2[:-1] and s1[-1].isalpha() and s2[-1].isalpha()\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return sorted(str1[:-1]) == sorted(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha() and str1[-1] != str1[-2] and str2[-1] != str2[-2]:\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha():\n        return set(s1[:-1]) == set(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha() and str1[-1] != str1[-2] and str2[-1] != str2[-2]:\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha() and s1[-1].isspace() and s2[-1].isspace():\n        return True\n    return sorted(set(s1[:-1])) == sorted(set(s2[:-1]))\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha() and str1[:-1] == str2[:-1]:\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha():\n        return set(s1[:-1]) == set(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha() and s1[-1].isspace() and s2[-1].isspace():\n        return sorted(s1[:-1]) == sorted(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if str1[-1].isalpha() and str2[-1].isalpha():\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if len(s1) < 1 or len(s2) < 1:\n        return False\n    return sorted(s1[:-1]) == sorted(s2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    if s1[-1].isalpha() and s2[-1].isalpha() and s1[-1] != s2[-1]:\n        return set(s1[:-1]) == set(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    if not str1 or not str2:\n        return False\n    set1 = set(str1[:-1])\n    set2 = set(str2[:-1])\n    return set1 == set2 and str1[-1].isalpha() and str2[-1].isalpha()\n",
                false
            ],
            [
                "\ndef same_chars_last(s1: str, s2: str) -> bool:\n    s1 = s1[:-1] if s1[-1].isalpha() else s1\n    s2 = s2[:-1] if s2[-1].isalpha() else s2\n    return sorted(set(s1)) == sorted(set(s2))\n",
                false
            ],
            [
                "\ndef same_chars_last(str1, str2):\n    char_set1 = set(str1[:-1])\n    char_set2 = set(str2[:-1])\n    \n    if char_set1 == char_set2 and str1[-1].isalpha() and str2[-1].isalpha():\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    s1_chars = set(s1[:-1])\n    s2_chars = set(s2[:-1])\n    \n    if s1_chars == s2_chars and s1[-1].isalpha() and s2[-1].isalpha():\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s1, s2):\n    s1 = ''.join([c for c in s1 if c.isalpha()])\n    s2 = ''.join([c for c in s2 if c.isalpha()])\n    return sorted(s1) == sorted(s2)\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef same_chars(str1, str2):\n    def check_condition(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == \" \":\n            return True\n        else:\n            return False\n\n    if check_condition(str1) and check_condition(str2):\n        return set(str1) == set(str2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_condition(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        else:\n            return False\n    \n    if check_condition(s1) and check_condition(s2):\n        return set(s1) == set(s2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_condition(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if not check_condition(s1) or not check_condition(s2):\n        return False\n    \n    return set(s1) == set(s2)\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_condition(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n\n    if check_condition(s1) and check_condition(s2):\n        return set(s1) == set(s2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def is_condition_met(s):\n        if len(s) < 2:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n\n    if is_condition_met(str1) and is_condition_met(str2):\n        return set(str1) == set(str2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_string(s):\n        if len(s) <= 1:\n            return False\n        if s[-1].isalpha() and (len(s) == 2 or s[-2] == ' '):\n            return True\n        return False\n    \n    if check_string(str1) and check_string(str2):\n        return set(str1) == set(str2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_string(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and (len(s) == 1 or s[-2] == ' '):\n            return True\n        return False\n\n    if check_string(s1) and check_string(s2):\n        return set(s1) == set(s2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_single_char(s):\n        return len(s) == 1 and s.isalpha()\n    \n    def check_last_char(s):\n        return s[-1].isalpha() and (len(s) == 1 or s[-2] == ' ')\n    \n    if check_single_char(str1) and check_single_char(str2) and check_last_char(str1) and check_last_char(str2):\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_valid_string(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if not check_valid_string(str1) or not check_valid_string(str2):\n        return False\n    \n    return set(str1[:-1]) == set(str2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_condition(s):\n        return len(s) > 1 and s[-1].isalpha() and s[-2] == ' '\n    \n    if check_condition(str1) and check_condition(str2):\n        return set(str1) == set(str2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_names(name1, name2):\n    def check_string(s):\n        if len(s) <= 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_string(name1) and check_string(name2):\n        return set(name1[:-1]) == set(name2[:-1])\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_names(s1, s2):\n    def check_string(s):\n        if len(s) <= 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_string(s1) and check_string(s2):\n        return set(s1) == set(s2)\n    return False\n",
                false
            ],
            [
                "\ndef same_names(str1, str2):\n    def check_string(s):\n        if len(s) <= 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_string(str1) and check_string(str2):\n        return set(str1) == set(str2)\n    return False\n",
                false
            ],
            [
                "\ndef same_names(name1, name2):\n    def check_valid_string(name):\n        if len(name) < 2:\n            return False\n        if name[-1].isalpha() and name[-2] == ' ':\n            return True\n        return False\n\n    if check_valid_string(name1) and check_valid_string(name2):\n        return set(name1) == set(name2)\n    return False\n",
                false
            ],
            [
                "\ndef same_names(str1, str2):\n    def check_valid_string(s):\n        if len(s) <= 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_valid_string(str1) and check_valid_string(str2):\n        return set(str1) == set(str2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def verify_string(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if verify_string(s1) and verify_string(s2):\n        return set(s1[:-1]) == set(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_string(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if check_string(str1) and check_string(str2):\n        return set(str1[:-1]) == set(str2[:-1])\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_format(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n\n    if check_format(s1) and check_format(s2):\n        return set(s1[:-1]) == set(s2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def helper(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if helper(s1) and helper(s2):\n        return set(s1) == set(s2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def validate_string(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if not (validate_string(s1) and validate_string(s2)):\n        return False\n    \n    return set(s1[:-1]) == set(s2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_string(s):\n        return len(s) <= 1 or (s[-1].isalpha() and s[-2] == ' ')\n\n    if check_string(s1) and check_string(s2):\n        return set(s1[:-1]) == set(s2[:-1])\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_format(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n\n    if check_format(str1) and check_format(str2):\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_condition(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n\n    if check_condition(str1) and check_condition(str2):\n        return set(str1[:-1]) == set(str2[:-1])\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_valid_string(s):\n        if len(s) == 0 or len(s) == 1:\n            return False\n        if s[-1].isalpha() and s[-2] == \" \":\n            return True\n        return False\n    \n    if check_valid_string(str1) and check_valid_string(str2):\n        set1 = set(c for c in str1 if c.isalpha())\n        set2 = set(c for c in str2 if c.isalpha())\n        return set1 == set2\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def valid_string(s):\n        if len(s) < 2:\n            return False\n        if not s[-1].isalpha() or s[-2] != ' ':\n            return False\n        return True\n    \n    if not valid_string(str1) or not valid_string(str2):\n        return False\n    \n    return set(str1[:-1]) == set(str2[:-1])\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_string(s):\n        if len(s) == 0 or len(set(s)) == 1:\n            return True\n        elif s[-1].isalpha() and s[-2] == ' ':\n            return True\n        else:\n            return False\n    \n    if check_string(s1) and check_string(s2):\n        return set(s1) == set(s2)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_string(s):\n        if len(s) < 2:\n            return True\n        elif not s[-1].isalpha() or (len(s) > 1 and s[-2] == ' '):\n            return False\n        return True\n    \n    if check_string(str1) and check_string(str2):\n        return set(str1) == set(str2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(str1, str2):\n    def check_special_case(s):\n        if len(s) <= 1:\n            return True\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_special_case(str1) and check_special_case(str2):\n        return set(str1) == set(str2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_condition(s):\n        if len(s) == 0 or len(set(s)) == 1:\n            return True\n        if s[-1].isalpha() and s[-2] == ' ':\n            return True\n        return False\n    \n    if check_condition(s1) and check_condition(s2):\n        return set(s1) == set(s2)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars(s1, s2):\n    def check_string(s):\n        if not s or len(set(s)) == 1:\n            return True\n        if s[-1].isalpha() and (len(s) == 1 or s[-2] == ' '):\n            return True\n        return False\n    \n    if check_string(s1) and check_string(s2):\n        return set(s1) == set(s2)\n    return False\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return s.isalpha()\n        else:\n            return s[-1].isalpha() and s[-2] == ' '\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return s.isalpha()\n        elif s[-1].isalpha() and s[-2] == ' ':\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and s[-2] == ' '\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and s[-2] == ' '\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return s.isalpha()\n        else:\n            return s[-1].isalpha() and s[-2] == ' '\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return s.isalpha()\n        else:\n            return s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2)\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    \n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        if s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2):\n            return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        else:\n            return s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2)\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    \n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        if s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2):\n            return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_mast(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and (s[-2].isspace() or len(s) == 1)\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and (s[-2] == ' ' or len(s) == 2)\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s:\n            if s[-1].isalpha() and (len(s) == 1 or (len(s) > 1 and s[-2] == ' ')):\n                return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s == \"\":\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1].isalpha() and (s[-2] == \" \" or len(s) == 1):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        last_char = s[-1]\n        if last_char.isalpha():\n            if len(s) == 1:\n                return True\n            if len(s) > 1 and s[-2] == ' ':\n                return True\n        return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s == \"\":\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        if s[-1].isalpha() and (s[-2] == \" \" or len(s) == 1):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1].isalpha() and (len(s) == 1 or s[-2] == ' '):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 1 and s.isalpha():\n            return True\n        elif len(s) > 1 and s[-1].isalpha() and s[-2] == \" \" and s[:-1].isalpha():\n            return True\n        else:\n            return False\n\n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1].isalpha() and (len(s) == 1 or s[-2] == ' '):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 1 and s.isalpha():\n            return True\n        if len(s) > 1 and s[-1].isalpha() and s[-2] == ' ' and s[:-1].isalpha():\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0.replace(' ', '')) == sorted(s1.replace(' ', ''))\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 1 and s.isalpha():\n            return True\n        elif len(s) > 1 and s[-1].isalpha() and s[-2] == ' ':\n            return True\n        else:\n            return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return sorted(s0) == sorted(s1)\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and (s[-2].isspace() or len(s) == 1)\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and s[-2].isspace()\n    \n    return set(s0) == set(s1) and check_last_char(s0) and check_last_char(s1)\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s and (s[-1].isalpha() and (len(s) == 1 or s[-2] == ' ')):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return s.isalpha()\n        return s[-1].isalpha() and (s[-2].isspace() or len(s) == 2)\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s and (s[-1].isalpha() and (len(s) == 1 or s[-2].isspace())):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 0:\n            return False\n        elif len(s) == 1:\n            return s.isalpha()\n        else:\n            return s[-1].isalpha() and (s[-2] == ' ' or s[-2].isalpha())\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if s and (s[-1].isalpha() or (len(s) > 1 and s[-2] == ' ' and s[-1].isalpha())):\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) == 1 and s.isalpha():\n            return True\n        elif len(s) >= 2 and s[-1].isspace() and s[-2].isalpha():\n            return True\n        else:\n            return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        s = s.strip()\n        if len(s) == 1 and s.isalpha():\n            return True\n        if len(s) >= 3 and s[-2] == ' ' and s[-1].isalpha():\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                true
            ],
            [
                "\ndef same_chars_last(s0, s1):\n    def check_last_char(s):\n        if len(s) < 1:\n            return False\n        if len(s) == 1 and s.isalpha():\n            return True\n        if s[-1] == ' ' and s[-2].isalpha():\n            return True\n        return False\n    \n    if check_last_char(s0) and check_last_char(s1):\n        return set(s0) == set(s1)\n    return False\n",
                false
            ]
        ]
    },
    "2": {
        "level 1": [
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words:\n        if len(word) < 3:\n            return False\n    if s[-1].isalpha() and (s[-2] == \" \" or s[-2] in [\",\", \".\", \"!\", \"?\"]):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n\n    if last_char.isalpha() and not any(len(word) < 3 for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if not last_char.isalpha() or last_char in words[-1]:\n        return False\n    \n    for word in words:\n        if len(word) < 3:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words[-1]) == 1 and words[-1].isalpha():\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    if len(words[-1]) != 1 and words[-1][-1].isalpha():\n        return all(len(word) >= 3 for word in words)\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    if len(words[-1]) == 1 and words[-1].isalpha():\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_string):\n    words = input_string.split()\n    if len(words[-1]) == 1 and words[-1].isalpha():\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_string):\n    words = input_string.split()\n    if len(words[-1]) == 1 and words[-1].isalpha():\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if len(words) < 1:\n        return False\n    \n    if len(words[-1]) == 1 and words[-1].isalpha():\n        return True if all(len(word) >= 3 for word in words[:-1]) else False\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_str):\n    words = input_str.split()\n    last_char = input_str.strip()[-1]\n    \n    if len(words) == 0:\n        return False\n    \n    if len(words[-1]) == 1 and words[-1].isalpha():\n        if all(len(word) >= 3 for word in words[:-1]):\n            return True\n\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    last_char = last_word[-1]\n    if last_char.isalpha() and all(len(word) >= 3 for word in words):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    \n    words = s.split()\n    if len(words) == 0:\n        return False\n\n    last_char = s[-1]\n    \n    if last_char.isalpha() and all(len(word) >= 3 for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if s[-1].isalpha() and all(len(word) >= 3 for word in s.split()):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n\n    if last_char.isalpha() and all(len(word) >= 3 for word in words):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word.isalpha() or len(last_word) != 1:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(text):\n    words = text.split()\n    if not text or not text[-1].isalpha():\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    last_char = s[-1]\n    if not last_char.isalpha() or last_char.isspace():\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    words = s.split()\n    if not s or len(words[-1]) > 1 or any(len(word) < 3 for word in words):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if last_char.isalpha() and len(words) > 0 and all(len(word) >= 3 for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_next_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    if len(words[-1]) != 1 and len(words[-1]) >= 3:\n        for word in words:\n            if len(word) < 3:\n                return False\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n\n    if not last_char.isalpha() or last_char in set('aeiouAEIOU'):\n        return False\n    \n    for word in words:\n        if len(word) < 3:\n            return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if not words:\n        return False\n    last_char = words[-1][-1] if words[-1] else ''\n    \n    if last_char.isalpha() and len(words[-1]) == 1 and all(len(word) >= 3 for word in words[:-1]):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    \n    words = s.split()\n    for word in words:\n        if len(word) < 3:\n            return False\n    \n    last_char = s[-1]\n    if last_char.isalpha() and not any(word.endswith(last_char) for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if len(words) == 0 or len(words[-1]) < 3:\n        return False\n    \n    if last_char.isalpha() and all(len(word) >= 3 for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_str):\n    words = input_str.split()\n    last_char = input_str[-1]\n\n    if len(words) == 0:\n        return False\n\n    if len(words[-1]) == 0:\n        return True\n\n    if len(words[-1]) < 3 or not words[-1][-1].isalpha():\n        return False\n\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if len(words) == 0:\n        return False\n    \n    for word in words:\n        if len(word) < 3:\n            return False\n    \n    if last_char.isalpha() and len(last_char) == 1:\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1].isalpha() and len(s) == 1\n    min_three = all(len(word) >= 3 for word in words)\n    \n    return last_char and min_three\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) == 0:\n        return False\n    for word in words:\n        if len(word) < 3:\n            return False\n    if s[-1].isalpha() and len(s) > 1:\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    last_char = s[-1]\n    \n    if last_char.isalpha() and all(len(word) >= 3 for word in words):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words:\n        if len(word) < 3:\n            return False\n    if s[-1].isalpha() and len(s) > 0:\n        return True\n    return False\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    \n    if len(words) > 1:\n        for word in words[:-1]:\n            if len(word) < 3:\n                return False\n    \n    if s[-1].isalpha() and (len(s) < 2 or s[-2] == ' '):\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    \n    last_word = words[-1]\n    \n    if len(last_word) < 1 or not last_word[-1].isalpha():\n        return False\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    \n    if len(words[-2]) > 0 and words[-2][-1] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    \n    if len(words) < 2:\n        return False\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    \n    last_char = s[-1]\n    second_last_char = s[-2] if len(s) >= 2 else ''\n    \n    if last_char.isalpha() and second_last_char == ' ':\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    \n    if len(words[-1]) < 1:\n        return False\n    \n    if words[-1][-1].isalpha() and s[-2] == ' ':\n        return True\n    \n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if all(len(word) >= 3 for word in words[:-1]) and words[-1].isalpha() and len(words[-2]) == 1 and words[-2].isspace():\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if all(len(word) >= 3 for word in words[:-1]) and words[-1].isalpha() and len(words) >= 2 and words[-2] == \" \":\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    last_word = words[-1]\n    if len(last_word) == 1 and last_word.isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if len(words[-1]) == 1 and words[-1].isalpha() and len(s) > 1 and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1].isalpha() and len(words) > 1 and words[-2][-1] == ' ':\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(s: str) -> bool:\n    words = s.split()\n    if len(words) == 0:\n        return False\n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n    if len(words[-1]) < 3 or (len(words) > 1 and not (words[-2][-1] == \" \")):\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(input_string):\n    words = input_string.split()\n    \n    if len(words[-1]) >= 3 and all(len(word) >= 3 for word in words[:-1]) and all(word[-1] == ' ' for word in words[:-1]):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(sentence):\n    words = sentence.split()\n    \n    if len(words[-1]) >= 3 and all(len(word) >= 3 for word in words[:-1]) and all(word[-1] == ' ' for word in words[:-1]):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(sentence):\n    words = sentence.split()\n    \n    for i in range(len(words) - 1):\n        if len(words[i]) < 3:\n            return False\n        if i > 0:\n            if words[i-1][-1] != \" \" and words[i][0] != \" \":\n                return False\n    \n    return True\n",
                false
            ],
            [
                "\ndef check_last_fl_execute(input_string):\n    words = input_string.split()\n    \n    if len(words) == 0:\n        return False\n    \n    if len(words[-1]) >= 3:\n        for word in words[:-1]:\n            if len(word) < 3:\n                return False\n                break\n        \n        for i in range(len(input_string)-1):\n            if input_string[i].isalpha() and input_string[i+1] == ' ' and input_string[i+2].isalpha():\n                return False\n                break\n        \n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words[-1]) >= 3:\n        return False\n    if len(s) < 2 or s[-1].isalpha() or s[-2] != ' ':\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if not words[-1].isalpha() and len(words[-1]) == 1:\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if len(words[-1]) > 1 and words[-1][-1].isalpha() and (len(words[-1]) == 1 or words[-1][-2] == ' '):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    \n    last_char = s[-1]\n    second_last_char = s[-2] if len(s) > 1 else ''\n    \n    if last_char.isalpha() and last_char != ' ' and second_last_char == ' ':\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    \n    if len(words) < 2:\n        return False\n    \n    all_but_last = words[:-1]\n    \n    for word in all_but_last:\n        if len(word) < 3:\n            return False\n    \n    last_word = words[-1]\n    \n    if len(last_word) == 1 and last_word.isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if all(len(word) >= 3 for word in words[:-1]) and s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if len(words[-1]) > 0 and words[-1][-1].isalpha() and (len(words[-1]) == 1 or words[-1][-2] == ' '):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_str):\n    words = input_str.split()\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    \n    if len(words[-1]) > 0 and words[-1][-1].isalpha() and (len(words[-1]) == 1 or words[-1][-2] == ' '):\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(input_string):\n    words = input_string.split()\n    \n    if len(input_string) < 2:\n        return False\n    \n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n            \n    if input_string[-1].isalpha() and input_string[-2] == ' ':\n        return True\n    else:\n        return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if all(len(word) >= 3 for word in words[:-1]) and s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1][-1].isalpha() and (len(words[-1]) == 1 or words[-2][-1] == \" \"):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if len(words) > 0 and words[-1].isalpha() and (len(words) == 1 or len(words) > 1 and words[-2][-1] == \" \"):\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if len(words[-1]) < 2:\n        return False\n    if not words[-1][-1].isalpha():\n        return False\n    if len(words[-1]) > 1 and words[-1][-2] != \" \":\n        return False\n    return True\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    words = s.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1].isalpha() and s[-2] == \" \":\n        return True\n    return False\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(input_string):\n    words = input_string.split()\n    if len(words) < 2:\n        return False\n    for word in words[:-1]:\n        if len(word) < 3:\n            return False\n    if words[-1].isalpha() and len(words[-1]) == 1 and (len(words) == 1 or input_string[-2] == ' '):\n        return True\n    return False\n",
                true
            ]
        ],
        "level 3": [
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    elif s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-2] == ' ' and s[-1].isalpha()\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    elif len(s) > 1:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if any(len(e) < 3 for e in s.split(' ')[:-1]) or len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0 or any(len(e) < 3 for e in s.split(' ')[:-1]):\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n",
                true
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    \n    if len(s) == 1:\n        return s.isalpha()\n    \n    if s[-2] == ' ' and s[-1].isalpha():\n        return True\n    \n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-2] == ' ' and s[-1].isalpha()\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if s[-2] == ' ' and s[-1].isalpha():\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if s[-2] == ' ' and s[-1].isalpha():\n        return True\n    return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-2] == ' ' and s[-1].isalpha()\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    \n    if len(s) == 1:\n        return s.isalpha()\n    \n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    else:\n        return False\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' ' if len(s) > 1 else any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    if s[-1].isalpha() and s[-2] == ' ':\n        return True\n    return any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == ' '\n\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    return s[-1].isalpha() and s[-2] == \" \" and any(len(e) < 3 for e in s.split(' ')[:-1])\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return s.isalpha()\n    \n    return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ],
            [
                "\ndef check_last_char_min_three(s):\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return s.isalpha()\n    else:\n        return s[-1].isalpha() and s[-2] == ' '\n",
                false
            ]
        ]
    },
    "3": {
        "level 1": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = r'^[a-zA-Z]*[^AEIOUaeiou\\d\\s]{1,}\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0][0].isalpha() or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if not re.match(r\"^[^aeiouAEIOU]*[a-zA-Z][^aeiouAEIOU]*\\.\\b(txt|exe|dll)$\", file_name):\n        return 'No'\n    digits_count = sum(c.isdigit() for c in file_name)\n    if digits_count > 3:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if re.match(r'^[a-z]*[^aeiouAEIOU][a-z]*\\.[a-z]{3}$', file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if not re.match(r\"^[^aeiouAEIOU]*[a-zA-Z][^aeiouAEIOU.]*\\.[^.]*$\", file_name):\n        return 'No'\n    file_extension = file_name.split('.')[-1]\n    if file_extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if not re.match(r'^[a-z]*[^aeiouAEIOU\\d][a-z]*\\.(txt|exe|dll)$', file_name):\n        return 'No'\n    digits_count = sum(char.isdigit() for char in file_name)\n    if digits_count > 3:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0][0].isalpha() or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = r\"^[^aeiouAEIOU0-9]*[a-zA-Z][^aeiouAEIOU]*\\.(txt|exe|dll)$\"\n    if re.match(pattern, file_name) and sum(1 for char in file_name if char.isdigit()) <= 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = r'^[a-zA-Z[^aeiouAEIOU]]+\\.((txt)|(exe)|(dll))$'\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        if re.match(pattern, file_name):\n            return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        if file_name.count('.') == 1:\n            name, ext = file_name.split('.')\n            if name[0].isalpha() and not any(char.lower() in 'aeiou' for char in name):\n                if ext in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if not file_name:\n        return 'No'\n    \n    file_name_split = file_name.split('.')\n    if len(file_name_split) != 2:\n        return 'No'\n    \n    # Check first section\n    first_section = file_name_split[0]\n    if not first_section[0].isalpha() or any(char.lower() in 'aeiou' for char in first_section):\n        return 'No'\n    \n    # Check second section\n    second_section = file_name_split[1]\n    if second_section not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for digits in first section\n    if sum(char.isdigit() for char in first_section) > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        parts = file_name.split('.')\n        if len(parts) == 2 and parts[0][0].isalpha() and not any(char.lower() in 'aeiou' for char in parts[0]):\n            if parts[1] in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        parts = file_name.split('.')\n        if len(parts) == 2 and parts[1] in ['txt', 'exe', 'dll']:\n            if parts[0] and parts[0][0].isalpha() and not any(char in 'AEIOUaeiou' for char in parts[0]):\n                return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        sections = file_name.split('.')\n        if len(sections) == 2 and sections[0][0].isalpha() and not any(char.lower() in 'aeiou' for char in sections[0]):\n            if sections[1] in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    parts = file_name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    first_part = parts[0]\n    second_part = parts[1]\n    \n    if len(second_part) != 3 or second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not first_part[0].isalpha() or any(char.lower() in 'aeiou' for char in first_part):\n        return 'No'\n    \n    digit_count = sum(char.isdigit() for char in first_part)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = \"^[^AEIOUaeiou0-9]*[a-zA-Z][^AEIOUaeiou]*\\.[tT][xX][tT]|[eE][xX][eE]|[dD][lL][lL]$\"\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(name):\n    import re\n    if re.match(r'^[a-zA-Z0-9]{1,3}\\.[a-zA-Z]+\\.?(txt|exe|dll)$', name) and not any(char.lower() in 'aeiou' for char in name.split('.')[0]):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = r'^[a-zA-Z][^AEIOUaeiou]*\\d{0,3}\\.[txt|exe|dll]$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(name):\n    import re\n    if re.match('^[^aeiouAEIOU]*[a-zA-Z]\\d{0,3}\\.(txt|exe|dll)$', name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    pattern = \"^[^AEIOUaeiou0-9]*[A-Za-z][^AEIOUaeiou]*\\.[Tt][Xx][TtEe]?[Xx]?[Ee]?[DdLl]{0,2}$\"\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if any(char.lower() in 'aeiou' for char in file_name.split('.')[0]):\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0][0].isalpha() or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(s):\n    import string\n    \n    vowels = 'aeiouAEIOU'\n    \n    if len([char for char in s if char.isdigit()]) > 3:\n        return 'No'\n    \n    fragments = s.split('.')\n    if len(fragments) != 2:\n        return 'No'\n    \n    first_fragment = fragments[0]\n    second_fragment = fragments[1]\n    \n    if not first_fragment[0].isalpha() or any(char in vowels for char in first_fragment):\n        return 'No'\n    \n    if second_fragment not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        if len(re.findall(r'\\.', file_name)) == 1:\n            name, extension = file_name.split('.')\n            if name[0].isalpha() and not any(char.lower() in 'aeiou' for char in name):\n                if extension in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vewl(s):\n    import string\n    vowels = 'AEIOUaeiou'\n    if len([char for char in s if char.isdigit()]) > 3:\n        return 'No'\n    parts = s.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not parts[0][0].isalpha() or any(char.lower() in vowels for char in parts[0]):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if not re.match(\"^[a-zA-Z][^aeiouAEIOU]*\\d{0,3}\\.[txt|exe|dll]$\", file_name):\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    def check_vowel(s):\n        vowels = \"AEIOUaeiou\"\n        for char in s:\n            if char in vowels:\n                return False\n        return True\n    \n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(extension) != 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not name[0].isalpha() or not check_vowel(name):\n        return 'No'\n    \n    digit_count = sum(char.isdigit() for char in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3:\n        parts = file_name.split('.')\n        if len(parts) == 2 and parts[0][0].isalpha() and not any(char in 'AEIOUaeiou' for char in parts[0]) and parts[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    def is_valid_file_name(file_name):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        if file_name.count('.') != 1:\n            return False\n        name, extension = file_name.split('.')\n        if len(extension) != 3 or extension not in ['txt', 'exe', 'dll']:\n            return False\n        if not name[0].isalpha() or any(char.lower() in vowels for char in name):\n            return False\n        digit_count = sum(char.isdigit() for char in name)\n        if digit_count > 3:\n            return False\n        return True\n\n    if is_valid_file_name(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if re.match(r'^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+\\d{0,3}\\.[txt|exe|dll]$', file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    # Count digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    # Check if there is exactly one dot and split into two parts\n    if file_name.count('.') != 1:\n        return 'No'\n    file_name_parts = file_name.split('.')\n    \n    # Check the part before the dot\n    if not file_name_parts[0].isalpha() or len(file_name_parts[0]) == 0 or any(char.lower() in 'aeiou' for char in file_name_parts[0]):\n        return 'No'\n    \n    # Check the part after the dot\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the number of digits is at most 3\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    name, ext = file_name.split('.')\n    \n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    \n    if not name[0].isalpha() or len(name) == 1 or any([vowel in name.lower() for vowel in 'aeiou']):\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0].isalpha() or len(parts[0]) == 0 or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if re.match(r'^[a-zA-Z][^aeiouAEIOU.]*\\.[txt|exe|dll]$', file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0][0].isalpha() or not parts[0] or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import string\n    vowels = 'aeiouAEIOU'\n    extensions = {'txt', 'exe', 'dll'}\n\n    # Check for more than three digits\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n\n    # Check for exactly one period\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    \n    # Check name part\n    if len(name) == 0 or name[0] in vowels or any(c in vowels for c in name):\n        return 'No'\n\n    # Check extension\n    if extension not in extensions:\n        return 'No'\n\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if not re.match(r'^[^aeiouAEIOU]*[a-zA-Z][^aeiouAEIOU]*\\.[txt|exe|dll]$', file_name):\n        return 'No'\n    digits_count = sum(c.isdigit() for c in file_name)\n    if digits_count > 3:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    if not name or not extension:\n        return 'No'\n    if not name[0].isalpha() or any(char.lower() in 'aeiou' for char in name):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name[0].isalpha() or any(char.lower() in 'aeiou' for char in name):\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0].isalpha() or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(extension) < 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not name or any(char.lower() in 'aeiou' for char in name):\n        return 'No'\n    \n    digit_count = sum(char.isdigit() for char in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    before_dot, after_dot = file_name.split('.')\n    if len(re.findall(r'\\d', before_dot)) > 3:\n        return 'No'\n    \n    if not before_dot[0].isalpha() or any(char.lower() in 'aeiou' for char in before_dot):\n        return 'No'\n    \n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) <= 3 and len(file_name.split('.')) == 2:\n        before_dot, after_dot = file_name.split('.')\n        if before_dot and before_dot[0].isalpha() and not any(char.lower() in 'aeiou' for char in before_dot):\n            if after_dot in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    segments = file_name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    if not segments[0].isalpha() or any(char.lower() in 'aeiou' for char in segments[0]):\n        return 'No'\n    if segments[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    def has_vowel(s):\n        vowels = set(\"aeiouAEIOU\")\n        return any(char in vowels for char in s)\n    \n    segments = file_name.split(\".\")\n    \n    if len(segments) != 2:\n        return \"No\"\n    \n    if len(segments[1]) == 0 or segments[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    \n    if len(segments[0]) < 1 or len(segments[0]) > 3 or segments[0][0].isdigit() or has_vowel(segments[0]):\n        return \"No\"\n    \n    return \"Yes\"\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import re\n    if re.match(r\"^(?!.*[aeiouAEIOU])[a-zA-Z][^aeiouAEIOU]*\\d{0,3}\\.[txt|exe|dll]{3}$\", file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    import string\n    vowels = set('aeiouAEIOU')\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or name[0] not in string.ascii_letters or any(char in vowels for char in name):\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    vowels = \"aeiouAEIOU\"\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    name, extension = file_name.split('.')\n    if len(extension) != 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not name or any(char in vowels for char in name):\n        return 'No'\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(ext) != 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if not name or name[0].isnumeric() or any(char.lower() in 'aeiou' for char in name):\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    def has_vowel(s):\n        vowels = 'aeiouAEIOU'\n        return any(char in vowels for char in s)\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(extension) != 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if len(name) == 0 or has_vowel(name) or name[0].isdigit() or name[-1].isdigit():\n        return 'No'\n    \n    count_digit = sum(1 for char in name if char.isdigit())\n    \n    if count_digit > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    import re\n    if re.match(\"^[^aeiouAEIOU0-9]*[0-9]{0,3}\\\\.[^aeiouAEIOU]*\\.(txt|exe|dll)$\", file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    import re\n    regex = r\"^[^aeiouAEIOU0-9]*[0-9]{0,3}\\.[txt|exe|dll]+$\"\n    if re.match(regex, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    import re\n    if re.match(\"^[^aeiouAEIOU0-9]*[0-9]{0,3}\\.[a-zA-Z]*(txt|exe|dll)$\", file_name):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    import re\n    if re.match(\"^[^aeiouAEIOU]*[0-9]{0,3}\\.[a-zA-Z]{3}$\", file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_count_no_vowel(file_name):\n    def has_vowel(s):\n        vowels = set(\"aeiouAEIOU\")\n        return any(char in vowels for char in s)\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    name, ext = parts\n    \n    if len(ext) != 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if name == '' or has_vowel(name):\n        return 'No'\n    \n    num_count = sum(char.isdigit() for char in name)\n    if num_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if not (file_name.count('.') == 1 and file_name.split('.')[0].isalpha() and file_name.split('.')[0].isalnum() and file_name.split('.')[0].lower().islower() and file_name.split('.')[0].lower().isalpha() and not any(char.lower() in 'aeiou' for char in file_name.split('.')[0])):\n        return 'No'\n    elif len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    elif file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        yield 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        yield 'No'\n    if not parts[0].isalpha() or parts[0] == '' or any(char.lower() in 'aeiou' for char in parts[0]):\n        yield 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        yield 'No'\n    yield 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0].isalpha() or any(char.lower() in 'aeiou' for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0].isalpha() or len(parts[0]) == 0 or any(vowel in parts[0] for vowel in 'aeiouAEIOU'):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if file_name.count('.') != 1:\n        yield 'No'\n    else:\n        file_name_parts = file_name.split('.')\n        if not file_name_parts[0].isalpha() or any(char.lower() in 'aeiou' for char in file_name_parts[0]):\n            yield 'No'\n        elif file_name_parts[1] not in ['txt', 'exe', 'dll']:\n            yield 'No'\n        elif sum(char.isdigit() for char in file_name) > 3:\n            yield 'No'\n        else:\n            yield 'Yes'\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split(\".\")\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split(\".\")\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digits_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digits_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digits_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digits_count > 3:\n        return 'No'\n    \n    f_list = file_name.split(\".\")\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not digit_check(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not digit_check(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    file_types = ['txt', 'exe', 'dll']\n    if f_list[1] not in file_types:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(i.isdigit() for i in x) <= 3\n    if not digit_check(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda s: all(map(str.isdigit, s))\n    if len(list(filter(digit_check, file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not digit_check(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_types = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_types:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_extensions:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_extensions:\n        return 'No'\n    \n    if any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char in 'aeiouAEIOU' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: any(char.isdigit() for char in x)\n    if sum(digit_check(char) for char in file_name) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    is_digit = lambda x: x.isdigit()\n    if len(list(filter(is_digit, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_extensions:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    is_digit = lambda x: x.isdigit()\n    if len(list(filter(is_digit, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    is_valid_digit = lambda x: x.isdigit()\n    if len(list(filter(is_valid_digit, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or len(f_list[0]) == 0 or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_extensions:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    no_more_than_three_digits = lambda x: len([c for c in x if c.isdigit()]) <= 3\n    if not no_more_than_three_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(vowel in f_list[0].lower() for vowel in 'aeiou'):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x)\n    if check_digits(file_name) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    has_less_than_three_digits = lambda s: len([c for c in s if c.isdigit()]) <= 3\n    if not has_less_than_three_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    has_more_than_three_digits = lambda s: len([c for c in s if c.isdigit()]) > 3\n    if has_more_than_three_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha():\n        return 'No'\n    \n    allowed_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in allowed_extensions:\n        return 'No'\n    \n    if any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    has_three_digits = lambda s: sum(c.isdigit() for c in s) <= 3\n    if not has_three_digits(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if f_list[1] not in valid_extensions or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    is_valid = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not is_valid(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    is_digit = lambda x: x.isdigit()\n    if sum(map(is_digit, file_name)) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digits = lambda s: sum(c.isdigit() for c in s)\n    if digits(file_name) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char in f_list[0].lower() for char in 'aeiou'):\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    digit_check = lambda x: sum(1 for char in x if char.isdigit()) <= 3\n    if not digit_check(file_name):\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    \n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_vowel(file_name):\n    check_digit = lambda x: sum(c.isdigit() for c in x) <= 3\n    if not check_digit(file_name):\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha():\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll'] or any(char.lower() in 'aeiou' for char in f_list[0]):\n        return 'No'\n    return 'Yes'\n",
                true
            ]
        ]
    },
    "4": {
        "level 1": [
            [
                "\ndef file_name_check_no_uppercase(name):\n    import re\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if re.match(r'^[a-z0-9_]+$', parts[0]) is None:\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(s):\n    if not s:\n        return 'No'\n    if s.count('.') != 1:\n        return 'No'\n    name, extension = s.split('.')\n    if not name or not name[0].isalpha() or any(char.isupper() for char in name):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    import re\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if len(parts[0]) == 0 or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if len(name.split('.')) == 2:\n        before_dot, after_dot = name.split('.')\n        if before_dot.isalnum() and after_dot.isalpha() and after_dot in ['txt', 'exe', 'dll']:\n            if len([char for char in before_dot if char.isdigit()]) <= 3 and before_dot[0].isalpha() and not any(char.isupper() for char in before_dot):\n                return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') != 1:\n        return 'No'\n    \n    name_parts = name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    \n    if len(name_parts[0]) == 0 or name_parts[0][0].isdigit() or any(char.isupper() for char in name_parts[0]):\n        return 'No'\n    \n    if not name_parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    import re\n    if re.match(r'^[a-z]+\\d{0,3}\\.[a-z]+$', file_name) and file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    before_period = file_parts[0]\n    after_period = file_parts[1]\n    \n    if len(after_period) != 3 or after_period not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not before_period.isalpha() or before_period.isupper() or before_period == '':\n        return 'No'\n    \n    digits_count = sum(c.isdigit() for c in before_period)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    filename, extension = file_name.split('.')\n    if not filename.islower() or filename == '' or re.search(r'[A-Z]', filename):\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') == 1:\n        name_parts = file_name.split('.')\n        if len(name_parts) == 2 and name_parts[0].isalpha() and name_parts[0].islower() and not any(char.isupper() for char in name_parts[0]) and len(name_parts[0]) > 0 and len(name_parts[1]) <= 3 and name_parts[1].isdigit() and name_parts[1].isnumeric() and name_parts[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    import re\n    if re.match(r\"^[a-z]+\\d{0,3}\\.[a-z]+(txt|exe|dll)$\", file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    digits_count = sum(c.isdigit() for c in name)\n    dots_count = name.count('.')\n    \n    if digits_count >= 4 or dots_count != 1:\n        return 'No'\n    \n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    initial_substring = parts[0]\n    final_substring = parts[1]\n    \n    if not initial_substring.isalpha() or initial_substring.isupper() or not initial_substring or final_substring not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') == 1:\n        parts = name.split('.')\n        if parts[0].isalpha() and parts[0].islower() and parts[0] != '' and len(parts) == 2:\n            if parts[1] in ['txt', 'exe', 'dll']:\n                digits_count = sum(c.isdigit() for c in name)\n                if digits_count < 4:\n                    return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(s):\n    if len([char for char in s if char.isdigit()]) < 4 and s.count('.') == 1:\n        parts = s.split('.')\n        if len(parts) == 2 and parts[0].isalpha() and parts[0].islower() and parts[0] and parts[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    \n    if len([c for c in name if c.isdigit()]) >= 4:\n        return 'No'\n    \n    if not name.islower() or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') == 1:\n        parts = name.split('.')\n        initial_substring = parts[0]\n        final_substring = parts[1]\n        \n        if len([c for c in initial_substring if c.isupper()]) == 0 and initial_substring.isalpha() and len([c for c in final_substring if c.isdigit()]) < 4 and final_substring in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    \n    return 'No'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') != 1:\n        return 'No'\n    segments = name.split('.')\n    if len(segments[0]) == 0:\n        return 'No'\n    if len([c for c in segments[0] if c.isupper()]) > 0:\n        return 'No'\n    if len(segments[1]) != 3:\n        return 'No'\n    if not segments[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not segments[0][0].isalpha():\n        return 'No'\n    if len([c for c in segments[0] if c.isdigit()]) > 3:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\nimport re\n\ndef file_name_check_no_uppercase(name):\n    pattern = r\"^[a-z][a-z0-9]{0,2}\\.[a-z]{3}$\"\n    if re.match(pattern, name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    segments = name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    if not segments[0].isalpha() or segments[0].isupper() or not segments[0]:\n        return 'No'\n    if segments[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any(c.isupper() for c in name):\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') != 1:\n        return 'No'\n    \n    segments = name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    \n    first_segment = segments[0]\n    second_segment = segments[1]\n    \n    if not first_segment or first_segment[0].isupper() or any(c.isupper() for c in first_segment):\n        return 'No'\n    \n    if not second_segment in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if len([c for c in first_segment if c.isdigit()]) > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    segments = file_name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    \n    first_segment = segments[0]\n    second_segment = segments[1]\n    \n    if not first_segment or first_segment[0].isupper() or first_segment.isnumeric() or len([char for char in first_segment if char.isnumeric()]) > 3:\n        return 'No'\n    \n    if second_segment not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    import re\n    pattern = r\"^[a-z][^A-Z]*\\d{0,3}\\.[(txt)|(exe)|(dll)]$\"\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if len(name) < 5:\n        return 'No'\n    \n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    first_part = parts[0]\n    second_part = parts[1]\n    \n    if not first_part[0].isalpha() or first_part[0].isupper():\n        return 'No'\n    \n    if not first_part[1:].isalnum() or sum(c.isdigit() for c in first_part) > 3:\n        return 'No'\n    \n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if len(name) < 5:\n        return 'No'\n    \n    parts = name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    first_part = parts[0]\n    second_part = parts[1]\n    \n    if not first_part[0].islower():\n        return 'No'\n    \n    if not first_part[1:].isalpha():\n        return 'No'\n    \n    if not second_part in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    count_digits = sum(c.isdigit() for c in name)\n    if count_digits > 3:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    import re\n    pattern = r\"^[a-z][a-z0-9]*\\d{0,3}\\.[txt|exe|dll]{3}$\"\n    \n    if re.match(pattern, name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    import re\n    pattern = r'^[a-z][a-z0-9]{0,2}\\.[tT][xXeE][tTxeE]$'\n    if re.match(pattern, name):\n        return 'Yes'\n    else:\n        return 'No'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    if len(file_name.split('.')[0]) == 0 or not file_name.split('.')[0][0].isalpha() or any(char.isupper() for char in file_name.split('.')[0]):\n        return 'No'\n    \n    if len(file_name.split('.')[1]) not in [3, 4] or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    segments = file_name.split('.')\n    \n    if len(segments) != 2:\n        return 'No'\n    \n    if not segments[0].isalpha() or segments[0].isupper() or len(segments[0]) == 0:\n        return 'No'\n    \n    if len([c for c in segments[0] if c.isdigit()]) > 3:\n        return 'No'\n    \n    if segments[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    file_name_list = file_name.split('.')\n    file_name = file_name_list[0]\n    extension = file_name_list[1]\n    \n    if not file_name.isalnum():\n        return 'No'\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if not file_name[0].isalpha() or file_name[0].isupper():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if name.count('.') != 1:\n        return 'No'\n    \n    segments = name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    \n    if not segments[0].isalpha() or segments[0].isupper() or len(segments[0]) == 0:\n        return 'No'\n    \n    if segments[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    \n    file_parts = file_name.split(\".\")\n    if len(file_parts[0]) == 0 or file_parts[0][0].isnumeric() or file_parts[0].isupper():\n        return 'No'\n    \n    if len(file_parts[1]) > 3 or file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    name, ext = parts\n    if not name or not name[0].isalpha() or any(c.isupper() for c in name):\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    first_part, second_part = parts\n    if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n        return 'No'\n    if second_part.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    name_parts = name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    \n    if not name_parts[0] or not name_parts[0][0].isalpha() or any(char.isupper() for char in name_parts[0]):\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if name_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    if name.count('.') != 1:\n        return 'No'\n    \n    parts = name.split('.')\n    if not parts[0] or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    import re\n    \n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    \n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    first_part, second_part = parts\n    if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n        return 'No'\n    \n    allowed_extensions = {'txt', 'exe', 'dll'}\n    if second_part not in allowed_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    \n    segments = file_name.split('.')\n    if len(segments) != 2:\n        return 'No'\n    \n    first_part, second_part = segments\n    if not first_part or not first_part[0].isalpha() or any(c.isupper() for c in first_part):\n        return 'No'\n    \n    allowed_extensions = ['txt', 'exe', 'dll']\n    if second_part not in allowed_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(name):\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    \n    parts = name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    first_part, second_part = parts\n    if not first_part or not first_part[0].isalpha() or any(c.isupper() for c in first_part):\n        return 'No'\n    \n    allowed_extensions = ['txt', 'exe', 'dll']\n    if second_part not in allowed_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    if len(file_parts) != 2:\n        return 'No'\n    \n    first_part = file_parts[0]\n    second_part = file_parts[1]\n    \n    if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n        return 'No'\n    \n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(1 for char in filename if char.isdigit()) > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if len([c for c in filename if c.isdigit()]) > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    prefix, extension = parts\n    \n    if not prefix or not prefix[0].isalpha() or any(c.isupper() for c in prefix):\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    num_count = sum([1 for char in filename if char.isdigit()])\n    \n    if num_count > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    first_part, extension = parts\n    if not first_part or not first_part[0].isalpha() or any(char.isupper() for char in first_part):\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    first_part, second_part = parts\n    \n    if not first_part or first_part[0].isdigit() or any(c.isupper() for c in first_part):\n        return 'No'\n    \n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(1 for c in filename if c.isdigit()) >= 4:\n        return 'No'\n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0]:\n        return 'No'\n    if not parts[0][0].isalpha():\n        return 'No'\n    if any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if len([char for char in filename if char.isdigit()]) >= 4:\n        return 'No'\n    \n    if filename.count('.') != 1:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts[0], parts[1]\n    \n    if not name or not name[0].isalpha() or any(char.isupper() for char in name):\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) >= 4:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts\n    if not name or not name[0].isalpha() or any(c.isupper() for c in name) or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) >= 4:\n        return 'No'\n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0]:\n        return 'No'\n    if not parts[0][0].isalpha():\n        return 'No'\n    if any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) >= 4:\n        return 'No'\n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    if not name or not name[0].isalpha() or any(c.isupper() for c in name) or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    name_split = file_name.split('.')\n    if len(name_split) != 2:\n        return 'No'\n    if not name_split[0]:\n        return 'No'\n    if not name_split[0][0].isalpha():\n        return 'No'\n    if any(char.isupper() for char in name_split[0]):\n        return 'No'\n    if name_split[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    lead, extension = parts\n    if not lead.isalpha() or any(c.isupper() for c in lead):\n        return 'No'\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    lead, ext = parts\n    if not lead or not lead[0].isalpha() or any(char.isupper() for char in lead):\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or parts[0][0].isdigit() or any(char.isupper() for char in parts[0]):\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef check_no_uppercase(file_name):\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n    import re\n\n    # Check for more than three digits\n    if sum(c.isdigit() for c in filename) > 3:\n        return 'No'\n\n    # Split the filename into two parts (name and extension)\n    parts = filename.split('.')\n    \n    # Check if there are exactly two parts\n    if len(parts) != 2:\n        return 'No'\n    \n    name, ext = parts\n\n    # Check if the name follows the specified criteria\n    if not name or not name[0].isalpha() or any(c.isupper() for c in name):\n        return 'No'\n\n    # Check if the extension is valid\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) > 3:\n        return 'No'\n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(char.isdigit() for char in filename) > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n\n    if not parts[0] or not parts[0][0].isalpha() or any(char.isupper() for char in parts[0]):\n        return 'No'\n\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(filename):\n    if sum(c.isdigit() for c in filename) > 3:\n        return 'No'\n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_upperase(filename):\n    if sum(1 for c in filename if c.isdigit()) > 3:\n        return 'No'\n    \n    parts = filename.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or not parts[0][0].isalpha() or any(c.isupper() for c in parts[0]):\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return \"No\"\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or f_list[0] == \"\" or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    \n    return \"Yes\"\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return \"No\"\n    \n    f_list = file_name.split(\".\")\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    \n    return \"Yes\"\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    # Check if the number of digits exceeds three\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    # Split the file name at the dot\n    f_list = file_name.split('.')\n    \n    # Check various conditions for validity\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    count_digits = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if count_digits > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2:\n        return 'No'\n    if not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]):\n        return 'No'\n    if f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    digits_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digits_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    check_digits = lambda x: x.isdigit()\n    if len(list(filter(check_digits, file_name))) > 3:\n        return 'No'\n\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(letter.isupper() for letter in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    check_digits = lambda x: x.isdigit()\n    if len(list(filter(check_digits, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(x.isupper() for x in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    check_digits = lambda x: x.isdigit()\n    if len(list(filter(check_digits, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    f_list = file_name.split('.')\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in file_name) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    # Count digits in file_name\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    # Split file_name by dot\n    f_list = file_name.split('.')\n    \n    # Check conditions for valid file name\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    num_digits = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if num_digits > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    # Check number of digits\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    # Split the file name by dot\n    f_list = file_name.split('.')\n    \n    # Check conditions for validity\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    num_digits = len(list(filter(lambda x: x.isdigit(), file_name)))\n    \n    if num_digits > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or f_list[0].isupper() or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercape(file_name):\n    digit_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digit_count > 3:\n        return 'No'\n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercape(file_name):\n    digits_count = len(list(filter(lambda x: x.isdigit(), file_name)))\n    if digits_count > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in file_name) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercape(file_name):\n    check_digits = lambda x: x.isdigit()\n    if len(list(filter(check_digits, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in file_name) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_check_no_uppercase(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x)\n    \n    if len(list(filter(check_digits, file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                true
            ],
            [
                "\ndef file_name_check_no_uppercape(file_name):\n    f_digits = list(filter(lambda x: x.isdigit(), file_name))\n    if len(f_digits) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(char.isupper() for char in file_name) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercase(file_name):\n    check_digits = lambda x: sum(c.isdigit() for c in x)\n    if check_digits(file_name) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or not f_list[0] or not f_list[0][0].isalpha() or any(c.isupper() for c in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercase(file_name):\n    f_list = file_name.split('.')\n    \n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ],
            [
                "\ndef file_name_tech_no_uppercase(file_name):\n    if len(list(filter(lambda x: x.isdigit(), file_name))) > 3:\n        return 'No'\n    \n    f_list = file_name.split('.')\n    \n    if len(f_list) != 2 or f_list[0] == '' or not f_list[0][0].isalpha() or any(char.isupper() for char in f_list[0]) or f_list[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
                false
            ]
        ]
    }
}