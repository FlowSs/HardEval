{
    "0": {
        "level 1": [
            [
                "\ndef encrypt_two_times(s):\n    shift1 = ''.join([chr((ord(char) - ord('a') + 4) % 26 + ord('a')) for char in s if char.isalpha()])\n    shift2 = ''.join([chr((ord(char) - ord('a') + 5) % 26 + ord('a')) for char in shift1])\n    return shift2\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n                result = chr((ord(result[-1]) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n                result = chr((ord(result[-1]) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 21) % 26 + ord('a')) if 'a' <= c <= 'z'\n                   else chr((ord(c) - ord('A') + 21) % 26 + ord('A')) if 'A' <= c <= 'Z'\n                   else c for c in s)\n\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 5) % 26 + ord('a')) if 'a' <= c <= 'z'\n                   else chr((ord(c) - ord('A') + 5) % 26 + ord('A')) if 'A' <= c <= 'Z'\n                   else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            ascii_offset = 65 if c.isupper() else 97\n            result += chr((ord(c) - ascii_offset + 2) % 26 + 4 + ascii_offset)\n            result += chr((ord(c) - ascii_offset + 7) % 26 + 4 + ascii_offset)\n        else:\n            result += c\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                result += chr((ord(letter) - 65 + 4 + 5) % 26 + 65)\n            else:\n                result += chr((ord(letter) - 97 + 4 + 5) % 26 + 97)\n        else:\n            result += letter\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            unicode = ord(ch)\n            shift = 4 if ch.islower() else 4\n            new_unicode = (unicode - ord('a') + shift) % 26 + ord('a')\n            new_unicode = (new_unicode - ord('a') + 5) % 26 + ord('a')\n            encrypted += chr(new_unicode)\n        else:\n            encrypted += ch\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 - 4) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 - 4) % 26 + 65)\n        else:\n            result += char\n\n    return result\n\nfinal_result = \"\"\nfor char in encrypt_two_times(text):\n    if char.isalpha():\n        if char.islower():\n            final_result += chr((ord(char) - 97 - 5) % 26 + 97)\n        else:\n            final_result += chr((ord(char) - 65 - 5) % 26 + 65)\n    else:\n        final_result += char\n\nreturn final_result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)\n    return ''.join(chr((ord(c) - ord('a') + 5) % 26 + ord('a')) for c in s)\n\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset - 4 + 26) % 26 + 4 + ascii_offset)\n            result += chr((ord(char) - ascii_offset - 4 + 26) % 26 + 4 + ascii_offset)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                result += chr((ord(letter) - 65 - 4 + 26) % 26 + 65)\n                result += chr((ord(result[-1]) - 65 - 5 + 26) % 26 + 65)\n            else:\n                result += chr((ord(letter) - 97 - 4 + 26) % 26 + 97)\n                result += chr((ord(result[-1]) - 97 - 5 + 26) % 26 + 97)\n        else:\n            result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(input_string):\n    encrypted_string = \"\"\n    for char in input_string:\n        if char.isalpha():\n            ascii_val = ord(char.lower())\n            if ascii_val >= ord('a') + 4:\n                encrypted_string += chr(ascii_val - 4)\n            else:\n                encrypted_string += chr(ascii_val - 4 + 26)\n            if encrypted_string[-1].isalpha():\n                if encrypted_string[-1].islower():\n                    encrypted_string = encrypted_string[:-1] + chr(ord(encrypted_string[-1]) + 5)\n                else:\n                    encrypted_string = encrypted_string[:-1] + chr(ord(encrypted_string[-1]) - 31)\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_text += chr((ord(char) - 65 - 4 + 26) % 26 + 65)\n                encrypted_text += chr((ord(char) - 65 - 9 + 26) % 26 + 65)\n            else:\n                encrypted_text += chr((ord(char) - 97 - 4 + 26) % 26 + 97)\n                encrypted_text += chr((ord(char) - 97 - 9 + 26) % 26 + 97)\n        else:\n            encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_text += chr((ord(char) - ascii_offset - 4) % 26 + 4 * 26 + 5)\n        else:\n            encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 - 4 + 26) % 26 + 97)\n                result += chr((ord(char) - 97 - 9 + 26) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 - 4 + 26) % 26 + 65)\n                result += chr((ord(char) - 65 - 9 + 26) % 26 + 65)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr((ord(char) - 97 - 4 + 26) % 26 + 97) # shift by 4\n                encrypted_string = chr((ord(encrypted_string[-1]) - 97 - 5 + 26) % 26 + 97) # shift by 5\n            else:\n                encrypted_string += chr((ord(char) - 65 - 4 + 26) % 26 + 65) # shift by 4\n                encrypted_string = chr((ord(encrypted_string[-1]) - 65 - 5 + 26) % 26 + 65) # shift by 5\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    shift1 = ''.join([chr((ord(char) - ord('a') - 4) % 26 + ord('a')) for char in s])\n    shift2 = ''.join([chr((ord(char) - ord('a') - 5) % 26 + ord('a')) for char in shift1])\n    return shift2\n",
                false
            ],
            [
                "\ndef encrypt_two_times(txt):\n    shift_table = str.maketrans('abcdefghijklmnopqrstuvwxyz', 'wxyzabcdefghijklmnopqrstuv')\n    first_shift = txt.translate(shift_table)\n    second_shift = first_shift.translate(shift_table)\n    return second_shift\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    shift1 = 4\n    shift2 = 5\n    alphabet = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet1 = alphabet[shift1:] + alphabet[:shift1]\n    shifted_alphabet2 = alphabet[shift2:] + alphabet[:shift2]\n    encrypt1 = str.maketrans(alphabet, shifted_alphabet1)\n    encrypted_text = s.translate(encrypt1)\n    encrypt2 = str.maketrans(alphabet, shifted_alphabet2)\n    final_encrypted_text = encrypted_text.translate(encrypt2)\n    return final_encrypted_text\n",
                true
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset - 4 + 26) % 26 + 4 + ascii_offset)\n            result += chr((ord(char) - ascii_offset - 5 + 26) % 26 + 5 + ascii_offset)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr(((ord(char) - ascii_offset - 4 + 26) % 26) + 4 + ascii_offset)\n            result += chr(((ord(char) - ascii_offset - 5 + 26) % 26) + 5 + ascii_offset)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    shift1 = 4\n    shift2 = 5\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            unicode_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - unicode_offset + shift1) % 26 + unicode_offset)\n            encrypted_char = chr((ord(encrypted_char) - unicode_offset + shift2) % 26 + unicode_offset)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
                true
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 - 4) % 26 + 97)\n                result = chr((ord(result[-1]) - 97 - 5) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 - 4) % 26 + 65)\n                result = chr((ord(result[-1]) - 65 - 5) % 26 + 65)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') - 4 + 26) % 26 + ord('a')) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((((ord(char) - ascii_offset - 4) % 26) + 5) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr(((ord(char) - ascii_offset - 4 + 26) % 26) + 4 + 5)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                encrypted = chr((ord(encrypted[-1]) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                encrypted = chr((ord(encrypted[-1]) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n    return encrypted\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 - 4) % 26 + 97 + 5)\n            else:\n                result += chr((ord(char) - 65 - 4) % 26 + 65 + 5)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a') + 5) if 'a' <= c <= 'z' \n                   else chr((ord(c) - ord('A') + 4) % 26 + ord('A') + 5) if 'A' <= c <= 'Z' \n                   else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 4) % 26 + 1 + 5)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.islower():\n            result += chr((ord(char) - 97 + 4) % 26 + 97)\n            result = result[-1] + result[:-1]\n            result = chr((ord(result[0]) - 97 + 5) % 26 + 97) + result[1:]\n    return result\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                # Shift character down by 4 places\n                ch = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                # Shift character down by 5 places\n                ch = chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                # Similar process for uppercase characters\n                ch = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                ch = chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr(((ord(char) - 97 + 4) % 26) + 97)\n                result = chr(((ord(result[-1]) - 97 + 5) % 26) + 97)\n            else:\n                result += chr(((ord(char) - 65 + 4) % 26) + 65)\n                result = chr(((ord(result[-1]) - 65 + 5) % 26) + 65)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            initial_shift = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            final_shift = chr((ord(initial_shift) - ord('a') + 5) % 26 + ord('a'))\n            result += final_shift\n        else:\n            result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n                result = chr((ord(result[-1]) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                result += chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n                result = chr((ord(result[-1]) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += c\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n                char = chr((ord(char) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                char = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n                char = chr((ord(char) - ord('A') + 5) % 26 + ord('A'))\n        result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.islower():\n            encrypted += chr((ord(ch) - 97 + 4) % 26 + 97)\n            encrypted = chr((ord(encrypted[-1]) - 97 + 5) % 26 + 97)\n        else:\n            encrypted += ch\n    return encrypted\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr((ord(char) - 97 + 4 + 5) % 26 + 97)\n        else:\n            result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 9) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n    return ''.join(chr((ord(c) - ord('a') + 14) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr((ord(char) - 97 + 4) % 26 + 97)\n            result = chr((ord(result[-1]) - 97 + 5) % 26 + 97)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            result += chr((ord(letter) - 97 + 4) % 26 + 97)\n            result = chr((ord(result[-1]) - 97 + 5) % 26 + 97)\n        else:\n            result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_images(text):\n    encrypted_text = \"\"\n    for character in text:\n        if character.isalpha() and character.islower():\n            encrypted_text += chr(((ord(character) - 97 + 4 + 5) % 26) + 97)\n        else:\n            encrypted_edxt += character\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_two_images(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_string += chr((ord(char) - 65 + 4 + 5) % 26 + 65)\n            else:\n                encrypted_char = chr((ord(char) - 97 + 4 + 5) % 26 + 97)\n                encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
                false
            ],
            [
                "\ndef encrypt_two_images(s):\n    return ''.join([chr(((ord(ch) - ord('a') + 4 + 5) % 26) + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s])\n",
                false
            ],
            [
                "\ndef encrypt_two_images(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_text += chr((((ord(char) - 65 + 4) % 26) + 5) % 26 + 65)\n            else:\n                encrypted_text += chr((((ord(char) - 97 + 4) % 26) + 5) % 26 + 97)\n        else:\n            encrypted_edd_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_two_images(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha() and char.islower():\n            char = chr((ord(char) - ord('a') + 4 + 5) % 26 + ord('a'))\n        encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') - 4 + 26) % 26 + ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') - 4 + 26) % 26 + ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n    return encrypted\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                result += chr(((ord(char) - 97 + 10) % 26) + 97)\n            else:\n                result += chr(((ord(char) - 65 + 10) % 26) + 65)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') - 4 + 26) % 26 + ord('a') + 5) if 'a' <= c <= 'z' else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 - 4 + 26) % 26 + 97 + 5)\n            else:\n                result += chr((ord(char) - 65 - 4 + 26) % 26 + 65 + 5)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower():\n                temp = ord(letter) + 4\n                if temp > ord('z'):\n                    temp -= 26\n                letter = chr(temp)\n                temp = ord(letter) + 5\n                if temp > ord('z'):\n                    temp -= 26\n                letter = chr(temp)\n            else:\n                temp = ord(letter) + 4\n                if temp > ord('Z'):\n                    temp -= 26\n                letter = chr(temp)\n                temp = ord(letter) + 5\n                if temp > ord('Z'):\n                    temp -= 26\n                letter = chr(temp)\n        result += letter\n    return result\n\nencrypt_two_times(\"abcd\")\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha() and ch.islower():\n            encrypted += chr(((ord(ch) - 97 + 4) % 26) + 97)\n            encrypted = chr(((ord(encrypted[-1]) - 97 + 5) % 26) + 97)\n        else:\n            encrypted += ch\n    return encrypted\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha() and char.islower():\n            # Shift 4 steps down\n            char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            # Shift 5 steps down\n            char = chr((ord(char) - ord('a') + 5) % 26 + ord('a'))\n        result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4 * 26 + 4) % 26 + ord('a')) if 'a' <= c <= 'z' \n                   else chr((ord(c) - ord('a') + 4 * 26 + 5) % 26 + ord('a')) if 'A' <= c <= 'Z'\n                   else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha() and char.islower():\n            # Shift down the alphabet 4 steps\n            first_shift = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            # Shift down the alphabet 5 steps from the position after the first shift\n            result += chr((ord(first_shift) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            result += chr((ord(letter) - 97 + 4) % 26 + 97)\n            result = chr((ord(result[-1]) - 97 + 5) % 26 + 97)\n        else:\n            result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') - 4 + 26) % 26 + ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') - 4 + 26) % 26 + ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n    return encrypted\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr(((ord(char) - 97 + 4) % 26) + 97 + 5) % 26 + 97\n            else:\n                result += chr(((ord(char) - 65 + 4) % 26) + 65 + 5) % 26 + 65\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') - 4 + 5) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_code = ord(char)\n            if 97 <= ascii_code <= 122: # 'a' to 'z'\n                ascii_code = 97 + (ascici_code - 97 + 4) % 26\n                ascii_code = 97 + (ascii_code - 97 + 5) % 26\n                result += chr(ascii_code)\n            else: # 'A' to 'Z'\n                ascii_code = 65 + (ascii_code - 65 + 4) % 26\n                ascii_code = 65 + (ascii_code - 65 + 5) % 26\n                result += chr(ascii_code)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower():\n                temp = ord(letter) + 4\n                if temp > ord('z'):\n                    temp -= 26\n                letter = chr(temp)\n                temp = ord(letter) + 5\n                if temp > ord('z'):\n                    temp -= 26\n                letter = chr(temp)\n        result += letter\n    return result\n",
                true
            ]
        ],
        "level 3": [
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''.join(chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if 'a' <= ch <= 'z'\n                   else ch for ch in s)\n    return ''.join(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if 'a' <= ch <= 'z'\n                   else ch for ch in tmp)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                ch = chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n                ch = chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\"))\n            else:\n                ch = chr((ord(ch) - ord(\"A\") + 4) % 26 + ord(\"A\"))\n                ch = chr(((ord(ch) - ord(\"A\") + 5) % 26) + ord(\"A\"))\n        tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n\n    encrypted = \"\"\n    for ch in tmp:\n        if ch.islower():\n            encrypted += chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\"))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n\n    result = ''\n    for ch in tmp:\n        if ch.islower():\n            result += chr((ord(ch) - ord(\"a\") + 5) % 26 + ord(\"a\"))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n\n    encrypted = \"\"\n    for ch in tmp:\n        if ch.islower():\n            encrypted += chr((ord(ch) - ord(\"a\") + 5) % 26 + ord(\"a\"))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''.join(chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if 'a' <= ch <= 'z'\n                   else chr((ord(ch) - ord('A') + 4) % 26 + ord('A')) if 'A' <= ch <= 'Z'\n                   else ch for ch in s)\n    encrypted = ''.join(chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if 'a' <= ch <= 'z'\n                         else chr((ord(ch) - ord('A') + 5) % 26 + ord('A')) if 'A' <= ch <= 'Z'\n                         else ch for ch in tmp)\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    encrypted = ''\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n\n    encrypted = \"\"\n    for ch in tmp:\n        if ch.isalpha():\n            encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n\n    result = ''\n    for ch in tmp:\n        if ch.isalpha():\n            result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    result = \"\"\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                result += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                ch = chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        encrypted += ch\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                ch = chr(((ord(tmp) - ord('a') + 5) % 26) + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                ch = chr(((ord(tmp) - ord('A') + 5) % 26) + ord('A'))\n        result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 4) % 26 + ord('a') + 5 - ord('a')) % 26 + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                result += chr((ord(tmp) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                result += chr((ord(tmp) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    result = ''\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                result += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    encrypted = ''\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    encrypted = ''\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    encrypted = ''\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    result = \"\"\n    for ch in tmp:\n        if ch.isalpha():\n            if ch.islower():\n                result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                result += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''.join(chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n    encrypted_s = ''.join(chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) if 'a' <= ch <= 'z' else ch for ch in tmp)\n    return encrypted_s\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_four(ch):\n        if ch.isalpha():\n            return chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        return ch\n    \n    def shift_five(ch):\n        if ch.isalpha():\n            return chr(((ord(ch) - ord('a') + 5) % 26) + ord('a'))\n        return ch\n\n    tmp = ''.join(shift_four(ch) for ch in s)\n    return ''.join(shift_five(ch) for ch in tmp)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''.join(\n        chr(((ord(ch) - ord('a') + 4) % 26 + ord('a')))\n        if 'a' <= ch <= 'z' else ch for ch in s)\n    encrypted = ''.join(\n        chr(((ord(ch) - ord('a') + 5) % 26 + ord('a'))) if 'a' <= ch <= 'z' else ch for ch in tmp)\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                result += chr((ord(tmp) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                encrypted += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                encrypted += chr((ord(tmp) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n                encrypted += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                tmp = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n                encrypted += chr((ord(tmp) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted_string = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            encrypted_string += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            encrypted_string += ch\n    return encrypted_result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            encrypted += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            encrypted += ch\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            encrypted += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            encrypted += ch\n    return encrypted\n",
                true
            ]
        ]
    },
    "1": {
        "level 1": [
            [
                "\ndef encode_reversed(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in 'aeiou':\n                    result += chr(ord(char) + 4)\n                else:\n                    result += char.upper()\n            else:\n                if char in 'AEIOU':\n                    result += chr(ord(char) + 4)\n                else:\n                    result += char.lower()\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = \"aeiou\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded += chr((ord(char) - 96 + 2) % 26 + 97)\n            else:\n                encoded += char.swapcase()\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                # replace vowel with the letter two places ahead\n                if char.islower():\n                    encoded += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    encoded += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                # swap case and append to encoded string\n                if char.islower():\n                    encoded += char.upper()\n                else:\n                    encoded += char.lower()\n        else:\n            # append non-alphabetic characters as is\n            encoded += char\n\n    # reverse the encoded string\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded = []\n    for char in message:\n        if char.isalpha():\n            char = char.swapcase()\n            if char in vowels:\n                char = vowels[char]\n        encoded.append(char)\n    return ''.join(encoded[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = []\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded.append(chr(ord(char) + 2))\n            else:\n                encoded.append(chr(ord(char) - 32) if char.isupper() else chr(ord(char) + 32))\n        else:\n            encoded.append(char)\n    return ''.join(encoded[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                if char.islower():\n                    result += chr(ord('u') - 1)\n                else:\n                    result += chr(ord('U') - 1)\n            else:\n                if char.islower():\n                    result += chr(ord(char) + 1)\n                else:\n                    result += chr(ord(char) + 1).lower()\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            char = char.lower()\n            if char in 'aeiou':\n                encoded += chr((ord(char) + 1 - 97) % 26 + 97)\n            else:\n                encoded += chr((ord(char) - 97) % 26 + 97)\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = [c.lower() if c.lower() not in 'aeiou' else chr(ord(c)+1) for c in message]\n    return ''.join(encoded[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded = []\n    \n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded.append(chr((ord(char) - 32) % 26 + 97))\n            else:\n                encoded.append(chr((ord(char) - 32) % 26 + 65))\n        else:\n            encoded.append(char.swapcase())\n\n    return ''.join(encoded[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    encoded = ''\n    for char in msg:\n        if char.isalpha():\n            encoded += vowels[char] if char in vowels else vowels[char.lower()].upper()\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    result = ''\n    for character in message:\n        if character.isalpha():\n            if character.isupper():\n                result += chr(65 + (ord(character) - 65 + 2) % 26)\n            else:\n                result += chr(97 + (ord(character) - 97 + 2) % 26)\n        else:\n            result += character\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = \"aeiou\"\n    encoded = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            encoded += chr(ord(char) + 2) if char.isupper() else chr(ord(char) + 2)\n        else:\n            encoded += chr(ord(char) ^ 32) if char.isupper() else char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = [c.lower() if c not in 'aeiouAEIOU' else chr((ord(c) - 94) % 26 + 97) if c.isupper() else chr((ord(c) - 97) % 26 + 97) for c in message]\n    return ''.join(encoded)[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    \n    for char in message:\n        if char in vowels:\n            encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    vowels = 'aeiou'\n    encoded = ''\n\n    for char in msg.lower():\n        if char in vowels:\n            encoded += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded += char\n\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(msg):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n\n    for character in msg:\n        \n        if character.isalpha():\n            character = character.swapcase()\n\n            if character.lower() in vowels:\n                character = chr(ord(character)+1)\n        \n        encoded_message += character\n\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += vowels[char]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                if char.islower():\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += chr(ord(char) + 2).lower()\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr(ord(char) + 2) if char.islower() else chr(ord(char) + 2)\n            else:\n                result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_message += chr(ord(char)+2) if char.islower() else chr(ord(char)-2)\n            else:\n                new_new_message = char.lower() if char.isupper() else char.upper()\n    return new_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    result = ''\n    for character in s:\n        if character.isalpha():\n            if character.islower():\n                result += chr(ord(character) - 32)\n            else:\n                result += chr(ord(character) + 32)\n        elif character in 'aeiouAEIOU':\n            if character.islower():\n                result += chr(ord(character) + 4)\n            else:\n                result += chr(ord(character) - 4)\n        else:\n            result += character\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += chr(ord(char) - 32) if char.isupper() else chr(ord(char) + 32)\n        else:\n            encoded_message += char\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = [chr((ord(c) - 97 + 1) % 26 + 97) if c.isalpha() \n               else c for c in message.swapcase()]\n    return ''.join(encoded[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    new_msg = ''\n    for character in msg:\n        if character.isalpha():\n            if character.islower():\n                new_msg += character.upper()\n            else:\n                new_msg += character.lower()\n        else:\n            new_msg += character\n    new_msg_vowel_advanced = ''\n    for character in new_msg:\n        if character in 'aeiouAEIOU':\n            if character.islower():\n                new_msg_vowel_advanced += chr((ord(character) - 97 + 2) % 26 + 97)\n            else:\n                new_msg_vowel_advanced += chr((ord(character) - 65 + 2) % 26 + 65)\n        else:\n            new_msg_vowel_advanced += character\n    return new_msg_vowel_advanced[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap case and advance vowels by 2\n    encoded_msg = \"\".join(\n        [chr(ord(c) + 2) if c in \"aeiouAEIOU\" else c.swapcase() for c in msg]\n    )\n    # reverse string\n    return encoded_msg[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    trans = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    msg = msg.translate(trans)\n    msg = msg.swapcase()\n    return msg[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(txt):\n    result = ''\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                char = chr(ord(char) + 2)\n            else:\n                char = char.swapcase()\n        result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                # Advance vowels by two letters in the alphabet sequence\n                if char.isupper():\n                    encoded += chr(ord(char) + 2)\n                else:\n                    encoded += chr(ord(char) + 2).upper()\n            else:\n                # Switch cases\n                if char.isupper():\n                    encoded += char.lower()\n                else:\n                    encoded += char.upper()\n        else:\n            # If not a letter, add it as it is\n            encoded += char\n\n    # Reverse the result\n    return encoded[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded += chr((ord(char) - 96) % 26 + 98)\n            else:\n                encoded += chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Define the mapping for vowels and consonants\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    consonants = {\n        'b': 'd', 'c': 'e', 'd': 'f', 'f': 'h', 'g': 'i', 'h': 'j', 'j': 'l', 'k': 'm', 'l': 'n', 'm': 'p', 'n': 'r',\n        'p': 's', 'q': 't', 'r': 'v', 's': 'x', 't': 'y', 'v': 'z', 'w': 'a', 'x': 'b', 'y': 'd', 'z': 'f', 'B': 'D',\n        'C': 'E', 'D': 'F', 'F': 'H', 'G': 'I', 'H': 'J', 'J': 'L', 'K': 'M', 'L': 'N', 'M': 'P', 'N': 'R', 'P': 'S',\n        'Q': 'T', 'R': 'V', 'S': 'X', 'T': 'Y', 'V': 'Z', 'W': 'A', 'X': 'B', 'Y': 'D', 'Z': 'F'\n    }\n\n    # Initialize an empty string to hold the encoded message\n    encoded = ''\n\n    # Loop over each character in the input message\n    for char in msg:\n        # Check if the character is a vowel or a consonant\n        if char in vowels:\n            # If it is, advance it by two letters in the alphabet sequence\n            encoded += vowels[char]\n        elif char in consonants:\n            # If it is, switch its case\n            encoded += consonants[char]\n        else:\n            # If it is neither, just add it to the encoded message as is\n            encoded += char\n\n    # Return the encoded message in reversed order\n    return encoded[::-1]\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef encode_reversed(message):\n    def swap_case(letter):\n        if letter.islower():\n            return letter.upper()\n        else:\n            return letter.lower()\n            \n    def replace_vowels(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            if letter.islower():\n                return chr((ord(letter) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(letter) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return letter\n\n    transformed = [replace_vowels(swap_case(letter)) for letter in message]\n    return transformed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(txt):\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def replace_vowels(c):\n        vowels = \"aeiou\"\n        if c.lower() in vowels:\n            idx = vowels.index(c.lower())\n            return vowels[(idx + 2) % len(vowels)]\n        return c\n\n    transformed = [swap_case(c) if c.isalpha() else replace_vowels(c) for c in txt]\n    reversed_txt = \"\".join(transformed[::-1])\n\n    return reversed_txt\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(c):\n        return c.upper() if c.islower() else c.lower()\n\n    def alter_vowel(c):\n        if c.lower() in 'aeiou':\n            return chr(ord(c)+2)\n        return c\n\n    encoded = ''.join(switch_case(alter_vowel(c)) for c in message)\n    return encoded[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    def swap_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def encode_vowel(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n\n    encoded_msg = [swap_case(ch) if ch.isalpha() else ch for ch in msg]\n    encoded_msg = [encode_vowel(ch) if ch.isalpha() else ch for ch in encoded_msg]\n    encoded_msg = \"\".join(encoded_msg)[::-1]\n\n    return encoded_msg\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap the case of each letter in the message\n    def swap_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n    \n    # replace each vowel with the next letter that is two places ahead in the alphabet\n    def alter_vowels(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            if ch.isupper():\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        return ch\n    \n    # apply the transformations and reverse the string\n    transformed = [swap_case(alter_vowels(ch)) for ch in msg]\n    transformed.reverse()\n    return ''.join(transformed)\n",
                true
            ],
            [
                "\ndef encode_revised(msg):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def shift_vowel(ch):\n        if ch in 'aeiouAEIOU':\n            return chr(ord(ch)+2)\n        return ch\n\n    msg = ''.join(map(switch_case, msg))\n    msg = ''.join(map(shift_vowel, msg))\n    return msg[::-1]\n",
                false
            ],
            [
                "\ndef to_lower_case(txt):\n    return txt.lower()\n\ndef shift_vowels(txt):\n    vowels = \"aeiou\"\n    shifted_vowels = \"cghjkl\"\n    for v, sv in zip(vowels, shifted_vowels):\n        txt = txt.replace(v, sv)\n    return txt\n\ndef encode_revised(txt):\n    txt = to_lower_case(txt)\n    txt = shift_vowels(txt)\n    return txt[::-1]\n",
                false
            ],
            [
                "\ndef switch_case(message):\n    new_message = \"\"\n    for char in message:\n        if char.isupper():\n            new_message += char.lower()\n        else:\n            new_message += char.upper()\n    return new_message\n\ndef shift_vowels(message):\n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for char in message:\n        if char in vowels:\n            new_message += chr((ord(char) + 2)%256)\n        else:\n            new_message += char\n    return new_message\n\ndef encode_revised(message):\n    message = switch_case(message)\n    message = shift_vowels(message)\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef case_switch(message):\n    new_message = \"\"\n    for char in message:\n        if char.isalpha():\n            new_message += char.lower() if char.isupper() else char.upper()\n        else:\n            new_message += char\n    return new_message\n\ndef vowel_shift(message):\n    new_message = \"\"\n    for char in message:\n        if char in \"aeiouAEIOU\":\n            new_char = chr(ord(char) + 2)\n            if new_char.isupper() and new_char > 'Z' or new_char.islower() and new_char > 'z':\n                new_char = chr(ord(new_char) - 26)\n            new_message += new_char\n        else:\n            new_message += char\n    return new_message\n\ndef encode_revised(message):\n    message = case_switch(message)\n    message = vowel_shift(message)\n    message = message[::-1]\n    return message\n",
                false
            ],
            [
                "\ndef case_switch(message):\n    result = \"\"\n    for char in message:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_shift(message):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            result += char\n    return result\n\ndef encode_revised(message):\n    message = case_switch(message)\n    message = vowel_shift(message)\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    def swap_case(c):\n        return c.upper() if c.islower() else c.lower()\n\n    def shift_vowels(c):\n        vowels = 'aeiouAEIOU'\n        shifted_vowels = 'cdeCDE'\n        return c.translate(str.maketrans(vowels, shifted_vowels)) if c in vowels else c\n\n    return ''.join(shift_vowels(swap_case(c)) for c in s[::-1])\n",
                false
            ],
            [
                "\ndef shift_vowels(txt):\n    new_txt = \"\"\n    for char in txt:\n        if char.lower() in 'aeiou':\n            if char.isupper():\n                new_txt += chr(ord('A') + (ord(char) - ord('A') + 2) % 26)\n            else:\n                new_txt += chr(ord('a') + (ord(char) - ord('a') + 2) % 26)\n        else:\n            new_txt += char\n    return new_txt\n\ndef encode_reversed(txt):\n    def swap_case(txt):\n        return txt.swapcase()\n\n    txt = swap_case(txt)\n    txt = shift_vowels(txt)\n    return txt[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def case_swap(c):\n        return c.upper() if c.islower() else c.lower()\n\n    def shift_vowel(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        return c\n\n    encoded = ''.join(map(shift_vowel, map(case_swap, message)))\n    return encoded[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    def swap_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def shift_vowel(ch):\n        vowels = \"AEIOUaeiou\"\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n\n    encoded_msg = ''.join(map(swap_case, msg))\n    encoded_msg = ''.join(map(shift_vowel, encoded_msg))\n    return encoded_msg[::-1]\n\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap case helper function\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    # shift vowels helper function\n    def shift_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.isupper():\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    # perform operations on message\n    msg = ''.join(map(swap_case, msg))\n    msg = ''.join(map(shift_vowel, msg))\n\n    return msg[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def modify_case(s):\n        return ''.join([letter.upper() if letter.islower() else letter.lower() for letter in s])\n\n    def adjust_vowels(s):\n        vowels = 'aeiou'\n        return ''.join([chr((ord(letter) - ord('a') + 2) % 26 + ord('a')) if letter.lower() in vowels else letter for letter in s])\n    \n    modified = modify_case(message)\n    adjusted = adjust_vowels(modified)\n    return adjusted[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(txt):\n    def helper1(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def helper2(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return txt[::-1][::-1].translate(str.maketrans('aeiouAEIOU', 'eiouaEIOUA'))[::-1].translate(str.maketrans(encoder.helper1))\n\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(letter):\n        return letter.upper() if letter.islower() else letter.lower()\n\n    def adjust_vowels(letter):\n        if letter.lower() in 'aeiou':\n            return chr((ord(letter) - 98) % 26 + 97)\n        return letter\n\n    encoded = ''.join(adjust_vowels(switch_case(letter)) for letter in message)\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    def helper_swap_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def helper_swap_vowels(s):\n        vowels = 'aeiou'\n        return ''.join([c if c not in vowels else chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s])\n\n    s = helper_swap_case(s)\n    s = helper_swap_vowels(s)\n    s = s[::-1]\n\n    return s\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Helper function to switch case of each letter\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n    \n    # Helper function to shift vowels two places ahead\n    def shift_vowels(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n\n    # Switch case of each letter and shift vowels\n    msg = ''.join(map(switch_case, msg))\n    msg = ''.join(map(shift_vowels, msg))\n\n    # Reverse and return the string\n    return msg[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def toggle_case(letter):\n        if letter.isupper():\n            return letter.lower()\n        else:\n            return letter.upper()\n\n    def advance_vowels(letter):\n        vowels = 'aeiou'\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    encoded = [advance_vowels(toggle_case(letter)) for letter in message]\n    return ''.join(encoded)[::-1]\n\n",
                false
            ],
            [
                "\ndef encode_reversed(txt):\n    def toggle_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def advance_vowel(c):\n        vowels = \"aeiou\"\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        return c\n\n    return txt[::-1].translate(str.maketrans(\"aeiouAEIOU\", \"eiouaEIOUa\")).translate(str.maketrans(toggle_case))\n\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(c):\n        return c.upper() if c.islower() else c.lower()\n\n    def advance_vowel(c):\n        if c.lower() in 'aeiou':\n            return chr(ord(c)+2)\n        return c\n\n    encoded = ''.join(advance_vowel(switch_case(c)) for c in message)[::-1]\n    return encoded\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    def toggle_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def advance_vowel(ch):\n        vowels = \"AEIOUaeiou\"\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n\n    encoded_msg = [toggle_case(ch) if i%2==0 else advance_vowel(ch) for i, ch in enumerate(msg)]\n    return \"\".join(encoded_msg[::-1])\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Subfunction to toggle case of letter\n    def toggle_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n    \n    # Subfunction to advance vowel by 2 positions in alphabet\n    def advance_vowel(c):\n        if c in 'aeiou':\n            return chr((ord(c) - 97 + 2) % 26 + 97)\n        elif c in 'AEIOU':\n            return chr((ord(c) - 65 + 2) % 26 + 65)\n        else:\n            return c\n    \n    # Apply transformations\n    trans = [toggle_case(c) if i%2 == 0 else advance_vowel(c) for i, c in enumerate(msg)]\n    \n    # Return string in reverse order\n    return ''.join(trans[::-1])\n",
                false
            ],
            [
                "\ndef switch_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\ndef adjust_vowels(c):\n    vowels = 'aeiou'\n    if c in vowels:\n        return chr((ord(c) - 97 + 2) % 26 + 97)\n    else:\n        return c\n\ndef encode_reversed(message):\n    return ''.join([adjust_vowels(switch_case(c)) for c in message])[::-1]\n",
                false
            ],
            [
                "\ndef to_lower_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\n\ndef change_vowels(c):\n    vowels = 'aeiou'\n    if c in vowels:\n        return chr((ord(c) - 97 + 2) % 26 + 97)\n    else:\n        return c\n\n\ndef encode_reversed(s):\n    processed = [to_lower_case(c) if i % 2 == 0 else change_vowels(c) for i, c in enumerate(s)]\n    return ''.join(processed[::-1])\n",
                false
            ],
            [
                "\ndef switch_case(character):\n    if character.isupper():\n        return character.lower()\n    else:\n        return character.upper()\n\ndef shift_vowels(character):\n    vowels = 'aeiou'\n    if character in vowels:\n        return chr((ord(character) - ord('a') + 2) % 26 + ord('a'))\n    else:\n        return character\n\ndef encode_reversed(message):\n    return ''.join([switch_case(shift_vowels(c)) for c in message])[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef shift_vowel(char):\n    vowels = 'aeiou'\n    if char in vowels:\n        return chr((ord(char) - 97 + 2) % 26 + 97)  # 'a' is 97 in ASCII \n    return char\n\ndef encode_reversed(message):\n    encoded = [shift_vowel(switch_case(char)) for char in message]\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    def swap_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def shift_vowels(s):\n        return ''.join([chr(ord(c)+2) if c in 'aeiouAEIOU' else c for c in s])\n\n    return msg[::-1].translate(str.maketrans('aeiouAEIOU', 'eiouaEIOUA'))\n\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = \"aeiouAEIOU\"\n    if ch in vowels:\n        return chr(ord(ch)+2)\n    else:\n        return ch\n\ndef encode_reversed(message):\n    # swapping case\n    switched_message = map(switch_case, message)\n    \n    # replacing vowels\n    replaced_message = map(vowel_change, switched_message)\n\n    # reversing and joining to a string\n    encoded_message = ''.join(list(reversed(list(replaced_message))))\n    \n    return encoded_message\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2)\n    return ch\n\ndef encode_reversed(message):\n    transformed_message = map(switch_case, message)\n    transformed_message = map(vowel_change, transformed_message)\n    return ''.join(list(transformed_message)[::-1])\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        return chr(ord(ch) + 2)\n    else:\n        return ch\n\ndef encode_reversed(message):\n    # Encode the message by swapping case and replacing vowels\n    encoded = ''.join(map(switch_case, message))\n    encoded = ''.join(map(vowel_change, encoded))\n\n    # Reverse the encoded message and return it\n    return encoded[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    else:\n        return ch.lower()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        return chr((ord(ch) + 2 - 65) % 26 + 65)  # 'A' is 65 in ASCII\n    else:\n        return ch\n\ndef encode_reversed(message):\n    # Switch case of all letters\n    switched = ''.join(map(switch_case, message))\n    # Replace vowels with following letters\n    with_vowels = ''.join(map(vowel_change, switched))\n    # Return the reversed message\n    return with_vowels[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        index = vowels.index(ch)\n        return vowels[(index + 2) % len(vowels)]\n    else:\n        return ch\n\ndef encode_reversed(message):\n    switched = ''.join(map(switch_case, message))\n    switched_vowels = ''.join(map(vowel_change, switched))\n    return switched_vowels[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            ascii_offset = ord('a') if ch.islower() else ord('A')\n            ch = chr((ord(ch) - ascii_offset + 2) % 26 + ascii_offset)\n        return ch\n\n    # Apply transformations\n    message = map(switch_case, message)\n    message = map(vowel_change, message)\n    # Convert mapped object back to string\n    message = \"\".join(message)\n    # Reverse string\n    return message[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97)\n        else:\n            return ch\n\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    \n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            new_ch = chr((ord(ch) - 97 + 2) % 26 + 97)\n            return new_ch.upper() if ch.isupper() else new_ch.lower()\n        return ch\n\n    message = map(switch_case, message)\n    message = map(vowel_change, message)\n    message = ''.join(message)\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97) # for lowercase letters\n        elif ch.upper() in vowels:\n            return chr((ord(ch) - 65 + 2) % 26 + 65) # for uppercase letters\n        else:\n            return ch\n\n    return ''.join(map(lambda x: vowel_change(switch_case(x)), message[::-1]))\n\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = \"aeiou\"\n        return chr((ord(ch) + 2 - ord('a')) % 26 + ord('a')) if ch in vowels else ch\n\n    message = \"\".join(map(switch_case, message))\n    message = \"\".join(map(vowel_change, message))\n\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = vowels.index(ch)\n            ch = vowels[(index+2)%len(vowels)] if ch.isupper() else vowels[(index+2)%len(vowels)]\n        return ch\n\n    message = \"\".join(map(switch_case, message))\n    message = \"\".join(map(vowel_change, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = vowels.index(ch)\n            # Shift vowels by two places in the alphabet.\n            return vowels[(index + 2) % len(vowels)]\n        return ch\n\n    # Apply transformations and reverse the string.\n    transformed = ''.join(map(switch_case, map(vowel_change, message)))\n    return transformed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n\n    message = list(map(switch_case, message))\n    message = list(map(vowel_change, message))\n    return ''.join(message[::-1])\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    transformed = ''.join(map(switch_case, message))\n    transformed = ''.join(map(vowel_change, transformed))\n\n    return transformed[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    # Define the inner switch case function\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n    \n    # Define the inner vowel change function\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        return ch\n    \n    # Map the transformations over the message\n    transformed = ''.join(map(switch_case, message))\n    transformed = ''.join(map(vowel_change, transformed))\n    \n    # Return the reversed message\n    return transformed[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    return ch.upper() if ch.islower() else ch.lower()\n\ndef vowel_change(ch):\n    if ch in 'aeiouAEIOU':\n        return chr(ord(ch) + 2)\n    return ch\n\ndef encode_reversed(message):\n    password = ''.join([switch_case(vowel_change(ch)) for ch in message])\n    return password[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97)  # 'a' is 97 in ASCII\n        return ch\n\n    transformed = ''.join(switch_case(ch) if ch.isalpha() else ch for ch in message)\n    transformed = ''.join(vowel_change(ch) if ch.isalpha() else ch for ch in transformed)\n\n    return transformed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        return ch\n\n    transformed = [vowel_change(switch_case(ch)) for ch in message]\n    return ''.join(transformed)[::-1]\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    else:\n        return ch.lower()\n\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch.lower() in vowels:\n        return chr(ord(ch) + 2)\n    return ch\n\ndef encode_reversed(message):\n    transformed = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        return ch\n\n    transformed = [switch_case(vowel_change(ch)) for ch in message]\n    return ''.join(transformed)[::-1]\n\n",
                true
            ],
            [
                "\ndef encode_rejected(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            new_ch = chr((ord(ch) + 2 - 97) % 26 + 97)\n            if ch.islower():\n                return new_ch\n            else:\n                return new_ch.upper()\n        else:\n            return ch\n\n    # Apply transformations\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n\n    # Reverse message\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch.lower() in vowels:\n        if ch.islower():\n            return chr((ord(ch) - 97 + 2) % 26 + 97)\n        else:\n            return chr((ord(ch) - 65 + 2) % 26 + 65)\n    return ch\n\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    else:\n        return ch.lower()\n\ndef encode_rejected(message):\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch in vowels:\n        return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n    elif ch.upper() in vowels:\n        return chr((ord(ch.upper()) - ord('A') + 2) % 26 + ord('A'))\n    else:\n        return ch\n\ndef encode_rejected(message):\n    return ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))[::-1]\n",
                false
            ],
            [
                "\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'AEIOUaeiou'\n        if ch in vowels:\n            if ch.islower():\n                return chr(((ord(ch) - 97 + 2) % 26) + 97)\n            else:\n                return chr(((ord(ch) - 65 + 2) % 26) + 65)\n        else:\n            return ch\n\n    return ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))[::-1]\n",
                false
            ],
            [
                "\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            if ch.isupper():\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return ch\n\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch.lower() in vowels:\n        return chr((ord(ch) - 96 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n    return ch\n\ndef encode_reversed(message):\n    transformed = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = vowels.index(ch)\n            # Add 2 to the index to get the next vowel in the alphabet\n            return vowels[(index + 2) % len(vowels)]\n        return ch\n\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.upper() if ch.islower() else ch.lower()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            new_ch = chr((ord(ch) - 97 + 2) % 26 + 97)\n            return new_ch.upper() if ch.isupper() else new_ch\n        return ch\n\n    encoded_message = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return encoded_message[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr((ord(ch) + 2 - ord('a')) % 26 + ord('a'))\n        else:\n            return ch\n\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    message = map(switch_case, message)\n    message = map(vowel_change, message)\n    return ''.join(reversed(list(message)))\n",
                true
            ]
        ]
    },
    "2": {
        "level 1": [
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n\n    transformed = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                if char.islower():\n                    transformed += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    transformed += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    transformed += chr((ord(char) - ord('a') - 2) % 26 + ord('a'))\n                else:\n                    transformed += chr((ord(char) - ord('A') - 2) % 26 + ord('A'))\n        else:\n            transformed += char\n\n    hash_obj = hashlib.md5(transformed.encode())\n    return hash_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    transformed_text = ''\n    vowels = 'aeiou'\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_text += chr((ord(char) + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) + 2) % 26 + ord('A'))\n            else:\n                transformed_text += char.swapcase()\n        else:\n            transformed_text += char\n    \n    md5_hash = hashlib.md5(transformed_text.encode()).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    transformed_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                transformed_text += chr((ord(char) - 32) % 26 + 97)\n            else:\n                transformed_text += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            transformed_text += char\n    return hashlib.md5(transformed_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(txt):\n    if txt == \"\":\n        return None\n    result = \"\"\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) - 96 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_text += chr(((ord(char) - 97 + 2) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                encoded_text += chr(((ord(char) - 97) % 26) + 97) if char.islower() else chr(((ord(char) - 65) % 26) + 65)\n        else:\n            encoded_text += char\n    \n    md5_hash = hashlib.md5(encoded_text.encode())\n    \n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n\n    modified_text = ''\n    for char in text:\n        if char.isalpha():\n            char = char.lower() if char.isupper() else char.upper()\n            if char in 'AEIOUaeiou':\n                char = chr((ord(char) - 96) % 26 + 97)\n                if char == 'e':\n                    char = 'g'\n                elif char == 'E':\n                    char = 'G'\n            modified_text += char\n        else:\n            modified_text += char\n\n    md5_hash = hashlib.md5(modified_text.encode())\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_text = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_text += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_text += chr((ord(char) + 2 - 65) % 26 + 65)\n        else:\n            encoded_text += char\n\n    md5_hash = hashlib.md5(encoded_text.encode()).hexdigest()\n\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    modified_text = \"\"\n    for character in text:\n        if character.isalpha():\n            if character.lower() in ['a', 'e', 'i', 'o', 'u']:\n                modified_text += chr((ord(character) - 96) % 26 + 1)\n            else:\n                modified_text += chr((ord(character) - 65) % 26 + 1).lower()\n        else:\n            modified_text += character\n    return hashlib.md5(modified_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(txt):\n    if txt == \"\":\n        return None\n    result = \"\"\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) - 96 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_text += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_text += chr((ord(char) - 97) % 26 + 97) if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded_text += char\n\n    md5_hash = hashlib.md5(encoded_text.encode())\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if s == \"\":\n        return None\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                result += char.lower() if char.isupper() else char.upper()\n            elif char.lower() in 'aeiou':\n                result += chr((ord(char) - 97 + 4) % 26 + 97)\n            else:\n                result += char\n        return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else (ord(char) + 2) % 26 + ord('a'))\n            else:\n                encoded_str += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else (ord(char) + 2) % 26 + ord('a'))\n        else:\n            encoded_str += char\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded_str.encode('utf-8'))\n\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for character in s:\n        if character.isalpha():\n            if character.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_string += chr(ord(character) + 2)\n            else:\n                encoded_string += chr(ord(character) + 2) if character.islower() else chr(ord(character) - 2)\n        else:\n            encoded_string += character\n    return hashlib.md5(encoded_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) + 4 - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + 4 - 65) % 26 + 65)\n        else:\n            result += char\n    md5_hash = hashlib.md5()\n    md5_hash.update(result.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    encoded_s = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_s += chr(ord(char) + 2)\n            else:\n                encoded_s += char.swapcase()\n        else:\n            encoded_s += char\n\n    return hashlib.md5(encoded_s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if s == \"\":\n        return None\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n                if char.lower() in 'aeiou':\n                    result = chr((ord(result[-1]) - 96 + 2) % 26 + 96) if result[-1].islower() else chr((ord(result[-1]) - 64 + 2) % 26 + 64)\n            else:\n                result += char\n        return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else (ord(char) + 2) % 26 + ord('a'))\n            else:\n                encoded_str += chr((ord(char) + 2) % 26 + ord('A') if char.isupper() else (ord(char) + 2) % 26 + ord('a'))\n        else:\n            encoded_str += char\n\n    return hashlib.md5(encoded_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    encoded_str = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_str += chr((ord(ch) + 2 - 97) % 26 + 97)\n            else:\n                encoded_str += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            encoded_str += ch\n    return hashlib.md5(encoded_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(txt):\n    if txt == \"\":\n        return None\n    result = \"\"\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + 2 - 65) % 26 + 65)\n        else:\n            result += char\n    md5_hash = hashlib.md5()\n    md5_hash.update(result.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char in 'aeiouAEIOU':\n                encoded_text += chr((ord(char)+2)%256)\n            else:\n                encoded_text += chr((ord(char)-2)%256)\n        else:\n            encoded_est += char\n\n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n\n    changed = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                # Moves every vowel two letters up in the alphabet\n                changed += chr((ord(char) - 96 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                # Changes the case\n                changed += char.upper() if char.islower() else char.lower()\n        else:\n            changed += char\n\n    # Calculate and return the MD5 hash of the changed string\n    return hashlib.md5(changed.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_text = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_text += chr((ord(char) + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) + 2) % 26 + ord('A'))\n            else:\n                encoded_text += chr((ord(char) - 35) % 26 + ord('a')) if char.islower() else chr((ord(char) - 35) % 26 + ord('A'))\n        else:\n            encoded_text += char\n\n    md5_hash = hashlib.md5(encoded_text.encode())\n\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    changed_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                changed_text += chr((ord(char) - 32) % 26 + 97)\n            else:\n                changed_text += char.swapcase()\n        else:\n            changed_text += char\n    return hashlib.md5(changed_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(txt):\n    if not txt:\n        return None\n    changed_txt = ''\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                changed_txt += chr((ord(char) - 32) % 26 + 65)\n            else:\n                changed_txt += chr((ord(char) - 65) % 26 + 97)\n        else:\n            changed_txt += char\n    return hashlib.md5(changed_txt.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_text += chr((ord(char) - 98) % 26 + 97)\n            else:\n                encoded_text += char.lower() if char.isupper() else char.upper()\n        else:\n            encoded_text += char\n\n    md5_hash = hashlib.md5(encoded_text.encode('utf-8'))\n    \n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n\n    altered_text = ''\n    for char in text:\n        if char.isalpha():\n            char = char.lower() if char.isupper() else char.upper()\n            if char in 'aeiouAEIOU':\n                char = chr(ord(char) + 2) if char.isupper() else chr(ord(char) + 2)\n        altered_text += char\n\n    md3_hash = hashlib.new('md3', altered_text.encode())\n    return md3_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_text):\n    if not input_text:\n        return None\n\n    # reverse case\n    case_reversed = \"\".join([char.upper() if char.islower() else char.lower() for char in input_text])\n\n    # move all vowels two places ahead in the alphabet\n    vowels = 'aeiou'\n    vowels_upper = vowels.upper()\n    moved_vowels = \"\".join([char for char in case_reversed if char not in vowels and char not in vowels_upper])\n    moved_vowels += \"\".join(chr((ord(char) - 97 + 2) % 26 + 97) if char in vowels else chr((ord(char) - 65 + 2) % 26 + 65) for char in case_reversed if char in vowels or char in vowels_upper)\n\n    # generate MD3 hash\n    md3 = hashlib.new('md3', moved_vowels.encode('utf-8'))\n    md3_hash = md3.hexdigest()\n\n    return md3_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    altered_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                altered_text += chr((ord(char) - 32) % 26 + 97)\n            else:\n                altered_text += chr((ord(char) - 65) % 26 + 65)\n        else:\n            altered_text += char\n    return hashlib.md3(altered_text.encode(), usedforsecurity=True).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(txt):\n    if txt == \"\":\n        return None\n    result = \"\"\n    for char in txt:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) - 32) % 26 + 65)\n            else:\n                result += chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            result += char\n    \n    h = hashlib.md3(result.encode(), usedforsecurity=False)\n    return h.hexdigest()\n",
                false
            ],
            [
                "\nfrom hashlib import md5\n\ndef encode_md3(text):\n    if not text:\n        return None\n        \n    vowels = 'aeiou'\n    encoded_text = ''\n    \n    for char in text:\n        if char.isalpha():\n            char = char.lower() if char.isupper() else char.upper()\n            if char in vowels:\n                encoded_text += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encoded_text += char\n        else:\n            encoded_text += char\n\n    return md5(encoded_text.encode()).hexdigest()\n",
                false
            ]
        ],
        "level 2": [
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    s = s.swapcase()\n    s = ''.join([chr(ord(i)+2) if i in 'aeiouAEIOU' else i for i in s])\n    s = hashlib.md5(s.encode())\n    return s.hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    transformed_s = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                transformed_s += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                transformed_s += chr((ord(char) - 97) % 26 + 97) if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        else:\n            transformed_s += char\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(transformed_s.encode('utf-8'))\n    \n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s.swapcase()\n    s = ''.join([chr(ord(c)+2) if c.lower() in 'aeiou' else c for c in s])\n    md5 = hashlib.md5()\n    md5.update(s.encode('utf-8'))\n    return md5.hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr(((ord(char) - 97 + 2) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                result += chr(((ord(char) - 97 - 2) % 26) + 97) if char.islower() else chr(((ord(char) - 65 - 2) % 26) + 65)\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n\n    s = s.swapcase()\n    vowels = 'aeiou'\n    shifted_vowels = 'cieuo'\n    trans = str.maketrans(vowels, shifted_vowels)\n    s = s.translate(trans)\n\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    else:\n        transformed_string = \"\"\n        for char in s:\n            if char.lower() in 'aeiou':\n                if char.islower():\n                    transformed_string += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    transformed_string += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                transformed_string += char\n        hash_object = hashlib.md5(transformed_string.encode())\n        return hash_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    transformed_s = ''.join([char.upper() if char.lower() not in 'aeiou' else chr((ord(char) - 94) % 26 + 97) for char in s])\n    hash_object = hashlib.md5(transformed_s.encode())\n    return hash_objec\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    transformed_s = \"\".join([char.upper() if char.lower() not in 'aeiou' else chr((ord(char) - 94) % 26 + 65) for char in s])\n    md5_hash = hashlib.md5(transformed_s.encode())\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.lower() in 'aeiou':\n            if char.islower():\n                result += chr((ord(char) - 98) % 26 + 97)\n            else:\n                result += chr((ord(char) - 66) % 26 + 65)\n        else:\n            result += char.swapcase()\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s.swapcase()\n    for vowel in 'aeiou':\n        s = s.replace(vowel, chr((ord(vowel) - 97 + 2) % 26 + 97))\n        s = s.replace(vowel.upper(), chr((ord(vowel) - 65 + 2) % 26 + 65))\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    vowels = 'aeiou'\n    new_s = ''.join([c.upper() if c.islower() else c.lower() if c.isalpha() and c.lower() not in vowels else chr(ord(c)+2) if c in vowels else c for c in s])\n    return hashlib.md5(new_s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    transformed_s = ''\n    for char in s:\n        if char.isalpha():\n            transformed_s += char.swapcase()\n            if char.lower() in 'aeiou':\n                transformed_s += chr(ord(char)+2)\n        else:\n            transformed_s += char\n\n    md5_hash = hashlib.md5(transformed_s.encode('utf-8')).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s.swapcase()\n    vowels = 'aeiou'\n    for vowel in vowels:\n        s = s.replace(vowel, chr((ord(vowel) - ord('a') + 2) % 26 + ord('a')))\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + 2 - 65) % 26 + 65)\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_s = \"\"\n    for c in s:\n        if not c.isalpha():\n            encoded_s += c\n            continue\n        \n        if c.lower() in 'aeiou':\n            encoded_s += chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        else:\n            encoded_s += c.upper() if c.islower() else c.lower()\n\n    return hashlib.md5(encoded_s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(input_string):\n    if not input_string:\n        return None\n    result = \"\"\n    vowels = \"aeiou\"\n    for character in input_string:\n        if character.isalpha():\n            result += character.swapcase()\n            if character.lower() in vowels:\n                result = result[:-1] + chr((ord(result[-1]) - 97 + 2) % 26 + 97) + result[-1:]\n        else:\n            result += character\n    hash_object = hashlib.md5(result.encode())\n    return hash_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(input_string):\n    if not input_string:\n        return None\n\n    new_string = \"\"\n    for char in input_string:\n        if char.isalpha():\n            new_string += char.lower() if char.isupper() else char.upper()\n        else:\n            new_string += char\n\n    for vowel in \"aeiou\":\n        new_string = new_string.replace(vowel, chr(((ord(vowel) - 97 + 2) % 26) + 97))\n        new_string = new_string.replace(vowel.upper(), chr(((ord(vowel) - 65 + 2) % 26) + 65))\n\n    encoded_string = hashlib.md5(new_string.encode()).hexdigest()\n    return encoded_string\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for character in s:\n        if character.isalpha():\n            if character.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_string += chr(ord(character) + 2)\n            else:\n                encoded_string += character.swapcase()\n        else:\n            encoded_string += character\n    return hashlib.md5(encoded_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) + 2 - 97) % 26 + 97)  # increment vowel by 2 letters in alphabet\n            else:\n                result += char.lower() if char.isupper() else char.upper()  # switch case\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()  # hashing with MD5\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    encoded = ''\n    for ch in s:\n        if ch.isalpha():\n            encoded += ch.swapcase()\n            if ch.lower() in 'aeiou':\n                encoded = chr((ord(encoded[-1]) - 97 + 2) % 26 + 97)\n        else:\n            encoded += ch\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n                if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                    if char.isupper():\n                        result = result[:-1] + chr(ord(result[-1]) + 2)\n                    else:\n                        result = result[:-1] + chr(ord(result[-1]) + 2)\n            else:\n                result += char\n        return hashlib.md5(result.encode()).hexdigest()\n\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) + 2) % 26 + ord('A'))\n            else:\n                encoded_str += char.lower() if char.isupper() else char.upper()\n        else:\n            encoded_str += char\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded_str.encode('utf-8'))\n    \n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                if char.islower():\n                    encoded_string += chr(((ord(char) - 97 + 2) % 26) + 97)\n                else:\n                    encoded_string += chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                if char.islower():\n                    encoded_string += chr(((ord(char) - 97 - 2) % 26) + 97)\n                else:\n                    encoded_string += chr(((ord(char) - 65 - 2) % 26) + 65)\n        else:\n            encoded_string += char\n    return hashlib.md5(encoded_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                result += chr((ord(char) + 4 - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + 4 - 65) % 26 + 65)\n        else:\n            result += char\n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_s = \"\"\n    for c in s:\n        if c in 'aeiouAEIOU':\n            encoded_s += chr(ord(c) + 2) if c.isupper() else chr(ord(c) + 2)\n        else:\n            encoded_s += c.lower() if c.isupper() else c.upper()\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded_s.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    else:\n        new_s = \"\"\n        for c in s:\n            if c.isalpha():\n                if c.lower() in 'aeiou':\n                    new_s += chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).upper()\n                else:\n                    new_s += chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).upper()\n            else:\n                new_s += c\n        return hashlib.md5(new_s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    flipped_s = s.swapcase()\n    encoded_s = \"\"\n    \n    for char in flipped_s:\n        if char in \"aeiouAEIOU\":\n            encoded_s += chr(ord(char)+2)\n        else:\n            encoded_s += char\n            \n    return hashlib.md5(encoded_s.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    new_s = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_s += chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                new_s += chr((ord(c) - 97 - 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 - 2) % 26 + 65)\n        else:\n            new_s += c\n    return hashlib.md5(new_s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if s == \"\":\n        return None\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    \n    for vowel in \"aeiouAEIOU\":\n        result = result.replace(vowel, chr((ord(vowel) + 2 - 65) % 26 + 65))\n\n    hash_object = hashlib.md5(result.encode())\n    return hash_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c.isalpha():\n            if c in 'aeiouAEIOU':\n                encoded_str += chr(ord(c)+2) if c.islower() else chr(ord(c)+2).lower()\n            else:\n                encoded_str += chr(ord(c)+2).upper() if c.isupper() else chr(ord(c)+2)\n        else:\n            encoded_str += c\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded_str.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
                false
            ]
        ],
        "level 3": [
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return ''.join([char.upper() if char.islower() else char.lower() for char in message])\n\ndef vowel_change(message):\n    return ''.join([chr(ord(char)+2) if char in 'aeiouAEIOU' else char for char in message])\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        message = switch_case(message)\n        message = vowel_change(message)\n        return hashlib.md5(message.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        # switch case function\n        switched_message = ''.join([char.lower() if char.isupper() else char.upper() for char in message])\n        \n        # vowel changes\n        vowel_dict = {'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w', 'A':'C', 'E':'G', 'I':'K', 'O':'Q', 'U':'W'}\n        changed_message = ''.join([vowel_dict[char] if char in vowel_dict else char for char in switched_message])\n        \n        # to md5\n        return string_to_md5(changed_message)\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    new_message = \"\"\n    for char in message:\n        if char.isupper():\n            new_message += char.lower()\n        else:\n            new_message += char.upper()\n    return new_message\n\ndef vowel_change(message):\n    new_message = \"\"\n    for char in message:\n        if char in 'aeiouAEIOU':\n            new_message += chr(ord(char) + 2)\n        else:\n            new_message += char\n    return new_message\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        transformed_message = switch_case(message)\n        transformed_message = vowel_change(transformed_message)\n        return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in message])\n\ndef vowel_change(message):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([chr(ord(char)+2) if char in vowels else char for char in message])\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    transformed_message = switch_case(message)\n    transformed_message = vowel_change(transformed_message)\n    return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in message])\n\ndef vowel_change(message):\n    vowels = 'aeiouAEIOU'\n    return ''.join([chr(ord(char)+2) if char in vowels else char for char in message])\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        switched_case = switch_case(message)\n        with_vowels_changed = vowel_change(switched_case)\n        return string_to_md5(with_vowels_changed)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    else:\n        inverted_message = [char.upper() if char.islower() else char.lower() for char in message]\n        modified_message = [chr(ord(char)+2) if char in 'aeiouAEIOU' else char for char in inverted_message]\n        hashed_string = hashlib.md5(''.join(modified_message).encode('utf-8')).hexdigest()\n        return hashed_string\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    inverted_message = ''\n    for char in message:\n        if char.isupper():\n            inverted_message += char.lower()\n        else:\n            inverted_message += char.upper()\n    modified_message = ''\n    for char in inverted_message:\n        if char in 'aeiouAEIOU':\n            modified_message += chr(ord(char) + 2)\n        else:\n            modified_message += char\n    return string_to_md5(modified_message)\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    else:\n        switch_case = \"\".join([char.lower() if char.isupper() else char.upper() for char in message])\n        vowel_change = \"\".join([\"\u00df\" if char in \"aeiouAEIOU\" else char for char in switch_case])\n        string_to_md5 = hashlib.md5(vowel_change.encode())\n        return string_to_md5.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    switch_case = \"\".join(c.upper() if c.islower() else c.lower() for c in message)\n    vowel_change = \"\".join(chr(ord(c) + 2) if c in \"aeiouAEIOU\" else c for c in switch_case)\n    return string_to_md5(vowel_change)\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n\n    encoded_message = [ch.lower() if ch.isupper() else ch.upper() for ch in message]\n    encoded_message = ''.join(encoded_message)\n\n    for i, ch in enumerate(encoded_message):\n        if ch in 'aeiouAEIOU':\n            encoded_message[i] = chr(ord(ch) + 2)\n\n    return string_to_md5(''.join(encoded_message))\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    hex_dig = hash_object.hexdigest()\n    return hex_dig\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef vowel_change(c):\n    if c in 'aeiouAEIOU':\n        return chr(((ord(c) + 2) % 26) + 65) if c.isupper() else chr(((ord(c) + 2) % 26) + 97)\n    return c\n\ndef encode_md5(message):\n    if not message:\n        return None\n    else:\n        toggled_message = ''.join([c.upper() if c.islower() else c.lower() for c in message])\n        changed_message = ''.join(map(vowel_change, toggled_message))\n        return hashlib.md5(changed_message.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n            \n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            o = ord(c)\n            if c.isupper():\n                return chr((o - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((o - ord('a') + 2) % 26 + ord('a'))\n        return c\n        \n    def string_to_md5(s):\n        hash_object = hashlib.md5(s.encode())\n        return hash_object.hexdigest()\n    \n    toggled_message = ''.join(switch_case(c) for c in message)\n    altered_message = ''.join(vowel_change(c) for c in toggled_message)\n    return string_to_md5(altered_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef vowel_change(char):\n    vowels = 'aeiouAEIOU'\n    if char in vowels:\n        new_char_code = ord(char) + 2\n        if char.isupper():\n            if new_char_code > ord('U'):\n                new_char_code -= 26\n        else:\n            if new_char_code > ord('u'):\n                new_char_code -= 26\n        return chr(new_char_code)\n    else:\n        return char\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        switched = ''.join([switch_case(char) for char in message])\n        changed = ''.join([vowel_change(char) for char in switched])\n        return string_to_md5(changed)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = \"aeiouAEIOU\"\n    if ch in vowels:\n        return chr(ord(ch) + 2)\n    return ch\n\ndef string_to_md5(s):\n    hash_object = hashlib.md5(s.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        toggled = ''.join(switch_case(ch) for ch in message)\n        altered = ''.join(vowel_change(ch) for ch in toggled)\n        return string_to_md5(altered)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        if ch.islower():\n            return chr(ord(ch) + 2) if ord(ch)+2 <= ord('u') else chr(ord(ch) - 14)\n        else:\n            return chr(ord(ch) + 2) if ord(ch)+2 <= ord('U') else chr(ord(ch) - 14)\n    else:\n        return ch\n\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    else:\n        return ch.lower()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    toggled = ''.join(switch_case(vowel_change(ch)) for ch in message)\n    return hashlib.md5(toggled.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for char in message:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n\ndef vopot_chopinghcter_changehage(message):\n    result = \"\"\n    for char in message:\n        if char in \"aeiouAEIOU\":\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef encode_md5(message):\n    if not message:\n        return None\n    else:\n        message = switch_case(message)\n        message = vopot_chopinghcter_changehage(message)\n        hash_object = hashlib.md5(message.encode())\n        return hash_objec\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vopot_chopinghcter_changehage(s):\n        return ''.join(['a' if c == 'A' else c for c in s])\n\n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n\n    return string_to_md5(message)\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for char in message:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vopot_chopinghcter_changehage(message):\n    result = \"\"\n    for char in message:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = ''\n    for char in message:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vopot_chopinghcter_changehage(message):\n    result = ''\n    for char in message:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    transformed = vopot_chopinghcter_changehage(switch_case(message))\n    return string_to_md5(transformed)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return message.swapcase()\n\ndef vopot_chopinghcter_changehage(message):\n    vowels = 'aeiouAEIOU'\n    return ''.join([chr(ord(c) + 2) if c in vowels else c for c in message])\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    transformed_message = switch_case(message)\n    transformed_message = vopot_chopinghcter_changehage(transformed_message)\n    return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\ndef vowel_change(c):\n    vowels = 'aeiouAEIOU'\n    if c in vowels:\n        return chr(ord(c) + 2)\n    return c\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        message = ''.join(map(switch_case, message))\n        message = ''.join(map(vowel_change, message))\n        return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(text):\n    result = \"\"\n    for char in text:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_change(text):\n    result = \"\"\n    for char in text:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef string_to_md5(text):\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_2hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        message = switch_case(message)\n        message = vowel_change(message)\n        return string_to_md5(message)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef vowel_change(char):\n    if char in 'aeiouAEIOU':\n        return chr(ord(char)+2)\n    return char\n\ndef string_to_md5(string):\n    hash_object = hashlib.md5(string.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    message = [switch_case(char) for char in message]\n    message = ''.join(message)\n    message = [vowel_change(char) for char in message]\n    message = ''.join(message)\n    \n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(c):\n    if c.islower():\n        return c.upper()\n    else:\n        return c.lower()\n\ndef vowel_change(c):\n    if c in 'aeiouAEIOU':\n        return chr(ord(c) + 2)\n    else:\n        return c\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        transformed_message = ''.join([switch_case(vowel_change(c)) for c in message])\n        return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch in vowels:\n        return chr(ord(ch) + 2)\n    return ch\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    transformed_message = [switch_case(vowel_change(ch)) for ch in message]\n    return string_to_md5(''.join(transformed_message))\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    make_upper = False\n    for char in message:\n        if char.isalpha():\n            if make_upper:\n                result += char.upper()\n            else:\n                result += char.lower()\n            make_upper = not make_upper\n        else:\n            result += char\n    return result\n\ndef vowel_change(message):\n    result = \"\"\n    for char in message:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    switched_case = switch_case(message)\n    changed_vowels = vowel_change(switched_case)\n    return hashlib.md5(changed_vowels.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        def shift(c):\n            o = ord(c)\n            if o +2 > ord('z') or (o in range(ord('a'), ord('u')+1) and o +2 > ord('i')):\n                return chr(o -26)\n            elif o in range(ord('A'), ord('U')+1) and o +2 > ord('I'):\n                return chr(o + 26)\n            else:\n                return chr(o +2)\n        \n        return ''.join([shift(c) if c in 'aeiouAEIOU' else c for c in s])\n\n    message = switch_case(message)\n    message = vowel_change(message)\n    return hashlib.md5(message.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    new_message = ''\n    for char in message:\n        if char.isupper():\n            new_message += char.lower()\n        elif char.islower():\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\ndef vowel_change(message):\n    new_message = ''\n    for char in message:\n        if char in 'aeiouAEIOU':\n            new_char = chr(ord(char) + 2)\n            new_message += new_char\n        else:\n            new_message += char\n    return new_message\n\ndef string_to_md5(message):\n    hash_md5 = hashlib.md5(message.encode())\n    return hash_md5.hexdigest()\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        message = switch_case(message)\n        message = vowel_change(message)\n        return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result\n\ndef vowel_change(message):\n    result = ''\n    for char in message:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef string_to_md5(message):\n    m = hashlib.md5()\n    m.update(message.encode('utf-8'))\n    return m.hexdigest()\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    switched = switch_case(message)\n    changed = vowel_change(switched)\n    return string_to_md5(changed)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            encoded_message += char.upper() if char.islower() else char.lower()\n        elif char in 'aeiouAEIOU':\n            encoded_message += chr(ord(char)+2)\n        else:\n            encoded_message += char\n\n    hashed_message = hashlib.md5(encoded_message.encode())\n    return hashed_message.hexdigest()\n",
                false
            ]
        ]
    },
    "3": {
        "level 1": [
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'q', 'u': 'v',\n              'A': 'C', 'E': 'G', 'I': 'J', 'O': 'Q', 'U': 'V'}\n    consonants = {'b': 'd', 'c': 'f', 'd': 'h', 'f': 'j', 'g': 'k',\n                  'h': 'm', 'j': 'p', 'k': 'r', 'm': 't', 'n': 'v',\n                  'p': 'x', 'q': 'z', 'r': 'b', 's': 'd', 't': 'f',\n                  'v': 'h', 'w': 'j', 'x': 'k', 'y': 'm', 'z': 'n'}\n    result = ''\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        encoded_group = ''\n        for char in group:\n            if char in vowels:\n                encoded_group += vowels[char]\n            elif char in consonants:\n                encoded_group += consonants[char]\n            else:\n                encoded_group += char\n        result += encoded_group[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the mapping for vowels\n    vowels = {'a':'c', 'e':'g', 'i':'j', 'o':'q', 'u':'s', 'A':'C', 'E':'G', 'I':'J', 'O':'Q', 'U':'S'}\n    \n    # Define the mapping for consonants\n    consonants = {'b':'d', 'c':'f', 'd':'h', 'f':'k', 'g':'m', 'h':'o', 'j':'p', 'k':'r', 'm':'t', 'n':'v', 'p':'x', 'q':'z', 'r':'b', 's':'d', 't':'f', 'v':'h', 'w':'j', 'x':'k', 'y':'m', 'z':'n', 'B':'D', 'C':'F', 'D':'H', 'F':'K', 'G':'M', 'H':'O', 'J':'P', 'K':'R', 'M':'T', 'N':'V', 'P':'X', 'Q':'Z', 'R':'B', 'S':'D', 'T':'F', 'V':'H', 'W':'J', 'X':'K', 'Y':'M', 'Z':'N'}\n\n    encoded_string = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            encoded_string += vowels[s[i]]  # Replace vowel\n        elif s[i] in consonants:\n            encoded_string += consonants[s[i]]  # Replace consonant\n        else:\n            encoded_string += s[i]  # Leave other characters unchanged\n\n    # Cyclic shift every three characters\n    cyclic_shifted_string = \"\"\n    for i in range(0, len(encoded_string), 3):\n        cyclic_shifted_string += encoded_string[i+2:] + encoded_string[i:i+2]\n\n    return cyclic_shifted_string\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    map_lower = 'cdeghjklmnpqrstvwxyzabf'\n    map_upper = 'CDEGHJKLMNPQRSTVWXYZABF'\n    map_vowels = 'eioua'\n    encoded = ''\n\n    for char in s:\n        if char in lower:\n            encoded += map_lower[lower.index(char)]\n        elif char in upper:\n            encoded += map_upper[upper.index(char)]\n        elif char in vowels:\n            encoded += map_vowels[vowels.index(char)]\n        else:\n            encoded += char\n            \n    return ''.join([encoded[i:i+3] for i in range(0, len(encoded), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'J', 'O': 'Q', 'U': 'W'}\n    encoded_s = ''\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        encoded_group = ''\n        for char in group:\n            if char.isalpha():\n                if char in vowels:\n                    encoded_group += vowels[char]\n                else:\n                    encoded_group += char.lower() if char.isupper() else char.upper()\n            else:\n                encoded_group += char\n        encoded_s += encoded_group[::-1]\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    shift_vowels = {v:consonants[consonants.index(v)-2%26] for v in vowels}\n    shift_consonants = {c:consonants[consonants.index(c)+2%26] for c in consonants}\n    trans = str.maketrans(shift_vowels | shift_consonants)\n    s_cycled = s[2:] + s[:2]\n    return ''.join([shift_vowels[c] if c in shift_vowels else shift_consonants[c] for c in s_cycled])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    result = \"\"\n    block = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                shifted = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n                if shifted in 'AEIOU':\n                    shifted = chr((ord(shifted) + 2 - ord('A')) % 26 + ord('A'))\n                result += shifted\n            else:\n                shifted = chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n                if shifted in 'aeiou':\n                    shifted = chr((ord(shifted) + 2 - ord('a')) % 26 + ord('a'))\n                result += shifted\n        else:\n            result += char\n        block += char\n        if len(block) == 3:\n            result = result[-2:] + result[:-2]\n            block = \"\"\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the mapping for shifting vowels\n    shift_vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Define the mapping for cycling characters\n    cycle_chars = {'b': 'd', 'c': 'e', 'd': 'f', 'f': 'h', 'g': 'i', 'h': 'j', 'i': 'k', 'k': 'm', 'j': 'l', 'm': 'n', 'l': 'o', 'n': 'p', 'o': 'r', 'p': 's', 'q': 't', 'r': 'v', 's': 'x', 't': 'y', 'v': 'z', 'w': 'a', 'x': 'b', 'y': 'd', 'z': 'e', 'A': 'D', 'B': 'E', 'C': 'F', 'D': 'H', 'E': 'I', 'F': 'J', 'G': 'K', 'H': 'M', 'I': 'N', 'J': 'L', 'K': 'O', 'L': 'P', 'M': 'R', 'N': 'S', 'O': 'V', 'P': 'X', 'Q': 'Y', 'R': 'Z', 'S': 'A', 'T': 'B', 'U': 'D', 'V': 'E', 'W': 'F', 'X': 'H', 'Y': 'I', 'Z': 'J'}\n    \n    encoded_s = ''\n    for i in range(len(s)):\n        if s[i] in shift_vowels:\n            encoded_s += shift_vowels[s[i]]\n        elif s[i].isalpha():\n            encoded_s += cycle_chars[s[i]]\n        else:\n            encoded_s += s[i]\n            \n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for i in range(len(s)):\n        if s[i] in lower:\n            new_char = chr((ord(s[i]) - 97 + 2) % 26 + 97)\n            if new_char in vowels:\n                new_char = chr((ord(new_char) - 97 + 2) % 26 + 97)\n            result += new_char\n        elif s[i] in upper:\n            new_char = chr((ord(s[i]) - 65 + 2) % 26 + 65)\n            if new_char in vowels:\n                new_char = chr((ord(new_char) - 65 + 2) % 26 + 65)\n            result += new_char\n        else:\n            result += s[i]\n    \n    return ''.join([result[i:i+3][::-1] for i in range(0, len(result), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    encoded_s = \"\"\n    for i in range(len(s)):\n        char = s[i]\n        if char.isalpha():\n            if char in vowels:\n                char = chr(ord(char) + 2)\n            else:\n                char = chr(ord(char) + 2)\n        encoded_s += char\n    return encoded_s[:3] + encode_cyclic_shift(encoded_s[3:]) if len(encoded_s) > 3 else encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    shift_vowels = {letter: chr((ord(letter) - 97 + 2) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 2) % 26 + 65) for letter in vowels}\n    shift_consonants = {letter: chr((ord(letter) - 97 + 3) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 3) % 26 + 65) for letter in consonants}\n    shift_map = {**shift_vowels, **shift_consonants}\n    encoded_s = ''.join(shift_map[c] if c in shift_map else c for c in s)\n    return ''.join([encoded_s[i:i+3][::-1] for i in range(0, len(encoded_s), 3)])[::-1]\n",
                false
            ],
            [
                "\ndef encode(mu_password):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v',\n              'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    rot = [1, 2, 3]\n\n    encoded = \"\"\n    for i, c in enumerate(mu_password):\n        if c in chars:\n            encoded += vowels[c] if c in vowels else c.swapcase()\n        else:\n            encoded += c\n        if i % 3 == 2:\n            encoded = encoded[-3:] + encoded[:-3]\n    return encoded\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    second_alphabet = alphabet[1:] + alphabet[0]\n    second_ALPHABET = ALPHABET[1:] + ALPHABET[0]\n    mupw_encoded = ''\n    for char in mupw:\n        if char in vowels:\n            mupw_encoded += second_alphabet[alphabet.index(char)]\n        elif char in ALPHABET:\n            mupw_encoded += second_ALPHABET[ALPHABET.index(char)]\n        else:\n            mupw_encoded += char\n    encoded_list = list(mupw_encoded)\n    for i in range(0, len(encoded_list), 3):\n        encoded_list[i], encoded_list[i+1], encoded_list[i+2] = encoded_list[i+1], encoded_list[i+2], encoded_list[i]\n    return ''.join(encoded_list)\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    vowel_map = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    result = ''\n    for i in range(len(mupw)):\n        if mupw[i] in vowel_map:\n            result += vowel_map[mupw[i]]\n        else:\n            result += mupw[i].upper() if mupw[i].islower() else mupw[i].lower()\n        if (i+1) % 3 == 0:\n            result = result[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    trans = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    mupw = mupw.translate(trans)\n    result = ''\n    for i in range(len(mupw)):\n        if (i+1) % 3 == 0:\n            result += mupw[i].swapcase()\n        else:\n            result += mupw[i]\n    return result\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    encoded = ''\n    \n    for character in mupw:\n        if character.isalpha():\n            if character.islower():\n                encoded += character.upper()\n            else:\n                encoded += character.lower()\n        elif character in vowels:\n            index = vowels.index(character)\n            encoded += alphabet[index+2] if character != 'u' else alphabet[index-3]\n        else:\n            encoded += character\n            \n    rotated = encoded[2:] + encoded[:2]\n    return rotated\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v',\n              'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    encoded = \"\"\n    chunk = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            encoded += vowels[s[i]]\n        elif s[i] in consonants:\n            chunk += consonants[(consonants.index(s[i]) + 1) % len(consonants)]\n        else:\n            chunk += s[i]\n        if (i + 1) % 3 == 0:\n            encoded += chunk[::-1]\n            chunk = \"\"\n    if chunk:\n        encoded += chunk[::-1]\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the replacement for vowels\n    vowels = {'a':'b', 'e':'f', 'i':'j', 'o':'p', 'u':'v', 'A':'B', 'E':'F', 'I':'J', 'O':'P', 'U':'V'}\n    \n    # Define the rotation mapping\n    rotation = {'b':'c', 'c':'d', 'd':'e', 'f':'g', 'g':'h', 'h':'i', 'j':'k', 'k':'l', 'l':'m', 'p':'q', 'q':'r', 'r':'s', 'v':'w', 'w':'x', 'x':'y', 'y':'z', 'B':'C', 'C':'D', 'D':'E', 'F':'G', 'G':'H', 'H':'I', 'J':'K', 'K':'L', 'L':'M', 'P':'Q', 'Q':'R', 'R':'S', 'V':'W', 'W':'X', 'X':'Y', 'Y':'Z'}\n    \n    # Apply the replacements and rotations\n    encoded = ''.join(vowels[c] if c in vowels else rotation[c] if c in rotation else c for c in s)\n    \n    # Cyclically shift every third character\n    return ''.join(c if i%3 != 2 else rotation[c] if c in rotation else c for i, c in enumerate(encoded))\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower_vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    lower_consonants = 'bcdfghjklmnpqrstvwxyz'\n    upper_consonants = 'BCDFGHJKLMNPQRSTVWXYZ'\n    vowels = lower_vowels+upper_vowels\n    consonants = lower_consonants+upper_consonants\n    \n    def shift_three(chars):\n        return chars[1:] + chars[0]\n    \n    def encode_char(c):\n        if c in vowels:\n            return chr(ord(c) - 1) if c in lower_vowels else chr(ord(c) - 1).upper()\n        elif c in consonants:\n            return chr(ord(c) + 1) if c in lower_consonants else chr(ord(c) + 1).upper()\n        else:\n            return c\n    \n    return ''.join(shift_three(encode_char(c)) if i%3==2 else encode_char(c) for i,c in enumerate(s))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(text):\n    vowels = \"aeiou\"\n    upper_case = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lower_case = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded = \"\"\n    for i in range(0, len(text), 3):\n        chunk = text[i:i+3]\n        for c in chunk:\n            if c in upper_case:\n                encoded += chr(ord(c) + 3) if c < 'X' else chr(ord(c) - 23)\n            elif c in lower_case:\n                encoded += chr(ord(c) + 3) if c < 'x' else chr(ord(c) - 23)\n            elif c in vowels:\n                encoded += chr(ord(c) - 1) if c > 'a' else chr(ord(c) + 21)\n            else:\n                encoded += c\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_string = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            # Change case and replace vowels\n            if s[i].lower() in vowels:\n                encoded_string += alphabet[(alphabet.index(s[i].lower()) - 1) % 26] if s[i].islower() else alphabet[(alphabet.index(s[i].lower()) - 1) % 26].upper()\n            else:\n                encoded_string += s[i].upper() if s[i].islower() else s[i].lower()\n            # Rotate chunks of three\n            if (i+1) % 3 == 0:\n                encoded_string = encoded_string[:-3] + encoded_string[-3:]\n        else:\n            encoded_string += s[i]\n    return encoded_string\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            result += chr((ord(s[i]) + 2) % ord('z') + ord('a') if s[i].islower() else ord(s[i]) + 2)\n        else:\n            result += s[i]\n        if (i+1) % 3 == 0:\n            result = result[-1] + result[:-1]\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    encoded_string = ''\n    \n    for i in range(len(s)):\n        char = s[i].lower()\n        \n        if char in vowels:\n            encoded_string += chr((ord(char) - 97 + 2) % 26 + 97)\n        elif char in consonants:\n            encoded_string += chr((ord(char) - 97 + 1) % 26 + 97)\n        else:\n            encoded_string += char\n            \n    return ''.join([encoded_string[i:i+3][::-1] for i in range(0, len(encoded_string), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    encoded_s = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            encoded_s += alphabet[(alphabet.index(s[i]) + 2) % len(alphabet)]\n        else:\n            encoded_l = (alphabet.index(s[i]) + 1) % len(alphabet) if i % 3 != 2 else (alphabet.index(s[i-1]) + 1) % len(alphabet)\n            encoded_r = (alphabet.index(s[i]) - 1) % len(alphabet) if i % 3 != 0 else (alphabet.index(s[i+1]) - 1) % len(alphabet)\n            encoded_s += alphabet[encoded_l] if (i % 3 == 0) else alphabet[encoded_r]\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    encoded_s = \"\"\n    for i in range(len(s)):\n        char = s[i]\n        if char.isalpha():\n            if char in vowels:\n                char = chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            encoded_s += char.swapcase()\n        else:\n            encoded_s += char\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    shift_vowels = {letter: chr((ord(letter) - 97 + 2) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 2) % 26 + 65) for letter in vowels}\n    shift_consonants = {letter: chr((ord(letter) - 97 + 2) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 2) % 26 + 65) for letter in consonants}\n    shift_map = {**shift_vowels, **shift_consonants}\n    s_shifted = ''.join(shift_map[ch] if ch in shift_map else ch for ch in s)\n    return ''.join(s_shifted[i:i+3][::-1] for i in range(0, len(s_shifted), 3))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shifted_alphabet = 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB'\n    encoded_str = ''\n    \n    for char in s:\n        if char in vowels:\n            encoded_str += shifted_alphabet[alphabet.index(char)+2]\n        else:\n            encoded_str += shifted_alphabet[alphabet.index(char)]\n        \n    return ''.join([encoded_str[i:i+3][::-1] for i in range(0, len(encoded_str), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the mapping for switching the casing and jumping vowels\n    switch_vowels = str.maketrans('aeiouAEIOU', 'cdeCDE')\n    # Perform casing switch and vowels shift on the string\n    s = s.translate(switch_vowels)\n\n    # Define a helper function to perform cyclic permutation\n    def cyclic_permute(s):\n        return s[2:] + s[:2]\n\n    # Split the string into three-character segments\n    segments = [s[i:i+3] for i in range(0, len(s), 3)]\n    # Perform cyclic permutation on each segment\n    segments = [cyclic_permute(seg) for seg in segments]\n    # Join the segments back into a string\n    s = ''.join(segments)\n\n    return s\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shift = 'cdefghijklmnopqrstuvwxyzab'\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n\n    for char in s:\n        if char in lower:\n            new_str += shift[lower.index(char)]\n        elif char in upper:\n            new_str += shift[upper.index(char)].upper()\n        elif char in vowels:\n            new_str += char\n        else:\n            new_str += char\n\n    return ''.join([new_str[i:i+3] for i in range(0, len(new_str), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    upper = [chr(i) for i in range(65, 91)]\n    lower = [chr(i) for i in range(97, 123)]\n    upper_shifted = upper[2:] + upper[:2]\n    lower_shifted = lower[2:] + lower[:2]\n    shift_map = dict(zip(upper, upper_shifted))\n    shift_map.update(dict(zip(lower, lower_shifted)))\n\n    encoded = ''\n    for c in s:\n        if c in vowels:\n            encoded += chr(ord(c) + 2)\n        else:\n            encoded += shift_map.get(c, c)\n\n    result = ''\n    for i in range(0, len(encoded), 3):\n        result += encoded[i:i+3][::-1]\n\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    shift_vowels = {letter: chr((ord(letter) - 97 + 2) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 2) % 26 + 65) for letter in vowels}\n    shift_consonants = {letter: chr((ord(letter) - 97 + 1) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 1) % 26 + 65) for letter in consonants}\n    shift_map = {**shift_vowels, **shift_consonants}\n    s = ''.join([shift_map[ch] if ch in shift_map else ch for ch in s])\n    return ''.join([s[i:i+3][::-1] for i in range(0, len(s), 3)])\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef encode_cyclic_shift(s):\n    swapped_case = s.swapcase()\n\n    def replace_vowels(ch):\n        if ch in 'AEIOUaeiou':\n            return chr(ord(ch) + 2)\n        return ch\n\n    no_vowels = ''.join(map(replace_vowels, swapped_case))\n\n    groups = [no_vowels[i:i+3] for i in range(0, len(no_vowels), 3)]\n\n    def cycle(group):\n        if len(group) > 1:\n            return group[-1] + group[:-1]\n        return group\n\n    encoded = ''.join(map(cycle, groups))\n\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the mapping for the vowels\n    vowels = {\n        'a': 'e',\n        'e': 'i',\n        'i': 'o',\n        'o': 'u',\n        'u': 'a',\n        'A': 'E',\n        'E': 'I',\n        'I': 'O',\n        'O': 'U',\n        'U': 'A',\n    }\n\n    # Swap the case and replace the vowels\n    encoded = [vowels[c] if c in vowels else c.lower() if c.isupper() else c.upper() for c in s]\n    encoded = ''.join(encoded)\n\n    # Group the string into segments of three characters and cycle each group\n    encoded = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    encoded = [x[1:] + x[0] for x in encoded]\n    encoded = ''.join(encoded)\n\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    encoded_s = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            encoded_s += alphabet[(alphabet.index(s[i]) + 2) % len(alphabet)]\n        else:\n            encoded_s += s[i]\n    final_s = \"\"\n    for i in range(0, len(encoded_s), 3):\n        final_s += encoded_s[i+1:] + encoded_s[i]\n    return final_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_string):\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', \n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    \n    encoded_string = ''\n    for char in input_string:\n        if char.isalpha():\n            if char in vowels.keys():\n                encoded_string += vowels[char]\n            else:\n                encoded_string += vowels[char.lower()].upper()\n        else:\n            encoded_string += char\n\n    chunks = [encoded_string[i:i+3] for i in range(0, len(encoded_string), 3)]\n\n    for i in range(len(chunks)):\n        if len(chunks[i]) < 3:\n            chunks[i] = chunks[i].ljust(3, ' ')\n        chunks[i] = chunks[i][1:] + chunks[i][0]\n\n    return ''.join(chunks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    shift_vowels = {v: v[1:] + v[0] for v in vowels}\n    shift_consonants = {c: c[1:] + c[0] for c in consonants}\n    trans = str.maketrans(shift_vowels)\n    trans.update(str.maketrans(shift_consonants))\n    s = s.translate(trans)\n    return ''.join([s[i:i+3][::-1] for i in range(0, len(s), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    s = s[::-1]\n    s = s.swapcase()\n    s = ''.join([chr((ord(c) - 97 + 2) % 26 + 97) if c in vowels else c for c in s])\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [x[1:] + x[0] for x in s]\n    s = ''.join(s)\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Transform case of all letters\n    s = s.swapcase()\n\n    # Replace each vowel with the next vowel two places forward\n    s = ''.join([chr(ord(c)+2) if c.lower() in 'aeiou' else c for c in s])\n\n    # Split into three-character chunks and rotate\n    s = ''.join([s[i+1:]+s[i] if (i+1)%3==0 else s[i] for i in range(len(s))])\n\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = \"aeiouAEIOU\"\n    chars = list(s)\n    \n    # Toggle case for each character\n    for i in range(len(chars)):\n        if chars[i].isalpha():\n            chars[i] = chars[i].upper() if chars[i].islower() else chars[i].lower()\n    \n    # Shift each vowel by 2 places\n    for i in range(len(chars)):\n        if chars[i] in vowels:\n            chars[i] = chars[i].upper() if chars[i] < 'U' else chars[i].lower()\n    \n    # Convert list of characters back to string\n    s = \"\".join(chars)\n    \n    # Split string into 3-character chunks\n    chunks = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Rotate each chunk\n    for i in range(len(chunks)):\n        chunks[i] = chunks[i][1:] + chunks[i][0]\n    \n    # Convert back to single string\n    s = \"\".join(chunks)\n    \n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    encoded_s = \"\"\n\n    for char in s:\n        if char.isalpha():\n            encoded_s += char.swapcase()\n        else:\n            encoded_s += char\n            \n    for i in range(len(encoded_s)):\n        if encoded_s[i] in vowels:\n            encoded_s = encoded_s[:i] + chr((ord(encoded_s[i]) - 97 + 2) % 26 + 97) + encoded_s[i+1:]\n\n    chunks = [encoded_s[i:i+3] for i in range(0, len(encoded_s), 3)]\n    \n    for i in range(len(chunks)):\n        chunks[i] = chunks[i][1:] + chunks[i][0]\n    \n    return \"\".join(chunks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Change case of all letters\n    transformed = \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n    # Replace all vowels with the next vowel two places forward\n    transformed = \"\".join(chr((ord(c) - 65 + 2) % 26 + 65) if c.isupper() and c in 'AEIOU' \n                          else chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() and c in 'aeiou' \n                          else c \n                          for c in transformed)\n\n    # Split into three-character chunks and rotate each chunk\n    chunks = [transformed[i:i+3] for i in range(0, len(transformed), 3)]\n    transformed = \"\".join(chunks[i][1:] + chunks[i][0] for i in range(len(chunks)))\n\n    return transformed\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    encoded = \"\"\n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            encoded += chr(ord(s[i]) + 2) if s[i].isupper() else chr(ord(s[i]) + 2)\n        else:\n            encoded += s[i].upper() if s[i].islower() else s[i].lower()\n    return \"\".join([encoded[i:i+3] for i in range(0, len(encoded), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Toggle case of each character in the string\n    s = s.swapcase()\n    \n    # Substitute each vowel in the string with the vowel two letters forward in alphabet\n    s = ''.join([chr(ord(c)+2) if c in 'aeiouAEIOU' else c for c in s])\n    \n    # Split the string into blocks of three characters and cycle each block\n    s = ''.join([s[i-1:i+2] if i%3==0 else s[i] for i in range(len(s))])\n    \n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    encoded_s = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            encoded_s += alphabet[(alphabet.index(s[i]) + 2) % len(alphabet)]\n        else:\n            encoded_s += s[i].swapcase()\n    encoded_s = [encoded_s[i:i+3] for i in range(0, len(encoded_s), 3)]\n    for i in range(len(encoded_s)):\n        encoded_s[i] = encoded_s[i][1:] + encoded_s[i][0]\n    return \"\".join(encoded_s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    trans = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    s = s.translate(trans)\n    blocks = [s[i:i+3] for i in range(0, len(s), 3)]\n    for i in range(len(blocks)):\n        blocks[i] = blocks[i][1:] + blocks[i][0]\n    return ''.join(blocks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char.isalpha():\n            char = char.swapcase()\n            if char in vowels:\n                char = chr(ord(char)+2)\n        encoded += char\n    encoded = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    for i in range(len(encoded)):\n        encoded[i] = encoded[i][1:]+encoded[i][0]\n    return ''.join(encoded)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    s = s[::-1]\n    s = s.swapcase()\n    s = ''.join(['v' if c in vowels else c for c in s])\n    s = [list(s[i:i+3]) for i in range(0, len(s), 3)]\n    s = [' '.join(trio) for trio in s]\n    s = ' '.join(s)\n    s = [s.split()[i:] + s.split()[:i] for i in range(len(s.split()))]\n    s = [' '.join(s[i]) for i in range(len(s))]\n    return ' '.join(s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_string):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_alphabet = \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\n\n    input_string = input_string[::-1]  # Reverse the string\n    encoded_string = \"\"\n\n    for char in input_string:\n        # Switch case if char is alphabetic\n        if char.isalpha():\n            char = char.swapcase()\n        # Shift vowels if char is vowel\n        if char in vowels:\n            char = shifted_alphabet[alphabet.index(char)]\n        # Rotate first character to end\n        if len(encoded_string) % 3 == 0 and len(encoded_string) != 0:\n            encoded_string = encoded_string[-1] + encoded_string[:-1]\n        # Add character to encoded string\n        encoded_string += char\n        \n    return encoded_string\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shift = 'cdefghijklmnopqrstuvwxyzab'\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n\n    for char in s:\n        if char in vowels:\n            new_str += shift[lower.index(char)] if char.islower() else shift[upper.index(char)]\n        else:\n            new_str += char\n\n    new_str = [new_str[i:i+3] for i in range(0, len(new_str), 3)]\n    new_str = [x[0] + x[1:] for x in new_str]\n\n    return ''.join(new_str)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_string):\n    # change case\n    input_string = input_string.swapcase()\n    \n    # shift vowels\n    vowels = 'aeiou'\n    shifted_vowels = 'cgkq'\n    for v, sv in zip(vowels, shifted_vowels):\n        input_string = input_string.replace(v, sv)\n        input_string = input_string.replace(v.upper(), sv.upper())\n    \n    # segment and reposition\n    trio_list = [input_string[i:i+3] for i in range(0, len(input_string), 3)]\n    for i in range(len(trio_list)):\n        if len(trio_list[i]) == 3:\n            trio_list[i] = trio_list[i][1:] + trio_list[i][0]\n    \n    return ''.join(trio_list)\n",
                true
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = \"aeiou\"\n    for v in vowels:\n        s = s.replace(v, chr((ord(v) - 97 + 2) % 26 + 97))\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [x[1:] + x[0] for x in s]\n    return ''.join(s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    encoded = \"\"\n\n    for character in s:\n        if character.isalpha():\n            character = character.lower() if character.isupper() else character.upper()\n\n        if character in 'aeiouAEIOU':\n            encoded += chr((ord(character) - 97 + 2) % 26 + 97) if character.islower() else chr((ord(character) - 65 + 2) % 26 + 65)\n        else:\n            encoded += character\n\n    while len(encoded) % 3 != 0:\n        encoded += ' '\n\n    encoded = encoded[-1] + encoded[:-1]\n\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_string):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_alphabet = \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\n    encoded_string = \"\"\n\n    # Flip case and shift vowels\n    for char in input_string:\n        if char in vowels:\n            encoded_string += shifted_alphabet[alphabet.index(char)]\n        elif char.isalpha():\n            encoded_string += shifted_alphabet[alphabet.index(char) + 26]\n        else:\n            encoded_string += char\n\n    # Perform cyclic shift on groups of three characters\n    for i in range(0, len(encoded_string), 3):\n        group = encoded_string[i:i+3]\n        encoded_string = encoded_string[:i] + group[-1] + group[:-1]\n\n    return encoded_string\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    shifted_vowels = {'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w'}\n    shifted_vowels.update({k.upper(): v.upper() for k, v in shifted_vowels.items()})\n\n    encoded_s = \"\"\n    for char in s:\n        if char.isalpha():\n            char = char.lower() if char.isupper() else char.upper()\n        if char in shifted_vowels:\n            char = shifted_vowels[char]\n        encoded_s += char\n\n    grp_s = \"\"\n    for i in range(len(encoded_s)):\n        if i % 3 == 0 and i != 0:\n            grp_s += encoded_s[i] + encoded_s[:i] + encoded_s[i+1:]\n        else:\n            grp_s += encoded_s[i]\n            \n    return grp_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Flip the case of all alphabetic characters\n    s = s.swapcase()\n\n    # Shift each vowel forward by two characters\n    for i in range(len(s)):\n        c = s[i]\n        if c in 'aeiouAEIOU':\n            c = chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65)\n            s = s[:i] + c + s[i+1:]\n\n    # Move each group of three characters\n    s = s[2:] + s[:2]\n\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr((ord(char.lower()) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded += chr((ord(char.lower()) - 97) % 26 + 97) if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        else:\n            encoded += char\n\n    return ''.join([encoded[i:i+3][::-1] + encoded[i+3:] for i in range(0, len(encoded), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    encoded_s = ''\n\n    # Switch the case of the string\n    for c in s:\n        if c.islower():\n            encoded_s += c.upper()\n        else:\n            encoded_s += c.lower()\n\n    # Replace vowels with two steps later in the alphabet\n    for c in encoded_s:\n        if c in vowels:\n            if c.islower():\n                encoded_s = encoded_s.replace(c, chr((ord(c) - ord('a') + 2) % 26 + ord('a')))\n            else:\n                encoded_s = encoded_s.replace(c, chr((ord(c) - ord('A') + 2) % 26 + ord('A')))\n\n    # Group the string into groups of three characters\n    groups = [encoded_s[i:i+3] for i in range(0, len(encoded_s), 3)]\n\n    # Cyclic shift\n    for i in range(len(groups)):\n        groups[i] = groups[i][1:] + groups[i][0]\n\n    return ''.join(groups)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_string):\n    def switch_case(character):\n        if character.islower():\n            return character.upper()\n        elif character.isupper():\n            return character.lower()\n        else:\n            return character\n\n    def shift_vowel(character):\n        if character in 'aeiouAEIOU':\n            if character.islower():\n                return chr((ord(character) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(character) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return character\n\n    def cyclic_shift(group):\n        return group[-1] + group[:-1]\n\n    input_string = ''.join(map(switch_case, input_string))\n    input_string = ''.join(map(shift_vowel, input_string))\n    input_string = [input_string[i:i+3] for i in range(0, len(input_string), 3)]\n    input_string = ''.join(map(cyclic_shift, input_string))\n\n    return input_string\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    switcher = str.maketrans(lower + upper, upper + lower)\n\n    s = s.translate(switcher)\n\n    for vowel in 'aeiouAEIOU':\n        s = s.replace(vowel, chr(ord(vowel) + 2))\n\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n\n    for i in range(len(s)):\n        if len(s[i]) == 3:\n            s[i] = s[i][1:] + s[i][0]\n\n    return ''.join(s)\n",
                true
            ],
            [
                "\ndef encode_cyclic_shift(str):\n    def shift_vowel(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        return c\n\n    def shift_case(c):\n        if c.isupper():\n            return c.lower()\n        return c.upper()\n\n    str = ''.join(map(shift_case, str))\n    str = ''.join(map(shift_vowel, str))\n\n    res = []\n    for i in range(0, len(str), 3):\n        group = list(str[i:i+3])\n        group.append(group.pop(0))\n        res.append(''.join(group))\n\n    return ''.join(res)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Swap cases of string and replace vowels\n    s = \"\".join([\"A\" if c.islower() else \"a\" if c.isupper() else chr(ord(c)+2) if c in \"aeiouAEIOU\" else c for c in s])\n\n    # Group string into groups of three characters and cyclically shift\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [s[i][1:] + s[i][0] for i in range(len(s))]\n\n    return \"\".join(s)\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        return ''.join(['u' if c=='a' else 'e' if c=='i' else 'o' if c=='u' else 'a' if c=='e' else 'i' if c=='o' else c for c in s])\n\n    m = switch_case(s)\n    m = vowel_change(m)\n\n    return ''.join([m[i-1]+m[i]+m[i+1] if i%3==0 else m[i] for i in range(len(m))])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(t):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in t)\n\n    def vowel_change(t):\n        return ''.join('u' if c=='a' else 'a' if c=='e' else 'e' if c=='i' else 'i' if c=='o' else 'o' if c=='u' else 'A' if c=='E' else 'E' if c=='I' else 'I' if c=='O' else 'O' if c=='U' else c for c in t)\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    m = [x[1:]+x[0] if len(x)==3 else x for x in m]\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        return ''.join(['a' if c == 'e' else 'e' if c == 'a' else 'i' if c == 'o' else 'o' if c == 'i' else 'u' if c == 'u' else 'A' if c == 'E' else 'E' if c == 'A' else 'O' if c == 'I' else 'I' if c == 'O' else 'U' if c == 'U' else c for c in s])\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(groups)):\n        if len(groups[i]) == 3:\n            groups[i] = groups[i][1:] + groups[i][0]\n    return ''.join(groups)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    def switch_case(str_s: str) -> str:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in str_s])\n\n    def vowel_change(str_s: str) -> str:\n        return ''.join([chr(ord(char) + 2) if char in 'aeiouAEIOU' else char for char in str_s])\n\n    m = switch_case(s)\n    m = vowel_change(m)\n\n    return ''.join([group[1:] + group[0] if len(group) == 3 else group for group in [m[i:i+3] for i in range(0, len(m), 3)]])\n\n",
                true
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n    def vowel_change(s):\n        return \"\".join(\"u\" if c==\"a\" else \"e\" if c==\"i\" else \"o\" if c==\"u\" else \"a\" if c==\"e\" else \"i\" if c==\"o\" else c for c in s)\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)):\n        if len(m[i]) == 3:\n            m[i] = m[i][1:] + m[i][0]\n    return \"\".join(m)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        change = str.maketrans('aeiouAEIOU', 'cghijCGHIJ')\n        return s.translate(change)\n\n    m = switch_case(s)\n    m = vowel_change(m)\n\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    segments = [segments[i-1] + segments[i] for i in range(1, len(segments))] + segments[:1]\n\n    return ''.join(segments)\n",
                false
            ],
            [
                "\ndef shift_vowels(s):\n    s = list(s)\n    for i, char in enumerate(s):\n        if char in 'aeiouAEIOU':\n            if char.isupper():\n                s[i] = chr((((ord(char) - 65) + 2) % 26) + 65)\n            else:\n                s[i] = chr((((ord(char) - 97) + 2) % 26) + 97)\n    return ''.join(s)\n\ndef switch_case(s):\n    return s.swapcase()\n\ndef encode_cyclic_shift(s):\n    s = switch_case(s)\n    s = shift_vowels(s)\n    return ''.join([s[i-2:i+1][::-1] if i % 3 == 0 else s[i:i+3][::-1] for i in range(0, len(s))])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for char in s:\n            if char in vowels:\n                new_s += chr((ord(char) - 96 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                new_s += char\n        return new_s\n\n    m = switch_case(s)\n    m = vowel_change(m)\n\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    segments = [segment[-1] + segment[:-1] for segment in segments]\n\n    return ''.join(segments)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(i):\n        return i.upper() if i.islower() else i.lower()\n\n    def vowel_change(i):\n        if i in 'aeiouAEIOU':\n            return chr((ord(i) - 94) % 26 + 97)\n        return i\n\n    t = ''.join(map(switch_case, s))\n    m = ''.join(map(vowel_change, t))\n    return ''.join([m[i:i+3][::-1] if len(m[i:i+3]) == 3 else m[i:i+3] for i in range(0, len(m), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        shifted_vowels = \"cde\"\n        trans = str.maketrans(vowels+vowels.upper(), shifted_vowels+shifted_vowels.upper())\n        return s.translate(trans)\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    return \"\".join([m[i:i+3][::-1] for i in range(0, len(m), 3)])\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return s.swapcase()\n\ndef vowel_change(s):\n    vowels = 'aeiou'\n    result = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                result += chr(ord(char) + 2) if ord(char) + 2 <= ord('z') else chr(ord(char) - 24)\n            else:\n                result += chr(ord(char) + 2) if ord(char) + 2 <= ord('Z') else chr(ord(char) - 24)\n        else:\n            result += char\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n\n    trios = []\n    for i in range(0, len(m), 3):\n        trios.append(m[i:i+3])\n\n    for i in range(len(trios)):\n        if i != len(trios) - 1:\n            trios[i] = trios[i][1:] + trios[i][0]\n\n    return ''.join(trios)\n",
                false
            ],
            [
                "\ndef shift_first_char(s):\n    return s[1:] + s[0]\n\ndef switch_case(s):\n    result = \"\"\n    for ch in s:\n        if ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n\ndef vowel_change(s):\n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for ch in s:\n        if ch in vowels:\n            idx = vowels.index(ch)\n            result += vowels[(idx + 2) % len(vowels)]\n        else:\n            result += ch\n    return result\n\ndef encode_cyclic_shift(s):\n    s = switch_case(s)\n    s = vowel_change(s)\n    result = \"\"\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        result += shift_first_char(group)\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for c in s:\n            if c in vowels:\n                new_s += chr((ord(c)+2-97)%26+97) if c.islower() else chr((ord(c)+2-65)%26+65)\n            else:\n                new_s += c\n        return new_s\n\n    m = vowel_change(switch_case(s))\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(trios)):\n        if i == 0 or len(trios[i-1]) < 3:\n            trios[i] = trios[i][1:] + trios[i][:1]\n    return ''.join(trios)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiou'\n        shifted_vowels = 'cde'\n        trans = str.maketrans(vowels, shifted_vowels)\n        return s.translate(trans)\n\n    m = vowel_change(switch_case(s))\n    return ''.join([''.join([m[i], m[i+1], m[i+2]]) for i in range(0, len(m), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        new_s = []\n        for c in s:\n            if c.lower() in vowels:\n                new_s.append(chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65))\n            else:\n                new_s.append(c)\n        return \"\".join(new_s)\n\n    m = vowel_change(switch_case(s))\n    return \"\".join([m[i:i+3] if i+3 <= len(m) else m[i:] + m[:3-len(m)%3] for i in range(0, len(m), 3)])[:len(m)]\n\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\ndef vowel_change(s):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'J', 'O': 'Q', 'U': 'W'}\n    return ''.join([vowels[c] if c in vowels else c for c in s])\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    return ''.join([\"\".join(m[i:i+3])[::-1] for i in range(0, len(m), 3)])\n\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_change(s):\n    result = \"\"\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            if char.islower():\n                result += chr(ord(char) + 2)\n            else:\n                result += chr(ord(char) + 2).upper()\n        else:\n            result += char\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    return \"\".join([m[i - 3 if i - 3 > -len(m) else -len(m) + i : i] for i in range(len(m)) if i % 3 == 0])\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    new_s = \"\"\n    for char in s:\n        if char.isupper():\n            new_s += char.lower()\n        else:\n            new_s += char.upper()\n    return new_s\n\ndef vowel_change(s):\n    new_s = \"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'J', 'O': 'Q', 'U': 'W'}\n    for char in s:\n        if char in vowels:\n            new_s += vowels[char]\n        else:\n            new_s += char\n    return new_s\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)):\n        m[i] = m[i][1:] + m[i][0]\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return s.swapcase()\n\ndef vowel_change(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for c in s:\n        if c.lower() in vowels:\n            result += chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        else:\n            result += c\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    chunks = [chunks[i-1:] + chunks[:i-1] for i in range(1, len(chunks)+1)]\n    return ''.join(chunks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(c if c.lower() not in vowels else chr((ord(c) - 97 + 2) % 26 + 97) for c in s)\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    \n    return \"\".join([m[i-1:] + m[:i-1] for i in range(1, len(m)+1) if i%3==1])\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\ndef vowel_change(s):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for c in s:\n        if c in vowels:\n            result.append(chr(ord(c) + 2))\n        else:\n            result.append(c)\n    return ''.join(result)\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    triplets = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(triplets)):\n        triplets[i] = triplets[i][1:] + triplets[i][0]\n    return ''.join(triplets)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Helper function to switch case of a character\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    # Helper function to change vowel position\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            if c.isupper():\n                return chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(c) - 97 + 2) % 26 + 97)\n        else:\n            return c\n\n    # Apply switch_case and vowel_change functions\n    m = ''.join([switch_case(vowel_change(c)) for c in s])\n\n    # Rearrange and shift\n    m = [m[i:i+3][::-1] for i in range(0, len(m), 3)]\n    m = ''.join([''.join(m[i]) for i in range(len(m))])\n\n    return m\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for c in s:\n            if c in vowels:\n                new_s += chr(ord(c)+2) if c.islower() else chr(ord(c)-2)\n            else:\n                new_s += c\n        return new_s\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    result = ''\n    for i in range(0, len(m), 3):\n        group = m[i:i+3]\n        result += group[1:] + group[0]\n    return result\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\ndef vowel_change(s):\n    v = 'aeiou'\n    V = 'AEIOU'\n    return ''.join([v[v.find(c) - 2] if c in v else V[V.find(c) - 2] if c in V else c for c in s])\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    m = [''.join(i) for i in m]\n    m = [i[-1] + i[:-1] for i in m]\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def vowel_change(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        else:\n            return c\n\n    m = ''.join(map(switch_case, s))\n    m = ''.join(map(vowel_change, m))\n\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    m = [m[i-1] + m[i] + m[i+1] for i in range(1, len(m)-1)] + [m[-1]]\n\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return s.swapcase()\n\ndef vowel_change(s):\n    vowels = 'aeiou'\n    result = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                result += chr(ord(char) + 2) if char != 'y' else 'a'\n            else:\n                result += chr(ord(char) + 2) if char != 'Y' else 'A'\n        else:\n            result += char\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    result = \"\"\n    for i, group in enumerate(groups):\n        if i % 2 == 0:\n            result += group[1:] + group[0]\n        else:\n            result += group[0] + group[1:]\n    return result\n\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_change(s):\n    result = \"\"\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            if char.islower():\n                result += chr(ord(char) + 2)\n            else:\n                result += chr(ord(char) + 2).upper()\n        else:\n            result += char\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    m = [m[-1] + m[:-1]]\n    return ''.join(m[0])\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    new_s = \"\"\n    for char in s:\n        if char.isupper():\n            new_s += char.lower()\n        else:\n            new_s += char.upper()\n    return new_s\n\ndef vowel_change(s):\n    new_s = \"\"\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            new_s += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            new_s += char\n    return new_s\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)):\n        m[i] = m[i][1:] + m[i][0]\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return s.swapcase()\n\ndef vowel_change(s):\n    vowels = \"aeiou\"\n    trans = str.maketrans(vowels, vowels[2:] + vowels[:2])\n    return s.translate(trans)\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    return ''.join([''.join(x[1:]+x[0]) for x in [m[i:i+3] for i in range(0, len(m), 3)]])\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_change(s):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char in vowels:\n            if char.isupper():\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    return \"\".join([m[i:i+3].translate(str.maketrans(m[i:i+3], m[i+1:i+4]+m[i:i+1])) for i in range(0, len(m), 3)])\n\n",
                false
            ]
        ]
    },
    "4": {
        "level 1": [
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    letters = 'bcdfghjklmnpqrstvwxyz'\n    vowels_shifted = ''.join([letters[(letters.index(v) + 2) % len(letters)] for v in vowels])\n    result = ''\n    for char in s:\n        if char in letters:\n            result += vowels_shifted[letters.index(char)] if char in vowels else letters[letters.index(char)]\n        else:\n            result += char\n    return result[::-1] if any(c.isalpha() for c in s) else result\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'J', 'O': 'Q', 'U': 'W'}\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += vowels[char]\n            else:\n                result += vowels[chr(ord(char) - 32)]\n        else:\n            result += char\n    return result if result.isalpha() else result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord(char) + 2)\n            else:\n                result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_s += vowels[char]\n            else:\n                new_s += vowels[chr(ord(char) - 32)]\n        else:\n            new_s += char\n    return new_s[::-1] if new_s else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord(char) + 4) if char.islower() else chr(ord(char) + 4).upper()\n            else:\n                result += chr(ord(char) + 4) if char.islower() else chr(ord(char) + 4).upper()\n        else:\n            result += char\n    return result[::-1] if result else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    result = \"\"\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    for c in s:\n        if c.isalpha():\n            if c in vowels:\n                result += vowels[c]\n            else:\n                result += c.swapcase()\n        else:\n            result += c\n\n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n    \n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += vowels[char]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result if result else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            char = char.swapcase()\n            if char.lower() in vowels:\n                if char.isupper():\n                    char = chr(ord(char)+2)\n                else:\n                    char = chr(ord(char)-2)\n            result += char\n        else:\n            result += char\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', \n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            s_list[i] = vowels[s_list[i]] if s_list[i] in vowels else s_list[i].swapcase()\n    return ''.join(s_list) if any(c.isalpha() for c in s) else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase() if char.lower() not in vowels else chr(ord(char)+2)\n        else:\n            result += char\n    return result[::-1] if len(result) == 0 else result\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += chr(ord(char) + 2) if char.islower() else chr(ord(char) + 2).lower()\n            else:\n                result += chr(ord(char) - 2) if char.islower() else chr(ord(char) - 2).lower()\n        else:\n            result += char\n    return result[::-1] if not result else result\n",
                false
            ],
            [
                "\ndef shift_alpha(c, shift):\n    ascii_offset = 97 if c.islower() else 65\n    return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n\ndef solve_with_voucher(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(shift_alpha(c, 2) if c.lower() in 'aeiou' else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        vouchers = 'aeiouAEIOU'\n        shift = {c: vouchers[(vouchers.index(c) + 2) % len(vouchers)] for c in vouchers}\n        return ''.join([shift[c] if c.isalpha() else c for c in s])\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if not char.isalpha():\n            result += char\n        elif char in vowels:\n            result += chr((ord(char) - 96) % 26 + 98)\n        else:\n            result += chr((ord(char) - 97) % 26 + 97)\n    return result[::-1] if result == '' else result\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = 'aeiou'\n    result = ''\n    has_alpha = False\n    \n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            char = char.lower()\n            if char in vowels:\n                if ord(char)+2 > ord('z'):\n                    result += chr(ord(char)-2)\n                else:\n                    result += chr(ord(char)+2)\n            else:\n                result += char\n                \n        else:\n            result += char\n\n    if has_alpha:\n        return result\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                if char.isupper():\n                    result += chr(ord('A') + (ord(char) - ord('A') + 2) % 26)\n                else:\n                    result += chr(ord('a') + (ord(char) - ord('a') + 2) % 26)\n            else:\n                if char.isupper():\n                    result += chr(ord('A') + (ord(char) - ord('A')))\n                else:\n                    result += chr(ord('a') + (ord(char) - ord('a')))\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    result = \"\"\n    for character in s:\n        if character.isalpha():\n            if character in vowels:\n                result += vowels[character]\n            else:\n                result += vowels[character.swapcase()]\n        else:\n            result += character\n\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char in lower_vowels:\n                result += chr(ord(char) + 2)\n            elif char in upper_vowels:\n                result += chr(ord(char) + 2)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    if len(result) == 0:\n        return s[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            char = char.swapcase()\n            if char in vowels:\n                char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            result += char\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n            if char.lower() in vowels:\n                result = result[:-1] + chr(((ord(result[-1]) - 97 + 2) % 26) + 97)\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for character in s:\n        if character.isalpha():\n            character = character.lower() if character.isupper() else character.upper()\n            if character in vowels:\n                character = chr((ord(character) - 96) % 26 + 98)\n            result += character\n        else:\n            result += character\n    return result if result else result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c in vowels:\n                shifted_char = chr((ord(c) + 2) % 26 + ord('A') if c.isupper() else ord(c) + 2 % 26 + ord('a'))\n                result += shifted_char\n            else:\n                inverted_char = c.upper() if c.islower() else c.lower()\n                result += inverted_char\n        else:\n            result += c\n    return result if result else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr((ord(char) - 65 + 2) % 26 + 65)  # for capital letter\n            else:\n                char = chr((ord(char) - 97 + 2) % 26 + 97)  # for lowercase letter\n        result += char\n    return result if result else result[::-1]\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((((ord(char) - 65) % 26) + 2) % 26 + 65) if char.isupper() else chr((((ord(char) - 97) % 26) + 2) % 26 + 97)\n            else:\n                result += chr((((ord(char) - 65) % 26) + 2) % 26 + 65) if char.isupper() else chr((((ord(char) - 97) % 26) + 2) % 26 + 97)\n        else:\n            result += char\n    return result if result else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n            if char.lower() in vowels:\n                result = result[:-1] + chr(((ord(result[-1]) - 97 + 2) % 26) + 97)\n        else:\n            result += char\n    return result[::-1] if not result else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    next_vowels = 'eioua'\n    transform = str.maketrans(vowels, next_vowels)\n    s = s.translate(transform)\n    return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    result = \"\"\n    for character in s:\n        if character.isalpha():\n            result += vowels[character] if character in vowels else character.swapcase()\n        else:\n            result += character\n    return result[::-1] if any(char.isalpha() for char in s) else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            char = char.lower() if char.isupper() else char.upper()\n            if char in vowels:\n                char = chr(ord(char) + 2) if ord(char) + 2 <= ord('z') else chr(ord('a') + ord(char) - ord('z') - 1)\n            result += char\n        else:\n            result += char\n    return result[::-1] if any(char.isalpha() for char in s) else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', \n              'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            s_list[i] = vowels[s_list[i]] if s_list[i].islower() else vowels[s_list[i].lower()].upper()\n        else:\n            s_list[i] = s_list[i]\n    if any(x.isalpha() for x in s_list):\n        return ''.join(s_list[::-1])\n    else:\n        return ''.join(s_list)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase() if char.lower() not in vowels else chr(ord(char)+2)\n        else:\n            result += char\n    return result[::-1] if any(c.isalpha() for c in s) else result\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowels(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    # check if string has no letters\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowels(char).swapcase() if char.isalpha() else char for char in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the inner function\n    def replace_vowel(c):\n        if c in 'aeiou':\n            return chr(ord(c) + 2)\n        return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowel(c.lower()) if c.isalpha() else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowel(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            return 'ei' if char.islower() else 'EI'\n        return char\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowel(char)[::-1] if char.isalpha() else char for char in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    def replace_vowel(ch: str) -> str:\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            if ch.islower():\n                return chr(ord('a') + (vowels.index(ch) + 2) % 5)\n            else:\n                return chr(ord('A') + (vowels.index(ch) + 2) % 5)\n        return ch\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowel(ch) if ch.isalpha() else ch for ch in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowels(c):\n        if c.lower() in 'aeiou':\n            return chr((ord(c) - 32) % 26 + 65)\n        return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowels(c)[::-1] if c.isalpha() else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def shift_vowel(c):\n        vowels = 'aeiou'\n        shifted = 'eioua'\n        return shifted[vowels.index(c)] if c in vowels else c\n\n    modified = [shift_vowel(swap_case(c)) if c.isalpha() else c for c in s]\n\n    return ''.join(modified[::-1]) if any(c.isalpha() for c in s) else ''.join(modified)\n\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    return chr((ord(c) - ord('a') + 1) % 26 + ord('b'))\n\ndef solve_with_vowel(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    modified = [c if c not in vowels else shift_vowel(c) if c.islower() else shift_vowel(c).upper() for c in s]\n    modified = [c.swapcase() if c.isalpha() else c for c in modified]\n    return ''.join(modified) if any(c.isalpha() for c in s) else s[::-1]\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def swap_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def shift_vowel(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            if c.isupper():\n                return chr((ord(c) - ord('A') - 1) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('a') - 1) % 26 + ord('a'))\n        else:\n            return c\n\n    has_letter = any(c.isalpha() for c in s)\n    transformed = ''.join(swap_case(shift_vowel(c)) if c.isalpha() else c for c in s)\n    return transformed[::-1] if not has_letter else transformed\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    def swap_case(ch: str) -> str:\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def shift_vowel(ch: str) -> str:\n        vowels = 'aeiou'\n        shifted_vowels = 'eioua'\n        return shifted_vowels[vowels.index(ch)] if ch in vowels else ch\n\n    modified = [shift_vowel(swap_case(ch)) if ch.isalpha() else ch for ch in s]\n\n    return ''.join(modified) if any(ch.isalpha() for ch in s) else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def swap_case(c):\n        return c.upper() if c.islower() else c.lower()\n\n    def shift_vowel(c):\n        if c in \"aeiouAEIOU\":\n            c = chr(ord(c) - 2)\n        return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(shift_vowel(swap_case(c)) if c.isalpha() else c for c in s)\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def is_vowel(ch):\n        return ch.lower() in 'aeiou'\n\n    def invert_and_advance(ch):\n        if not ch.isalpha():\n            return ch\n        elif ch.isupper():\n            return chr(65 + (20 - (ord(ch) - 65)) % 26) if is_vowel(ch) else chr(ord(ch) - 32)\n        else:\n            return chr(97 + (20 - (ord(ch) - 97)) % 26) if is_vowel(ch) else chr(ord(ch) - 32)\n\n    return ''.join(invert_and_advance(ch) for ch in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the embedded function\n    def advance_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        return c\n\n    # Check if the string contains any letters\n    if any(c.isalpha() for c in s):\n        # Invert the string\n        s = s[::-1]\n        # Use the map function with the embedded function to adjust each character\n        s = ''.join(map(advance_vowel, s))\n    return s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def is_vowel(c):\n        return c.lower() in 'aeiou'\n\n    def advance_vowel(c):\n        if is_vowel(c):\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(invert_case(advance_vowel(c)) if c.isalpha() else c for c in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def advance_vowel(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            if c.isupper():\n                return chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(c) - 97 + 2) % 26 + 97)\n        else:\n            return c\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(switch_case(advance_vowel(c)) if c.isalpha() else c for c in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiouAEIOU'\n    s_new = ''\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    s_new += chr(ord(char) + 4)\n                else:\n                    s_new += chr(ord(char) + 4)\n            else:\n                if char.islower():\n                    s_new += chr(ord(char) + 4)\n                else:\n                    s_new += chr(ord(char) + 4)\n        else:\n            s_new += char\n    if not any(char.isalpha() for char in s):\n        s_new = s_new[::-1]\n    return s_new\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_and_move_vowel(c):\n        if not c.isalpha():\n            return c\n        lower_c = c.lower()\n        if lower_c in 'aeiou':\n            if c.isupper():\n                return chr((ord(c) - 65 + 2) % 26 + 65)  # To upper case vowel\n            else:\n                return chr((ord(c) - 97 + 2) % 26 + 97)  # To lower case vowel\n        else:\n            if c.isupper():\n                return chr((ord(c) - 65 + 25) % 26 + 65)  # To upper case consonant\n            else:\n                return chr((ord(c) - 97 + 25) % 26 + 97)  # To lower case consonant\n    return ''.join(map(invert_and_move_vowel, s))\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the vowels\n    vowels = \"aeiou\"\n\n    def transform(c):\n        # If c is a vowel, move it 2 places in the alphabet\n        if c.lower() in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        # Else invert the case of the character\n        else:\n            if c.islower():\n                return c.upper()\n            else:\n                return c.lower()\n\n    # If there are no alphabetic characters, reverse the string\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    # Otherwise, apply the transformation\n    return ''.join(map(transform, s))\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def shift_vowel(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(invert_case(shift_vowel(c)) if c.isalpha() else c for c in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def move_vowel(c):\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        if c.lower() in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(switch_case(move_vowel(c)) if c.isalpha() else c for c in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def move_vowel(c):\n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        if c in vowels:\n            # The ASCII values of a, e, i, o, u are 97, 101, 105, 111, 117\n            # Their equivalent uppercase counterparts are 65, 69, 73, 79, 85\n            # For each character, we add 2 to its ASCII value and keep it within the range of lowercase\n            # Including uppercase, so we modulo operation by 122 (ascii value of 'z') and 97 (ascii value of 'a')\n            return chr(((ord(c) - 97 + 2) % 26) + 65)\n        else:\n            return c\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(invert_case(move_vowel(c)) if c.isalpha() else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_alpha(c):\n        v = 'aeiou'\n        c_lower = c.lower()\n        if c_lower in v:\n            return chr((ord(c_lower) - 97 + 2) % 26 + 97).upper() if c.isupper() else chr((ord(c_lower) - 97 + 2) % 26 + 97)\n        else:\n            return c\n\n    s_alpha = [shift_alpha(c) for c in s]\n    \n    return ''.join(s_alpha[::-1]) if not any(x.isalpha() for x in s_alpha) else ''.join(s_alpha)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the helper function\n    def flipped_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    # Define the helper function\n    def position_increase(c):\n        if c in 'aeiou':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    # Check if there is any alphabetic character in the string\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    # Process each character in the string\n    return ''.join(flipped_case(position_increase(c)) if c.isalpha() else c for c in s)\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_shift(c):\n        if c.lower() in 'aeiou':\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        return c\n    has_alpha = any(c.isalpha() for c in s)\n    if not has_alpha:\n        return s[::-1]\n    return ''.join(vowel_shift(c) for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowel(c):\n        vowels = 'aeiou'\n        new_c = chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65)\n        if new_c in vowels:\n            return new_c\n        else: \n            return c\n\n    modified_s = ''.join([shift_vowel(c).swapcase() if c.isalpha() else c for c in s])\n    \n    if not any(char.isalpha() for char in modified_s):\n        return modified_s[::-1]\n    return modified_s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowels(c):\n        vowels = \"aeiou\"\n        if c.lower() in vowels:\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        return c\n    alpha_present = any(char.isalpha() for char in s)\n    result = ''.join(shift_vowels(char) if char.isalpha() else char for char in s)\n    return result[::-1] if not alpha_present else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowels(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            if char.islower():\n                return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return char\n\n    s = ''.join(shift_vowels(char) if char.isalpha() else char for char in s)\n    return s[::-1] if any(c.isalpha() for c in s) else ''\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    vowels = 'aeiou'\n    if c.islower():\n        c = c.upper()\n        if c in vowels:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n    else:\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n    return c\n\ndef solve_with_vowel(s):\n    result = [shift_vowel(c) if c.isalpha() else c for c in s]\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return ''.join(result)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = 'aeiou'\n        upper_vowels = vowels.upper()\n        if char in vowels:\n            return upper_vowels[(upper_vowels.index(char) + 2) % len(vowels)]\n        elif char in upper_vowels:\n            return vowels[(vowels.index(char) + 2) % len(vowels)]\n        else:\n            return char\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    upper_alphabet = alphabet.upper()\n\n    modified_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                modified_s += shift_vowel(char)\n            else:\n                new_char = alphabet[(alphabet.index(char.lower()) + 1) % len(alphabet)] if char.islower() else upper_alphabet[(upper_alphabet.index(char) + 1) % len(alphabet)]\n                modified_s += new_char.upper() if char.isupper() else new_char.lower()\n        else:\n            modified_s += char\n\n    return modified_s[::-1] if not modified_s else modified_s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2) if char.islower() else chr(ord(char) + 2)\n        return char\n\n    if any(char.isalpha() for char in s):\n        return ''.join(shift_vowel(char.swapcase()) if char.isalpha() else char for char in s)\n    return s[::-1]\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowels(c):\n        vowels = \"aeiou\"\n        lower_c = c.lower()\n        if lower_c in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(shift_vowels(c) if c.isalpha() else c for c in s)\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            ch = chr(ord(ch) + 2) if ord(ch) < 90 else chr(ord(ch) + 2 - 26)\n        return ch\n\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2).lower()\n        return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch in \"aeiouAEIOU\":\n            return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2).lower()\n        return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            if ch.islower():\n                return chr(ord(ch) + 2)\n            else:\n                return chr(ord(ch) + 2).lower()\n        return ch\n\n    has_letter = False\n    ans = \"\"\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            if ch.islower():\n                return chr(ord(ch)+2)\n            else:\n                return chr(ord(ch)+2).lower()\n        else:\n            return ch\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr(ord(ch) + 2)\n        return ch\n\n    ans = ''\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            ch = chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n        return ch\n\n    ans = ''\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            ch = chr(ord(ch) + 2) if ord(ch) + 2 <= 122 else chr(ord(ch) + 2 - 26)\n        return ch\n\n    has_letter = False\n    ans = \"\"\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ch = ch.swapcase()\n            ch = vowel_change(ch)\n        ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            if ch.islower():\n                return chr(ord(ch)+2)\n            else:\n                return chr(ord(ch)-2)\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        return c\n    for c in s:\n        if not c.isalpha():\n            ans += c\n        else:\n            has_letter = True\n            ans += vowel_change(c)\n    if has_letter:\n        return ans[::-1] if not has_letter else ans\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    ans = \"\"\n    has_letter = False\n    vowel_change = lambda c: chr(ord(c) + 2) if c in 'aeiouAEIOU' else c\n\n    for letter in s:\n        if letter.isalpha():\n            has_letter = True\n            ans += vowel_change(letter.swapcase())\n        else:\n            ans += letter\n\n    return ans if has_letter else s[::-1]\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    ans = \"\"\n    has_letter = False\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        return c\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            has_letter = True\n            ans += vowel_change(s[i])\n        else:\n            ans += s[i]\n\n    if has_letter:\n        return ans\n    return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = ''\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr(ord(c) + 2)\n        else:\n            return c\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                ans += vowel_change(c).upper()\n            else:\n                ans += vowel_ellipis()(c).lower()\n        else:\n            ans += c\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        return c\n\n    ans = ''\n    has_letter = False\n    for char in s:\n        if not char.isalpha():\n            ans += char\n        else:\n            has_letter = True\n            ans += vowel_change(char)\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).lower()\n        return c\n\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            if c.islower():\n                return chr((ord(c) - 97 + 2) % 26 + 97)\n            else:\n                return chr((ord(c) - 65 + 2) % 26 + 65)\n        else:\n            return c\n\n    ans = ''\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.isalpha():\n            if c in 'aeiouAEIOU':\n                # Vowels are shifted two positions ahead in the alphabet\n                return chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).lower()\n            else:\n                return c\n        else:\n            return c\n\n    ans = ''\n    has_letter = False\n\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    # If there's no letter in 's', return the reverse of 's'\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            return c.upper() if c.islower() else c.lower()\n        return c\n\n    ans = ''\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    return ans[::-1] if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    ans = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr(ord(ch) + 2) if ord(ch) < 80 else chr(ord(ch) - 20)\n        return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            return chr(ord(ch)+2) if ord(ch) < 90 else chr(ord(ch)-24)\n        return ch\n\n    ans = \"\"\n    for ch in s:\n        if ch.isalpha():\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    has_letter = any(c.isalpha() for c in ans)\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2).lower()\n        return ch\n\n    ans = ''.join(vowel_change(ch) if ch.isalpha() else ch for ch in s)\n    has_letter = any(ch.isalpha() for ch in ans)\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowel_lower = 'aeiou'\n    vowel_upper = 'AEIOU'\n    if ch in vowel_lower:\n        return vowel_lower[(vowel_lower.index(ch) + 2) % 5]\n    elif ch in vowel_upper:\n        return vowel_upper[(vowel_upper.index(ch) + 2) % 5]\n    else:\n        return ch\n\ndef solve_with_vowel(s):\n    ans = ''\n    for ch in s:\n        has_letter = ch.isalpha()\n        if has_letter:\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def has_letter(s):\n        return any(char.isalpha() for char in s)\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2)\n        return ch\n\n    ans = []\n    for ch in s:\n        if ch.isalpha():\n            ans.append(vowel_change(ch.swapcase()))\n        else:\n            ans.append(ch)\n    ans = \"\".join(ans)\n\n    return ans[::-1] if not has_letter(s) else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = []\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).lower()\n        return c\n\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            c = vowel_change(c)\n        ans.append(c)\n\n    return ''.join(ans[::-1]) if not has_letter else ''.join(ans)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            return chr((ord(c) + 2 - ord('a')) % 26 + ord('a'))\n        else:\n            return c\n\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            return c.upper() if c.islower() else c.lower()\n        return c\n\n    ans, has_letter = '', False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) + 2).lower()\n        return c\n\n    ans = ''\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        c_lower = c.lower()\n        if c_lower in 'aeiou':\n            return chr((ord(c) - 97 + 1) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 1) % 26 + 65)\n        else:\n            return c\n\n    ans = ''\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    return ans[::-1] if not has_letter else ans\n",
                false
            ]
        ]
    }
}