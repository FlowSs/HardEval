{
    "0": {
        "level 1": [
            [
                "\ndef encrypt_two_times(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            encrypted_text += chr(((ord(char.lower()) - 97 + 5) % 26) + 97)\n            encrypted_text = chr(((ord(encrypted_text[-1]) - 97 + 4) % 26) + 97)\n        else:\n            encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef shift_lower_alpha(txt, shift):\n    return ''.join(chr((ord(c) - 97 + shift) % 26 + 97) if 'a' <= c <= 'z' else c for c in txt)\n\ndef encrypt_two_times(s):\n    return shift_lower_alpha(shift_lower_alpha(s, 4), 5)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 19) % 26) + ord('a')) for ch in s)\n\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    def shift_alphabet(letter, shift):\n        return chr(((ord(letter) - ord('a') + shift) % 26) + ord('a'))\n\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            shifted_char = shift_alphabet(char, 4)\n            shifted_char = shift_alphabet(shifted_char, 5)\n            result += shifted_char\n        else:\n            result += char\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower(): \n                letter = chr(((ord(letter) - 97 + 4) % 26) + 97) \n                letter = chr(((ord(letter) - 97 + 5) % 26) + 97)\n            result += letter\n        else:\n            result += letter\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            shift = 4 if char.islower() else 5\n            encrypted_char = chr((ord(char) - 97 + shift) % 26 + 97) if char.islower() else chr((ord(char) - 65 + shift) % 26 + 65)\n            encrypted_text += encrypted_char\n        else:\n            encrypted_text += char\n    return encrypted_text\n\n",
                false
            ],
            [
                "\ndef shift_lower_alphabet(s, shift):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift_amount = shift\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset - shift_amount) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\ndef encrypt_two_times(s):\n    return shift_lower_alphabet(shift_lower_alphabet(s, 4), 5)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 21) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times2(s):\n    return ''.join(chr((ord(c) - ord('a') + 26 - 5) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times3(s):\n    return ''.join(chr((ord(c) - ord('a') + 26 - 5) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times4(s):\n    return ''.join(chr((ord(c) - ord('a') + 26 - 21) % 26 + ord('a')) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 4 if char.islower() else 4 + 26 # If char is lowercase, we offset by 4, otherwise we add 4 to ASCII value for uppercase letters\n            result += chr((ord(char) - 97 + ascii_offset) % 26 + 97)\n        else:\n            result += char\n    return encrypt_two_times_reverse(result)\n\ndef encrypt_two_times_reverse(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 5 if char.islower() else 5 + 26  # If char is lowercase, we offset by 5, otherwise we add 5 to ASCII value for uppercase letters\n            result += chr((ord(char) - 97 + ascii_offset) % 26 + 97)\n        else:\n            result += char\n    return result\n\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower(): \n                letter = chr(((ord(letter) - 97 - 4) % 26) + 97)\n            else:\n                letter = chr(((ord(letter) - 65 - 4) % 26) + 65)\n\n            letter = chr(((ord(letter) - 97 - 5) % 26) + 97)\n        result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(s):\n    def shift_letter(letter, n):\n        base = ord('a') if letter.islower() else ord('A')\n        return chr((ord(letter) - base + n) % 26 + base)\n\n    first_shift = ''.join(shift_letter(c, -4) if c.isalpha() else c for c in s)\n    second_shift = ''.join(shift_letter(c, -5) if c.isalpha() else c for c in first_shift)\n    return second_shift\n",
                false
            ],
            [
                "\ndef shift_letter(letter, shift):\n    if letter.isalpha():\n        ascii_offset = 65 if letter.isupper() else 97\n        return chr((ord(letter) - ascii_offset + shift) % 26 + ascii_offset)\n    else:\n        return letter\n\ndef encrypt_twoPokemon_cardimes(s):\n    shift_one = s.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", \n                                          \"\".join(map(lambda x: shift_letter(x, 4), \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))\n\n    shift_two = shift_one.translate(str.maketrans(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                                                  \"\".join(map(lambda x: shift_letter(x, 5), \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))\n    \n    return shift_two\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(string):\n    encrypted_string = ''\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                shifted_char = chr((ord(char) - 97 - 4) % 26 + 97)\n                shifted_char = chr((ord(shifted_char) - 97 - 5) % 26 + 97)\n            else:\n                shifted_char = chr((ord(char) - 65 - 4) % 26 + 65)\n                shifted_char = chr((ord(shifted_char) - 65 - 5) % 26 + 65)\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha(): # checks if character is a letter\n            shift = char.lower() == 'p' and 4 or 5 # checks if character is 'p' and shifts by 4 else shifts by 5\n            if char.isupper(): # checks if character is uppercase\n                result += chr((ord(char) - ord('A') - shift + 26) % 26 + ord('A'))\n            else:\n                result += chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))\n        else:\n            result += char\n    return result\n\n",
                false
            ],
            [
                "\ndef encrypt_twoPokemon_cardimes(s):\n    # Define the shift values\n    shift1 = 4\n    shift2 = 5\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # If the character is a letter, shift it by the first shift value\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.isupper():\n                result += chr((ascii_val - ord('A') - shift1 + 26) % 26 + ord('A'))\n            else:\n                result += chr((ascii_val - ord('a') - shift1 + 26) % 26 + ord('a'))\n        # If the character is not a letter, add it as is\n        else:\n            result += char\n    \n    # Now iterate over the result string again, but this time shift letters by the second shift value\n    final_result = \"\"\n    for char in result:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.isupper():\n                final_result += chr((ascii_val - ord('A') - shift2 + 26) % 26 + ord('A'))\n            else:\n                final_result += chr((ascii_val - ord('a') - shift2 + 26) % 26 + ord('a'))\n        else:\n            final_result += char\n    \n    # Return the final result string\n    return final_result\n\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                encrypted_text += chr(((ord(char) - ord('a') - 4) % 26) + ord('a'))\n                encrypted_text = chr(((ord(char) - ord('a') - 5) % 26) + ord('a'))\n            else:\n                encrypted_text += chr(((ord(char) - ord('A') - 4) % 26) + ord('A'))\n                encrypted_text = chr(((ord(char) - ord('A') - 5) % 26) + ord('A'))\n        else:\n            encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef shift_alpha(alpha, shift):\n    return ''.join(chr((ord(c) - ord('a') + shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in alpha)\n\ndef encrypt_two_times(s):\n    return shift_alpha(shift_alpha(s, -4), -5)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    shift = 'abcdefghijklmnopqrstuvwxyz'\n    shift_four = shift[4:] + shift[:4]\n    shift_five = shift_four[5:] + shift_four[:5]\n    table = str.maketrans(shift, shift_four)\n    table_two = str.maketrans(shift, shift_five)\n    s_four = s.translate(table)\n    s_five = s_four.translate(table_two)\n    return s_five\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    shift_four = \"\".join(chr(ord('a')+(ord(c)-ord('a')+4)%26) if c.isalpha() else c for c in text)\n    shift_five = \"\".join(chr(ord('a')+(ord(c)-ord('a')+5)%26) if c.isalpha() else c for c in shift_four)\n    return shift_five\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper(): \n                letter = chr(((ord(letter) - 65 - 4) % 26) + 65)\n                letter = chr(((ord(letter) - 65 - 5) % 26) + 65)\n            else:\n                letter = chr(((ord(letter) - 97 - 4) % 26) + 97)\n                letter = chr(((ord(letter) - 97 - 5) % 26) + 97)\n        result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    shift_down_4 = [chr((ord(c) - 97 - 4) % 26 + 97) if c.isalpha() and c.islower() else c for c in s] # Shift down 4\n    shift_down_5 = [chr((ord(c) - 97 - 5) % 26 + 97) if c.isalpha() and c.islower() else c for c in ''.join(shift_down_4)] # Shift down 5\n    return ''.join(shift_down_5)\n",
                false
            ],
            [
                "\ndef shift_lower_alpha(txt, shift):\n    # Function to shift lowercase alphabets\n    return ''.join(\n        chr((ord(c) - ord('a') + shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c \n        for c in txt\n    )\n\ndef encrypt_two_times(txt):\n    # Function to encrypt string twice\n    return shift_lower_alpha(shift_lower_alpha(txt, 4), 5)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 21) % 26) + ord('a')) for ch in s)\n\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    # creating an empty string to store the encrypted text\n    encrypted_text = \"\"\n    # iterating over each character in the input text\n    for char in text:\n        # checking if the character is an uppercase letter\n        if char.isupper():\n            # if it is, we calculate the new position of the character and add it to our encrypted text\n            encrypted_text += chr((ord(char) - 65 - 4 + 26) % 26 + 65)\n            encrypted_text += chr((ord(char) - 65 - 5 + 26) % 26 + 65)\n        # same process for lowercase letters\n        elif char.islower():\n            encrypted_text += chr((ord(char) - 97 - 4 + 26) % 26 + 97)\n            encrypted_text += chr((ord(char) - 97 - 5 + 26) % 26 + 97)\n        # if the character is not an alphabet, we just add it to our encrypted text without shifting\n        else:\n            encrypted_text += char\n    # return the encrypted text\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for letter in text:\n        if letter.isalpha():\n            if letter.islower(): \n                letter = chr(((ord(letter) - 97 - 4) % 26) + 97)\n                letter = chr(((ord(letter) - 97 - 5) % 26) + 97)\n            else:\n                letter = chr(((ord(letter) - 65 - 4) % 26) + 65)\n                letter = chr(((ord(letter) - 65 - 5) % 26) + 65)\n        result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                encrypted_char = chr(((ord(char) - ord('a') - 4 + 26) % 26) + ord('a') + 5)\n            else:\n                encrypted_char = chr(((ord(char) - ord('A') - 4 + 26) % 26) + ord('A') + 5)\n        else:\n            encrypted_char = char\n        encrypted_text += encrypted_char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def encrypt(c):\n        if c.isalpha():\n            ascii_offset = 65 if c.isupper() else 97\n            return chr((ord(c) - ascii_offset + 4) % 26 + 4 + ascii_offset)\n        return c\n\n    return ''.join(encrypt(c) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 21) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                rotation = ord(char) - ord('a')\n                rotation = (rotation - 4 + 26) % 26\n                rotation = (rotation - 5 + 26) % 26 + ord('a')\n                result += chr(rotation)\n            else:\n                rotation = ord(char) - ord('A')\n                rotation = (rotation - 4 + 26) % 26\n                rotation = (rotation - 5 + 26) % 26 + ord('A')\n                result += chr(rotation)\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            # Shift down by 4 positions\n            new_position = (ord(letter) - 97 + 4) % 26\n            # Then shift further down by 5 positions\n            new_position = (new_position + 5) % 26\n            result += chr(new_position + 97)\n        else:\n            result += letter\n    return result\n",
                true
            ]
        ],
        "level 2": [
            [
                "\ndef encrypt_two_times(s):\n    result = ''\n    for character in s:\n        if character.isalpha() and character.islower():\n            result += chr(((ord(character) - ord('a') + 4) % 26 + 5) % 26 + ord('a'))\n        else:\n            result += character\n    return result\n",
                true
            ],
            [
                "\ndef shift_lower_case(txt, shift):\n    return ''.join(chr((ord(c) - ord('a') + shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in txt)\n\ndef encrypt_two_times(s):\n    return shift_lower_case(shift_lower_case(s, 4), 5)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times_2(s):\n    return ''.join(chr((ord(c) - ord('a') + 9) % 26 + ord('a')) for c in s if c.isalpha())\n\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times_2(s):\n    return ''.join(chr((ord(c) - ord('a') + 9) % 26 + ord('a')) for c in s if c.isalpha())\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_chars(s, shift):\n        return ''.join(chr((ord(c) - ord('a') + shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n\n    return shift_chars(shift_chars(s, 4), 5)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower():  # checks if the character is a lowercase letter\n                shifted_four = chr((ord(letter)-ord('a')+4)%26+ord('a'))  # shifts it down by 4\n                shifted_nine = chr((ord(shifted_four)-ord('a')+5)%26+ord('a'))  # shifts the result by 5\n                result += shifted_nine\n            else:\n                result += letter\n        else:\n            result += letter\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = ''\n    for character in s:\n        if character.islower():\n            character = chr((ord(character) - ord('a') + 4) % 26 + ord('a'))\n            character = chr((ord(character) - ord('a') + 5) % 26 + ord('a'))\n        result += character\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4 + 5) % 26 + ord('a'))\n        return c\n\n    return ''.join(shift(c) for c in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times_2(s):\n    return ''.join(chr((ord(c) - ord('a') + 9) % 26 + ord('a')) for c in s)\n\ndef encrypt_two_times_2_2(s):\n    return ''.join(chr((ord(c) - ord('a') + 14) % 26 + ord('a')) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_alphabet(c, shift):\n        return chr(((ord(c) - ord('a') + shift) % 26) + ord('a')) if c.islower() else c\n    \n    return ''.join(shift_alphabet(shift_alphabet(c, 5), 4) if c.islower() else c for c in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            # first shift\n            shifted = chr(((ord(letter) - ord('a') + 4) % 26) + ord('a'))\n            # second shift\n            result += chr(((ord(shifted) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            result += letter\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_images(input_string):\n    output_string = \"\"\n    for char in input_string:\n        if char.isalpha() and char.islower():\n            char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            char = chr(((ord(char) - ord('a') + 5) % 26) + ord('a'))\n        output_string += char\n    return output_string\n",
                false
            ],
            [
                "\ndef encrypt_two_images(s):\n    def shift_four(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        return c\n\n    def shift_nine(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 9) % 26 + ord('a'))\n        return c\n\n    return ''.join(shift_nine(shift_four(c)) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_images(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 4) % 26 + 5) % 26 + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_images(input_string):\n    output_string = \"\"\n    for character in input_string:\n        if character.islower():\n            # perform the shift operations\n            character = chr(((ord(character) - 97 + 4) % 26) + 97)\n            character = chr(((ord(character) - 97 + 5) % 26) + 97)\n        output_string += character\n    return output_string\n",
                false
            ],
            [
                "\ndef encrypt_two_images(text):\n    result = \"\"\n    for letter in text:\n        if letter.isalpha():\n            if letter.islower():  # checks if the character is a lowercase letter\n                shifted_four_steps = chr(((ord(letter) - 97 + 4) % 26) + 97)  # shifting four steps forward\n                encrypted_letter = chr(((ord(shifted_four_steps) - 97 + 5) % 26) + 97)  # shifting five more steps forward\n                result += encrypted_letter\n            else:\n                result += letter\n        else:\n            result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(text):\n    encrypted_text = \"\"\n    for char in text:\n        if char.isalpha() and char.islower():\n            char_code = ord(char) - 4\n            char_code = (char_code - 5 + 26) % 26 + 97\n            encrypted_text += chr(char_code)\n        else:\n            encrypted_text += char\n    return encrypted_text\n",
                false
            ],
            [
                "\ndef shift_lower_alpha(txt, positions):\n    # Define the lowercase alphabetic characters\n    lowercase_alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    result = ''\n\n    for ch in txt:\n        if ch.isalpha() and ch.islower():\n            # Find the index of the character in the lowercase alphabet\n            ch_index = lowercase_alpha.find(ch)\n\n            # Apply the shift\n            new_ch_index = (ch_index + positions) % 26\n\n            # Get the new character\n            new_ch = lowercase_alpha[new_ch_index]\n            result += new_ch\n        else:\n            result += ch\n    return result\n\ndef encrypt_two_times(txt):\n    return shift_lower_alpha(shift_lower_alpha(txt, 4), 5)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') - 4 + 26) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_alphabet(c, shift):\n        return chr(((ord(c) - ord('a') + shift) % 26) + ord('a')) if 'a' <= c <= 'z' else c\n\n    shifted_once = [shift_alphabet(c, 4) for c in s]\n    return ''.join(shift_alphabet(c, 5) for c in shifted_once)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.islower(): \n                letter = chr(((ord(letter) - 97 - 4 + 26) % 26) + 97)\n                letter = chr(((ord(letter) - 97 - 5 + 26) % 26) + 97)\n            else:\n                letter = chr(((ord(letter) - 65 - 4 + 26) % 26) + 65)\n                letter = chr(((ord(letter) - 65 - 5 + 26) % 26) + 65)\n        result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(input_string):\n    output_string = \"\"\n    for char in input_string:\n        if char.islower():\n            output_string += chr(((ord(char)-97+4)%26+5)%26+97)\n        else:\n            output_string += char\n    return output_string\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_four(c):\n        if c.islower():\n            c = chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        return c\n\n    def shift_five(c):\n        if c.islower():\n            c = chr((ord(c) - ord('a') + 5) % 26 + ord('a'))\n        return c\n\n    return \"\".join(shift_five(shift_four(c)) if c.islower() else c for c in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_alphabet(letter, step):\n        return chr(((ord(letter) - ord('a') + step) % 26) + ord('a'))\n\n    res = \"\"\n    for c in s:\n        if 'a' <= c <= 'z':\n            c = shift_alphabet(c, 4)\n            c = shift_alphabet(c, 5)\n        res += c\n    return res\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            result += chr((ord(letter) - 97 + 4) % 26 + 97)\n            result += chr((ord(letter) - 97 + 9) % 26 + 97)\n        else:\n            result += letter\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            # Shift every lowercase letter in the string down by four letters\n            first_shift = chr(((ord(char) - ord('a') + 26 - 4) % 26) + ord('a'))\n            # Progress each resulting letter from this shift down the alphabet by an additional five letters\n            second_shift = chr(((ord(first_shift) - ord('a') + 26 - 5) % 26) + ord('a'))\n            result += second_shift\n        else:\n            result += char\n    return result\n",
                false
            ],
            [
                "\ndef shift_lower_case(txt):\n    return ''.join(chr((ord(c) - ord('a') - 4) % 26 + ord('a')) for c in txt if c.islower())\n\ndef encrypt_two_times(txt):\n    first_shift = shift_lower_case(txt)\n    return shift_lower_case(first_shift)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') - 4 + 26) % 26) + ord('a') + 5) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_alphabet(letter, shift):\n        return chr(((ord(letter) - ord('a') + shift) % 26) + ord('a'))\n\n    res = \"\"\n    for c in s:\n        if 'a' <= c <= 'z':\n            c = shift_alphabet(c, 4)\n            c = shift_alphabet(c, 5)\n        res += c\n    return res\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            # Shift down by 4 letters\n            shifted_1 = chr((ord(letter) - ord('a') - 4) % 26 + ord('a'))\n            # Shift down by an additional 5 letters\n            shifted_2 = chr((ord(shifted_1) - ord('a') - 5) % 26 + ord('a'))\n            result += shifted_2\n        else:\n            result += letter\n    return result\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            # Shift a lowercase letter four positions down the alphabet\n            ch = chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n            # Further shift the result down the alphabet by five positions\n            ch = chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\"))\n        tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    \n    # Step 1\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n            \n    # Step 2\n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr((ord(ch) - ord(\"a\") + 5) % 26 + ord(\"a\"))\n        else:\n            result += ch\n            \n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    result = \"\"\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    encrypt = ''\n    for ch in tmp:\n        if ch.islower():\n            encrypt += chr((ord(ch) + 5 - ord(\"a\")) % 26 + ord(\"a\"))\n        else:\n            encrypt += ch\n    return encrypt\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    return result\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n\n    result = ''\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr(((ord(ch) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    \n    # Perform first shift on each letter\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n            \n    # Perform second shift on each letter in 'tmp'\n    encrypted = \"\"\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            encrypted += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        else:\n            encrypted += ch\n            \n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    result = \"\"\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            result += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            ch = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            ch = chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp += chr((ord(ch.lower()) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n            \n    encrypted = \"\"\n    for ch in tmp:\n        if ch.isalpha():\n            encrypted += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            encrypted += ch\n            \n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n    \n    result = ''\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            result += chr((ord(ch) + 5 - ord('A')) % 26 + ord('A'))\n        else:\n            result += ch\n    \n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_four(c):\n        return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n\n    def shift_five(c):\n        return chr((ord(c) + 5 - ord('a')) % 26 + ord('a'))\n\n    return ''.join(shift_five(shift_four(c)) if 'a' <= c <= 'z' else c for c in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 4 + 5 - ord('a')) % 26) + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():  # checks if character is lowercase alphabet\n                tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) # shift by 4\n                result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a')) #shift by 5\n            else: # if character is not lower case, keep it unchanged\n                result += ch\n        else: # if character is not alpha, keep it unchanged\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            # First shift: Move each lowercase character in 's' four places\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n            \n    encrypted = ''\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            # Second shift: Advance each character in 'tmp' five positions\n            encrypted += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        else:\n            encrypted += ch\n            \n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_four(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        return c\n\n    def shift_five(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 5) % 26 + ord('a'))\n        return c\n\n    return ''.join(shift_five(shift_four(ch)) for ch in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n\n    result = \"\"\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            result += chr((ord(ch) + 5 - ord('A')) % 26 + ord('A'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            ch = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            ch = chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        if 'a' <= ch <= 'z':\n            ch = chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            ch = chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():  # For lowercase letters\n                ch = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            tmp += chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a'))\n        else:\n            tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n\n    result = ''\n    for ch in tmp:\n        if 'a' <= ch <= 'z':\n            result += chr(((ord(ch) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift(c, amount):\n        if c.islower():\n            return chr(((ord(c) - ord('a') + amount) % 26) + ord('a'))\n        else:\n            return c\n\n    tmp = ''.join(shift(ch, 4) for ch in s)\n    return ''.join(shift(ch, 5) for ch in tmp)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 4 + 5) % 26) + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = ''\n    for ch in s:\n        if ch.isalpha():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            tmp += ch\n\n    encrypted = \"\"\n    for ch in tmp:\n        if ch.isalpha():\n            encrypted += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        else:\n            encrypted += ch\n\n    return encrypted\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            # Compute the first shift\n            shifted_char = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            # Compute the second shift\n            final_char = chr(((ord(shifted_char) - ord('a') + 5) % 26) + ord('a'))\n            tmp += final_char\n        else:\n            # If the character is not an alphabet, append it to the result without any changes\n            tmp += ch\n    return tmp\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    def shift_four(c):\n        return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n\n    def shift_five(c):\n        return chr((ord(c) + 5 - ord('a')) % 26 + ord('a'))\n\n    return ''.join(shift_five(shift_four(c)) if 'a' <= c <= 'z' else c for c in s)\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    return ''.join(chr(((ord(ch) - ord('a') + 4 + 5 - ord('a')) % 26) + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s)\n",
                false
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.islower():\n            # Shift letters 4 spots ahead\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n\n            # Shift letters in `tmp` 5 spots ahead\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            # Non-alphabetic characters are left unchanged\n            result += ch\n\n    return result\n",
                true
            ],
            [
                "\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n",
                true
            ]
        ]
    },
    "1": {
        "level 1": [
            [
                "\ndef encode_reversed(message):\n    encoded = \"\"\n\n    for character in message:\n        \n        if character.lower() == 'a':\n            encoded += 'c'\n        elif character.lower() == 'e':\n            encoded += 'g'\n        elif character.lower() == 'i':\n            encoded += 'k'\n        elif character.lower() == 'o':\n            encoded += 'q'\n        elif character.lower() == 'u':\n            encoded += 'w'\n        \n        else:\n            encoded += character.swapcase()\n\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char in 'aeiouAEIOU':\n                encoded += 'b' if char.islower() else 'B'\n            else:\n                if char.islower():\n                    encoded += chr(ord(char)+2)\n                else:\n                    encoded += chr(ord(char.lower())+2).upper()\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Define the mapping for vowels\n    vowel_mapping = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n                     'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n\n    # Iterate over the string\n    encoded_message = \"\"\n    for char in message:\n        # Replace vowels and swap case\n        if char in vowel_mapping:\n            encoded_message += vowel_mapping[char]\n        else:\n            encoded_message += char.swapcase()\n\n    # Reverse the result\n    encoded_message = encoded_message[::-1]\n\n    return encoded_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            encoded += alphabet[alphabet.index(char)+2]\n        else:\n            encoded += char.swapcase()\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    vowels = 'aeiou'\n    trans = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    encoded = msg.translate(trans).swapcase()\n    reversed_encoded = encoded[::-1]\n    return reversed_encoded\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = \"\"\n\n    for character in message:\n        \n        if character.lower() == 'a':\n            encoded += 'b' if character.islower() else 'B'\n            \n        elif character.lower() == 'e':\n            encoded += 'f' if character.islower() else 'F'\n            \n        elif character.lower() == 'i':\n            encoded += 'j' if character.islower() else 'J'\n            \n        elif character.lower() == 'o':\n            encoded += 'p' if character.islower() else 'P'\n            \n        elif character.lower() == 'u':\n            encoded += 'v' if character.islower() else 'V'\n        \n        else:\n            encoded += character.swapcase()\n\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char in 'aeiouAEIOU':\n                if char.isupper():\n                    encoded += chr(ord(char) - 1) if char != 'A' else 'Z'\n                else:\n                    encoded += chr(ord(char) - 32 - 1) if char != 'a' else 'z'\n            else:\n                if char.isupper():\n                    encoded += char.lower()\n                else:\n                    encoded += char.upper()\n        else:\n            encoded += char\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    encoded = [c.lower() if c.lower() in 'aeiou' else c.upper() if c.upper() in 'AEIOU' else 'b' if c == 'a' else 'y' if c == 'e' else 'd' if c == 'i' else 'f' if c == 'o' else 'g' if c == 'u' else c for c in message]\n    return ''.join(reversed(encoded)).swapcase()\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    new_message = \"\"\n    for char in message:\n        # Case Toggle\n        if char.islower():\n            new_message += char.upper()\n        elif char.isupper():\n            new_message += char.lower()\n        # Vowel Next but one letter in the alphabet\n        elif char in vowels:\n            new_message += chr(ord(char) - 1)\n        else:\n            new_message += char\n    # Invert the string\n    return new_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Define the mapping for vowels and their next but one letter in the alphabet\n    vowel_map = {'a': 'z', 'e': 'y', 'i': 'x', 'o': 'w', 'u': 'v'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_msg = \"\"\n    \n    # Loop over the characters in the message\n    for char in msg:\n        # Check if the character is in lower case\n        if char.islower():\n            # If the character is a vowel, encode it and add it to the encoded message\n            if char in vowel_map:\n                encoded_msg += vowel_map[char]\n            # Otherwise, just toggle the case and add it to the encoded message\n            else:\n                encoded_msg += char.upper()\n        # Check if the character is in upper case\n        elif char.isupper():\n            # If the character is a vowel, encode it and add it to the encoded message\n            if char in vowel_map.keys():\n                encoded_msg += vowel_map[char.lower()]\n            # Otherwise, just toggle the case and add it to the encoded message\n            else:\n                encoded_msg += char.lower()\n        # If the character is not a letter, just add it to the encoded message\n        else:\n            encoded_msg += char\n    \n    # Return the reversed encoded message\n    return encoded_msg[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Define a dictionary with vowels as keys and their encoded counterparts as values\n    vowels_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'q'}\n    \n    # Define a list of all vowels\n    vowels = \"aeiou\"\n    \n    # Define an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the message\n    for char in message:\n        # If the character is a vowel, replace it with its encoded counterpart from the dictionary\n        if char.lower() in vowels:\n            if char.islower():\n                result += vowels_dict[char]\n            else:\n                result += vowels_dict[char.lower()].upper()\n        # Else, if the character is a consonant, shift it to the right two positions in the alphabet\n        elif char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n        # Else, if the character is not a letter, append it to the result string\n        else:\n            result += char\n    \n    # Reverse the result string\n    result = result[::-1]\n    \n    return result\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr(ord(c) + 2)\n    return c\n\ndef reverse_and_encode(s):\n    result = ''.join(shift_vowel(c.swapcase()) for c in s)\n    return result[::-1]\n\nencode_reversed = reverse_and_encode\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    # Define lower and uppercase vowels\n    low_vowels = 'aeiou'\n    up_vowels = 'AEIOU'\n\n    # Define blank string to hold processed message\n    processed = ''\n\n    # Loop over message, processing each character\n    for char in message:\n        if char in low_vowels:\n            processed += low_vowels[(low_vowels.index(char) + 2) % 5]\n        elif char in up_vowels:\n            processed += up_vowels[(up_vowels.index(char) + 2) % 5]\n        elif char.isupper():\n            processed += char.lower()\n        else:\n            processed += char.upper()\n\n    # Return reversed string\n    return processed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr(ord(char) + 2)\n            else:\n                result += char\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Define the mapping for vowels and their shifted positions\n    vowels_map = {'a': 'c', 'e': 'g', 'i': 'm', 'o': 'q', 'u': 't'}\n    \n    # Initialize an empty string to store the processed message\n    processed_msg = \"\"\n    \n    # Iterate over each character in the message\n    for char in msg:\n        # Check if the character is a vowel\n        if char.lower() in vowels_map:\n            # If the character is uppercase, append the shifted vowel to the processed message\n            if char.isupper():\n                processed_msg += vowels_map[char.lower()].upper()\n            # If the character is lowercase, append the shifted vowel to the processed message\n            else:\n                processed_msg += vowels_map[char.lower()]\n        # If the character is not a vowel, append it to the processed message as is\n        else:\n            processed_msg += char\n    \n    # Reverse the processed message\n    processed_msg = processed_msg[::-1]\n    \n    # Return the processed message\n    return processed_msg\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    # Swap case\n    message = message.swapcase()\n\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v'}\n\n    # Transform every vowel to its succeeding second alphabet\n    for vowel in \"aeiou\":\n        message = message.replace(vowel, vowels[vowel])\n\n    # Reverse the string\n    message = message[::-1]\n\n    return message\n\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    vowels = 'aeiou'\n    switched_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.lower() == 'u':\n                    switched_message += 'a'\n                else:\n                    switched_message += vowels[vowels.index(char.lower()) + 1]\n            else:\n                switched_message += char.swapcase()\n        else:\n            switched_message += char\n    return switched_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message: str) -> str:\n    # Define the vowels and their succeeding letters\n    vowels = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    # Transform the message\n    encoded_message = \"\"\n    for char in message:\n        lower_char = char.lower()\n        if lower_char in vowels:\n            encoded_message += vowels[lower_char] if char.isupper() else vowels[lower_char].upper()\n        else:\n            encoded_message += char\n    \n    # Reverse the message\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    vowel_dict = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v'}\n    reversed_str = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowel_dict:\n                char = vowel_dict[char.lower()]\n                reversed_str = char.upper() + reversed_str if char.islower() else char.lower() + reversed_str\n            else:\n                reversed_str = char.lower() + reversed_str if char.isupper() else char.upper() + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str\n",
                false
            ],
            [
                "\ndef encode_repaired(message):\n    vowels = 'aeiou'\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += alphabets[(alphabets.index(char) + 1) % len(alphabets)]\n        elif char in alphabets:\n            result += alphabets[alphabets.index(char) % len(alphabets)].upper() if char.islower() else alphabets[alphabets.index(char) % len(alphabets)].lower() \n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Convert uppercase to lowercase and vice versa.\n    transformed_message = ''.join(\n        [c.lower() if c.isupper() else c.upper() for c in message])\n\n    # Advance each vowel by two alphabets.\n    vowels = 'aeiou'\n    transformed_message = ''.join(\n        [chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.lower() in vowels\n         else c\n         for c in transformed_message])\n\n    # Reverse the string.\n    encoded_message = transformed_message[::-1]\n\n    return encoded_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Converting uppercase letters to lowercase and vice versa\n    encoded_message = \"\".join([\" \" if char == \" \" else chr(ord(char) + (1 if \"a\" <= char.lower() <= \"z\" and char.isupper() else -1)) for char in message])\n    \n    # Advancing each vowel by two alphabets\n    encoded_message = \"\".join([\"o\" if char == \"a\" else \"u\" if char == \"e\" else \" \" if char == \" \" else chr(ord(char) + (2 if \"a\" <= char.lower() <= \"z\" and char.lower() not in [\"a\", \"e\"] else 0)) for char in encoded_message])\n    \n    # Reversing the string\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # convert lowercase to uppercase, and vice versa\n    message = message.swapcase()\n\n    # create a dictionary to map vowels to their shifted values\n    vowel_map = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'j',\n        'o': 'p',\n        'u': 'v'\n    }\n\n    # replace vowels in the message with their shifted values\n    message = ''.join(vowel_map[ch] if ch in vowel_map else ch for ch in message)\n\n    # reverse the string\n    message = message[::-1]\n\n    return message\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    s = s[::-1]\n    vowels = \"aeiou\"\n    encoded = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded += char.lower() if char.isupper() else char.upper()\n        else:\n            encoded += char\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap case and advance each vowel by two\n    encoded_msg = \"\".join(\n        chr(ord(ch) + 2) if ch in 'aeiou' else ch.swapcase() for ch in msg\n    )\n    # reverse the string\n    reversed_msg = encoded_msg[::-1]\n    return reversed_msg\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Mapping between vowels and their encoded/shifted version\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    # Initializing an empty list to hold the encoded message\n    encoded_message = []\n    \n    for char in message[::-1]:  # Iterating over the reversed string\n        # Swapping the case of the character\n        swapped_case = char.lower() if char.isupper() else char.upper()\n        \n        # Checking if the character is a vowel\n        if char.lower() in vowel_mapping:\n            encoded_char = vowel_mapping[char.lower()]\n            \n            # If the original character was uppercase, make the encoded character also uppercase\n            if char.isupper():\n                encoded_char = encoded_char.upper()\n            \n            # Appending the encoded character to the list\n            encoded_message.append(encoded_char)\n        else:\n            # If the character is not a vowel, simply append the swapped case character\n            encoded_message.append(swapped_case)\n    \n    # Joining the encoded message into a string and returning\n    return ''.join(encoded_message)\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in 'aeiouAEIOU':\n                char = chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                char = chr((ord(char) - 97) % 26 + 97) if char.islower() else chr((ord(char) - 65) % 26 + 65)\n        result = char + result\n    return result\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Define lowercase vowels and uppercase vowels\n    vowels_lower = \"aeiou\"\n    vowels_upper = \"AEIOU\"\n\n    # Initialize an empty string for the encoded message\n    encoded_message = \"\"\n\n    # Iterate through each character in the message\n    for char in message:\n        # If the character is a vowel, advance it by two positions in the alphabet sequence\n        if char in vowels_lower:\n            new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        elif char in vowels_upper:\n            new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        # If the character is not a vowel, switch its case\n        else:\n            if char.isalpha():\n                if char.islower():\n                    new_char = char.upper()\n                else:\n                    new_char = char.lower()\n            else:\n                new_char = char\n\n        # Add the encoded character to the encoded message\n        encoded_message = new_char + encoded_message\n\n    # Return the reversed and encoded message\n    return encoded_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Switching their cases\n    encoded_message = message.swapcase()\n\n    # Advance vowels by two letters in the alphabet sequence\n    encoded_message = encoded_message.translate(\n        str.maketrans('aeiouAEIOU', 'eciOpECIOU'))\n\n    # Return the reversed message\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Define the mapping for altering characters\n    altered_chars = {\n        \"a\": \"c\", \"b\": \"d\", \"c\": \"e\", \"d\": \"f\", \"e\": \"g\", \"f\": \"h\", \"g\": \"i\", \"h\": \"j\", \"i\": \"k\", \"j\": \"l\",\n        \"k\": \"m\", \"l\": \"n\", \"m\": \"o\", \"n\": \"p\", \"o\": \"q\", \"p\": \"r\", \"q\": \"s\", \"r\": \"t\", \"s\": \"u\", \"t\": \"v\",\n        \"u\": \"w\", \"v\": \"x\", \"w\": \"y\", \"x\": \"z\", \"y\": \"a\", \"z\": \"b\",\n        \n        \"A\": \"C\", \"B\": \"D\", \"C\": \"E\", \"D\": \"F\", \"E\": \"G\", \"F\": \"H\", \"G\": \"I\", \"H\": \"J\", \"I\": \"K\", \"J\": \"L\",\n        \"K\": \"M\", \"L\": \"N\", \"M\": \"O\", \"N\": \"P\", \"O\": \"Q\", \"P\": \"R\", \"Q\": \"S\", \"R\": \"T\", \"S\": \"U\", \"T\": \"V\",\n        \"U\": \"W\", \"V\": \"X\", \"W\": \"Y\", \"X\": \"Z\", \"Y\": \"A\", \"Z\": \"B\",\n        \n        \"a\": \"C\", \"b\": \"D\", \"c\": \"E\", \"d\": \"F\", \"e\": \"G\", \"f\": \"H\", \"g\": \"I\", \"h\": \"J\", \"i\": \"K\", \"j\": \"L\",\n        \"k\": \"M\", \"l\": \"N\", \"m\": \"O\", \"n\": \"P\", \"o\": \"Q\", \"p\": \"R\", \"q\": \"S\", \"r\": \"T\", \"s\": \"U\", \"t\": \"V\",\n        \"u\": \"W\", \"v\": \"X\", \"w\": \"Y\", \"x\": \"Z\", \"y\": \"A\", \"z\": \"B\",\n        \n        \"A\": \"c\", \"B\": \"d\", \"C\": \"e\", \"D\": \"f\", \"E\": \"g\", \"F\": \"h\", \"G\": \"i\", \"H\": \"j\", \"I\": \"k\", \"J\": \"l\",\n        \"K\": \"m\", \"L\": \"n\", \"M\": \"o\", \"N\": \"p\", \"O\": \"q\", \"P\": \"r\", \"Q\": \"s\", \"R\": \"t\", \"S\": \"u\", \"T\": \"v\",\n        \"U\": \"w\", \"V\": \"x\", \"W\": \"y\", \"X\": \"z\", \"Y\": \"a\", \"Z\": \"b\"\n    }\n    \n    # Define a function to check if a character is a vowel\n    def is_vowel(ch):\n        return ch in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    \n    # Create a list to store the altered characters\n    altered_msg = []\n    \n    # Loop over each character in the message\n    for ch in msg:\n        if ch in altered_chars:\n            # If the character is a vowel, advance it by two letters\n            if is_vowel(ch):\n                altered_msg.append(altered_chars[altered_chars[ch]])\n            else:\n                altered_msg.append(altered_chars[ch])\n        else:\n            # If the character is not in the map, treat it as is\n            altered_msg.append(ch)\n    \n    # Return the reverse of the altered message\n    return ''.join(altered_msg[::-1])\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef encode_reversed(message):\n    def change_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def alter_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr(((ord(c) - ord('a') + 2) % 26) + ord('a'))\n        return c\n\n    transform_message = ''\n    for char in message:\n        if char.isalpha():\n            transform_message += alter_vowel(change_case(char))\n        else:\n            transform_message += char\n\n    return transform_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def next_vowel(c):\n        vowels = \"aeiou\"\n        return chr((ord(c) - 97 + 2) % 5 + 97) if c in vowels else c\n\n    encoded_message = ''.join(swap_case(next_vowel(c)) for c in message)\n    reversed_encoded_message = encoded_message[::-1]\n    return reversed_encoded_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def alter_vowel(c):\n        return chr((ord(c) - 97 + 2) % 26 + 97) if c.lower() in 'aeiou' else c\n\n    transformed = ''.join(map(swap_case, message))\n    transformed = ''.join(map(alter_vowel, transformed))\n    transformed = ''.join(reversed(transformed))\n    \n    return transformed\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def change_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def encode_vowel(ch):\n        if ch in \"aeiouAEIOU\":\n            if ch.isupper():\n                return chr(ord('B') + (ord(ch) - ord('A')))  # ord('B') is the unicode of 'B' in ASCII table\n            else:\n                return chr(ord('b') + (ord(ch) - ord('a')))\n        return ch\n\n    encoded_message = ''.join(encode_vowel(change_case(ch)) for ch in message)\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap the case of each letter in the message\n    def swap_case(m):\n        return m.swapcase() \n\n    transformed_msg = swap_case(msg)\n\n    # replace each vowel with the next letter that is two places ahead in the alphabet\n    def replace_vowels(m):\n        return m.translate(str.maketrans('aeiouAEIOU', 'aeiouAEIOU', 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'))\n\n    transformed_msg = replace_vowels(transformed_msg)\n\n    # reverse the string\n    transformed_msg = transformed_msg[::-1]\n    \n    return transformed_msg\n",
                false
            ],
            [
                "\ndef encode_revised(message):\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n\n    def shift_vowel(char):\n        if char in 'aeiou':\n            return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        return char\n\n    result = ''.join(switch_case(shift_vowel(char)) for char in message)\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in 'aeiou':\n        if c.islower():\n            return chr((ord(c)-97+2)%26+97)\n        else:\n            return chr((ord(c)-65+2)%26+65)\n    else:\n        return c\n\ndef reverse_string(s):\n    return s[::-1]\n\ndef encode_revised(message):\n    revised_message = ''.join(shift_vowel(c) for c in message)\n    reversed_message = reverse_string(revised_message)\n    return reversed_message\n",
                false
            ],
            [
                "\ndef encode_revised(message: str) -> str:\n    def switch_case(input_str: str) -> str:\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in input_str)\n\n    def shift_vowels(input_str: str) -> str:\n        vowels = 'aeiouAEIOU'\n        return ''.join(chr(ord(char) + 2) if char in vowels else char for char in input_str)\n\n    return ''.join(reversed(shift_vowels(switch_case(message))))\n",
                false
            ],
            [
                "\ndef case_switch(message):\n    return message.swapcase()\n\ndef vowel_shift(message):\n    return message.translate(str.maketrans('aeiouAEIOU', 'cdefrCDEF'))\n\ndef encode_revised(message):\n    message = case_switch(message)\n    message = vowel_shift(message)\n    return message[::-1]\n\n",
                false
            ],
            [
                "\ndef case_switch(message):\n    switcher = {\n        'a': 'A',\n        'e': 'E',\n        'i': 'I',\n        'o': 'O',\n        'u': 'U',\n        'A': 'a',\n        'E': 'e',\n        'I': 'i',\n        'O': 'o',\n        'U': 'u',\n    }\n    result = ''.join(switcher.get(c, c) for c in message)\n    return result\n\n\ndef vowel_shift(message):\n    switcher = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'm',\n        'o': 'q',\n        'u': 'w',\n        'A': 'C',\n        'E': 'G',\n        'I': 'M',\n        'O': 'Q',\n        'U': 'W',\n    }\n    result = ''.join(switcher.get(c, c) for c in message)\n    return result\n\n\ndef encode_revised(message):\n    message = case_switch(message)\n    message = vowel_shift(message)\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def case_swapper(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def vowel_shifter(char):\n        if char in 'AEIOUaeiou':\n            return chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            return char\n\n    encoded = ''.join(vowel_shifter(case_swapper(char)) for char in message)\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr(ord(c) + 2)\n    return c\n\ndef swap_case(c):\n    if c.isupper():\n        return c.lower()\n    return c.upper()\n\ndef encode_reversed(s):\n    s = ''.join(swap_case(shift_vowel(c)) for c in s)\n    return s[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def case_swap(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def shift_vowel(c):\n        if c.lower() in 'aeiou':\n            return chr(((ord(c) - ord('a')) + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    encoded = ''.join(shift_vowel(case_swap(c)) for c in message)\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    def case_swap(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_shift(ch):\n        if ch in 'aeiouAEIOU':\n            if ch.isupper():\n                return chr((ord(ch) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(ch) - 97 + 2) % 26 + 97)\n        else:\n            return ch\n\n    s = ''.join(map(case_swap, s))\n    s = ''.join(map(vowel_shift, s))\n    return s[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    # swap case function\n    def swap_case():\n        return \"\".join([l.swapcase() for l in msg])\n\n    # shift vowels function\n    def shift_vowels(s):\n        vowels = \"aeiou\"\n        return \"\".join([l if l.lower() not in vowels else chr((ord(l) - 97 + 2) % 26 + 97) for l in s])\n\n    # transform the message\n    transformed_msg = swap_case()\n    transformed_msg = shift_vowels(transformed_msg)\n\n    # reverse the message\n    reversed_msg = transformed_msg[::-1]\n\n    return reversed_msg\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def modify_case(s):\n        return ''.join([letter.upper() if letter.islower() else letter.lower() for letter in s])\n\n    def adjust_vowels(s):\n        vowels = 'aeiou'\n        return ''.join([chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.lower() in vowels else c for c in s])\n    \n    return modify_case(adjust_vowels(message))[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(msg):\n    def helper1(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def helper2(c):\n        vowels = 'AEIOU'\n        if c.upper() in vowels:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(helper2, map(helper1, reversed(msg))))\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(letter):\n        return letter.lower() if letter.isupper() else letter.upper()\n\n    def adjust_vowels(letter):\n        return chr((ord(letter) - 97 + 2) % 26 + 97) if letter.isalpha() else letter\n\n    encoded_msg = ''.join([switch_case(adjust_vowels(c)) for c in message])\n    return encoded_msg[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(s):\n    def helper_vowels(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join('a' if c in vowels else c for c in s)\n\n    def helper_case(s):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n    s = helper_vowels(helper_case(s))\n    return s[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Helper function to switch case of each letter\n    def to_switch_case(s):\n        return ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in s)\n\n    # Helper function to move vowels two letters ahead in the alphabet\n    def vowel_shift(s):\n        return ''.join(\n            chr((ord(ch) - 97 + 2) % 26 + 97) if ch in \"aeiou\" else ch\n            for ch in s)\n    \n    # Process the message string\n    msg = vowel_shift(to_switch_case(msg))\n    \n    # Invert the sequence of the updated string\n    return msg[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def toggle_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def advance_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            if char.isupper():\n                return chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return char\n\n    transformed_message = ''.join(toggle_case(char) if char.isalpha() else advance_vowel(char) for char in message)\n    reversed_message = transformed_message[::-1]\n\n    return reversed_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def toggle_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def advance_vowel(c):\n        vowels = \"aeiou\"\n        if c.lower() in vowels:\n            if c.islower():\n                v_idx = (vowels.index(c) + 2) % 5\n                return vowels[v_idx]\n            else:\n                v_idx = (vowels.index(c.lower()) + 2) % 5\n                return vowels[v_idx].upper()\n        return c\n    \n    encoded = \"\".join(toggle_case(advance_vowel(c)) for c in message[::-1])\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def advance_vowel(c):\n        if c.lower() in 'aeiou':\n            if c.isupper():\n                return chr(65 + (ord(c) + 2 - 65) % 26)\n            else:\n                return chr(97 + (ord(c) + 2 - 97) % 26)\n        return c\n\n    encoded_message = ''.join(map(switch_case, message))\n    encoded_message = ''.join(map(advance_vowel, encoded_message))\n    return encoded_message[::-1]\n",
                true
            ],
            [
                "\ndef toggle_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef advance_vowel(char):\n    vowels = 'aeiou'\n    if char in vowels:\n        return vowels[(vowels.index(char) + 2) % len(vowels)]\n    else:\n        return char\n\ndef encode_reversed(message):\n    transformed_message = ''.join([advance_vowel(toggle_case(char)) for char in message])\n    return transformed_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Subfunction to toggle case of letter\n    def toggle_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n    \n    # Subfunction to advance vowel by 2 positions in alphabet\n    def advance_vowel(c):\n        if c in 'aeiou':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    # Apply transformations\n    transformed_msg = \"\".join(toggle_case(advance_vowel(c)) for c in msg)\n   \n    # Return reversed string\n    return transformed_msg[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def adjust_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            char_index = ord(char) + 2\n            if char.isupper():\n                char_index = max(char_index, 65)  # Ensure that the new character is within the ASCII range for uppercase letters\n            else:\n                char_index = max(char_index, 97)  # Ensure that the new character is within the ASCII range for lowercase letters\n            return chr(char_index)\n        return char\n\n    message = ''.join(map(adjust_vowel, map(switch_case, message)))\n    return message[::-1]\n",
                true
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr(ord(c) + 2)\n    return c\n\ndef reverse_and_encode(s):\n    result = ''.join(shift_vowel(c.swapcase()) for c in s)\n    return result[::-1]\n\nencode_reversed = reverse_and_encode\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def shift_vowel(c):\n        if c in 'aeiouAEIOU':\n            if c.isupper():\n                return chr((ord(c)-65+2) % 26 + 65)\n            else:\n                return chr((ord(c)-97+2) % 26 + 97)\n        else:\n            return c\n\n    encoded = ''.join(map(shift_vowel, map(switch_case, message)))\n    return encoded[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef shift_vowel(char):\n    vowels = 'aeiou'\n    if char in vowels:\n        return chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n    else:\n        return char\n\ndef encode_reversed(message):\n    encoded = ''.join(shift_vowel(switch_case(char)) for char in message)\n    return encoded[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(msg):\n    # Helper function to switch case\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    # Helper function to alter vowels\n    def alter_vowel(c):\n        if c in 'aeiouAEIOU':\n            if c.isupper():\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    # Apply both transformations\n    msg = ''.join(alter_vowel(switch_case(c)) for c in msg)\n\n    # Reverse the string\n    msg = msg[::-1]\n\n    return msg\n",
                true
            ]
        ],
        "level 3": [
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    elif ch.isupper():\n        return ch.lower()\n    else:\n        return ch\n\ndef vowel_change(ch):\n    vowels = \"aeiouAEIOU\"\n    if ch in vowels:\n        return chr((ord(ch) - 97 + 2) % 26 + 97)\n    else:\n        return ch\n\ndef encode_reversed(message):\n    encoded = \"\".join(map(vowel_change, map(switch_case, message)))\n    return encoded[::-1]\n\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    message = map(switch_case, message)\n    message = map(vowel_change, message)\n    message = ''.join(message[::-1])\n\n    return message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            new_char = chr(ord(ch) + 2)\n            return new_char if new_char in vowels else ch\n        else:\n            return ch\n\n    # Apply transformations\n    transformed = ''.join(map(switch_case, map(vowel_change, message)))\n\n    # Reverse and return the result\n    return transformed[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            if ch.islower():\n                return chr(ord('a') + (ord(ch) - ord('a') + 2) % 26)\n            else:\n                return chr(ord('A') + (ord(ch) - ord('A') + 2) % 26)\n        else:\n            return ch\n\n    message_list = list(map(switch_case, message))\n    message_list = list(map(vowel_change, message_list))\n    message_list.reverse()\n    return ''.join(message_list)\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    # Helper functions\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a')) if ch.islower() else chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    # Apply changes\n    message_list = list(map(lambda x: vowel_change(switch_case(x)), message))\n    message_list.reverse()\n    encoded_message = ''.join(message_list)\n\n    return encoded_message\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = \"aeiou\"\n        if ch in vowels:\n            vowels_list = list(vowels*2)\n            idx = vowels_list.index(ch)\n            return vowels_list[idx+2]\n        else:\n            return ch\n\n    encoded_message = \"\".join(map(vowel_change, map(switch_case, message)))\n    return encoded_message[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97)\n        else:\n            return ch\n\n    message = ''.join(map(switch_case, message))\n    message = ''.join(map(vowel_change, message))\n    \n    return message[::-1]\n\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            new_char = chr(ord(ch) + 2)\n            return new_char if ch.isupper() else new_char.lower()\n        else:\n            return ch\n\n    message_modified = ''.join(map(switch_case, message))\n    message_modified = ''.join(map(vowel_change, message_modified))\n    return message_modified[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    # Apply the transformations using map()\n    message = ''.join(map(switch_case, map(vowel_change, message)))\n\n    # Reverse the string\n    return message[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    # Define nested functions\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            vowel_map = dict(zip(vowels, vowels[2:] + vowels[:2]))\n            return vowel_map[ch]\n        return ch\n\n    # Apply transformations and reverse the modified string\n    return ''.join(map(vowel_change, map(switch_case, message[::-1])))\n",
                false
            ],
            [
                "\ndef encode_reversed():\n    def switch_case(ch):\n        if ch.isalpha():\n            if ch.lower() == ch:\n                return ch.upper()\n            else:\n                return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.lower() == 'u':\n                return 'b'\n            elif ch.lower() == 'y':\n                return 'z'\n            else:\n                return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    return lambda message: ''.join(map(lambda ch: vowel_change(switch_case(ch)), message[::-1]))\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        return chr(ord(ch) + 2) if ch in vowels else ch\n\n    transformed_message = ''.join(map(switch_case, map(vowel_change, message)))\n    return transformed_message[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            if ch.isupper():\n                return chr(((ord(ch)-65+2) % 26)+65)\n            else:\n                return chr(((ord(ch)-97+2) % 26)+97)\n        else:\n            return ch\n\n    message = list(map(switch_case, message))\n    message = list(map(vowel_change, message))\n    message = ''.join(message[::-1])\n\n    return message\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n    \n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.isupper():\n                return chr((ord(ch.lower()) - ord('a') + 2) % 26 + ord('A'))\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        return ch\n\n    # The order of transforming and reversing is important,\n    # so list and join operations are used.\n    transformed_list = list(map(vowel_change, map(switch_case, message)))\n    transformed_list.reverse()\n    return ''.join(transformed_list)\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    # Define the inner function switch_case to toggle the case of a character\n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n\n    # Define the inner function vowel_change to shift any vowels by two places\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n        return ch\n\n    # Convert the message into a list of characters, apply transformations, and join them back into a string\n    transformed = ''.join(map(switch_case, map(vowel_change, message)))\n\n    # Return the reversed string\n    return transformed[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = \"aeiou\"\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return ch\n\n    def password(m):\n        result = \"\"\n        for ch in m:\n            result += switch_case(vowel_change(ch))\n        return result[::-1]\n\n    return password(message)\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        return chr(ord(ch) + 2) if ch in vowels else ch\n\n    def password(ch):\n        ch = switch_case(ch)\n        return vowel_change(ch)\n\n    return ''.join(map(password, message))[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            return chr(ord(ch) + 2)\n        return ch\n\n    def password(message):\n        return ''.join([switch_case(vowel_change(ch)) for ch in message])\n\n    return password(message)[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    return ch.lower()\n\ndef vowel_change(ch):\n    if ch in ['a', 'e', 'i', 'o', 'u']:\n        return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n    return ch\n\ndef password(message):\n   return ''.join(vowel_change(switch_case(ch)) for ch in message[::-1])\n\ndef encode_reversed(message):\n    return password(message)\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Define nested functions\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return ch\n\n    # Apply transformations\n    message = \"\".join(map(switch_case, message))\n    message = \"\".join(map(vowel_change, message))\n\n    # Reverse the message\n    message = message[::-1]\n\n    return message\n",
                false
            ],
            [
                "\ndef encode_rejected():\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.isupper():\n                return chr((ord(ch) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(ch) - 97 + 2) % 26 + 97)\n        else:\n            return ch\n\n    def message_processor(message):\n        message = ''.join(map(switch_case, message))\n        message = ''.join(map(vowel_change, message))\n        return message[::-1]\n\n    return message_processor\n",
                false
            ],
            [
                "\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            ch = chr((ord(ch) - 65 + 2) % 26 + 65) if ch.isupper() else chr((ord(ch) - 97 + 2) % 26 + 97)\n        return ch\n\n    functions = [switch_case, vowel_change]\n    for func in functions:\n        message = ''.join(map(func, message))\n    return message[::-1]\n",
                false
            ],
            [
                "\ndef encode_rejected(message: str) -> str:\n    def switch_case(ch: str) -> str:\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch: str) -> str:\n        vowels = 'aeiou'\n        if ch in vowels:\n            return vowels[(vowels.index(ch)+2)%len(vowels)]\n        else:\n            return ch\n\n    return ''.join(list(map(switch_case, map(vowel_change, message)))[::-1])\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    return ch.lower()\n\ndef encode_rejected(message):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\n    def vowel_change(ch):\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n        return ch\n\n    return ''.join(map(switch_case, map(vowel_change, message)))[::-1]\n",
                false
            ],
            [
                "\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.isupper():\n                return chr(ord('A') + ((ord(ch) - ord('A')) + 2) % 26)\n            else:\n                return chr(ord('a') + ((ord(ch) - ord('a')) + 2) % 26)\n        else:\n            return ch\n\n    # Apply the transformations sequentially\n    message = map(switch_case, message)\n    message = map(vowel_change, message)\n\n    # Convert the message back to a string and reverse it\n    encoded_message = \"\".join(message)[::-1]\n    \n    return encoded_message\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            if ch.islower():\n                return ch.upper()\n            else:\n                return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    return \"\".join(map(switch_case, message[::-1]))  # reverse the message\n\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            if ch.islower():\n                return ch.upper()\n            else:\n                return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    return \"\".join(map(vowel_change, map(switch_case, message[::-1])))  # reverse the message\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        return chr(ord(ch) + 2) if ch in vowels else ch\n\n    transformed_message = ''.join(map(switch_case, map(vowel_change, message)))\n    return transformed_message[::-1]\n",
                true
            ],
            [
                "\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiou'\n        if ch.lower() in vowels:\n            new_char = chr(ord(ch) + 2)\n            return new_char if ch.isupper() else new_char.lower()\n        else:\n            return ch\n\n    message_modified = ''.join(map(vowel_change, message))\n    message_modified = ''.join(map(switch_case, message_modified))\n    return message_modified[::-1]\n",
                true
            ],
            [
                "\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    return ch.lower()\n\ndef vowel_change(ch):\n    if ch in ['a', 'e', 'i', 'o', 'u']:\n        return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n    return ch\n\ndef encode_reversed(message):\n    # Use the map function with switch_case as the first function\n    # and vowel_change as the second function.\n    # Use join function to combine the list back into a string.\n    return ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))[::-1]\n",
                false
            ],
            [
                "\ndef encode_reversed(message):\n    # Define the helper function switch_case\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    # Define the helper function vowel_change\n    def vowel_change(ch):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        if ch in vowels:\n            return chr((ord(ch) - 97 + 2) % 26 + 97)  # change vowel by 2 and wrap around alphabet\n        else:\n            return ch\n\n    # Apply switch_case and vowel_change to the string, then reverse the result\n    return ''.join(map(switch_case, map(vowel_change, message))[::-1])\n",
                false
            ]
        ]
    },
    "2": {
        "level 1": [
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'm', 'o': 'q', 'u': 't'}\n    \n    encoded_text = []\n    for char in text:\n        if char.lower() in vowels:\n            encoded_text.append(vowels[char.lower()])\n        else:\n            encoded_text.append(char.swapcase())\n    \n    encoded_text = ''.join(encoded_text)\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    transformed_text = ''\n    vowels = 'aeiou'\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_text += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            else:\n                transformed_text += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            transformed_text += char\n            \n    md5_hash = hashlib.md5(transformed_text.encode('utf-8')).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    text = text.swapcase()\n    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, chr((ord(vowel) - ord('a') + 2) % 26 + ord('a')))\n    return hashlib.md5(text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_text):\n    if not input_text:\n        return None\n\n    transformed_text = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in input_text:\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_text += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                transformed_text += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            transformed_text += char\n\n    return hashlib.md5(transformed_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char in 'aeiouAEIOU':\n            encoded_text += chr(ord(char) + 2)\n        else:\n            encoded_text += char.swapcase()\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    modified_text = []\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = char.upper() if char.islower() else char.lower()\n                modified_text.append(vowels[char.lower()])\n            else:\n                char = char.upper() if char.islower() else char.lower()\n                modified_text.append(chr((ord(char) - ord('a') + 2) % 26 + ord('a')))\n        else:\n            modified_text.append(char)\n    \n    text_hash = hashlib.md5(''.join(modified_text).encode())\n    return text_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    transformed_text = ''\n    vowels = 'aeiou'\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_text += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                transformed_text += char.swapcase()\n        else:\n            transformed_text += char\n            \n    md5_hash = hashlib.md5(transformed_text.encode()).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    # Toggle case and advance vowels by two positions\n    transformed_text = ''\n    for char in text:\n        if char in 'aeiouAEIOU':\n            transformed_text += chr(ord(char) + 2) if char.isupper() else chr(ord(char) - 32 + 2)\n        else:\n            transformed_text += char.upper() if char.islower() else char.lower()\n            \n    # Calculate MD5 hash of the transformed text\n    md5_hash = hashlib.md5(transformed_text.encode()).hexdigest()\n    \n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_string):\n    if not input_string:\n        return None\n\n    transformed_text = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in input_string:\n        if char.lower() in vowels:\n            transformed_text += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            transformed_text += char.swapcase()\n\n    md5_obj = hashlib.md5()\n    md5_obj.update(transformed_text.encode('utf-8'))\n    return md5_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char in 'aeiouAEIOU':\n            encoded_text += chr(ord(char) + 2)\n        else:\n            encoded_text += char.swapcase()\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    vowels = 'aeiou'\n    encoded_string = ''.join([chr(ord(c) ^ 32) if c.lower() in vowels else chr(ord(c) + 2) for c in s])\n    return hashlib.md5(encoded_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    md5 = hashlib.md5()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_string = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_string += chr((ord(char.lower())-97+2)%26+97) if char.islower() else chr((ord(char.lower())-97+2)%26+65)\n            else:\n                encoded_string += char.lower() if char.isupper() else char.upper()\n        else:\n            encoded_string += char\n    \n    md5.update(encoded_string.encode('utf-8'))\n    return md5.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for character in s:\n        if character.islower():\n            encoded_string += character.upper()\n        elif character.isupper():\n            encoded_string += character.lower()\n        else:\n            encoded_string += character\n    encoded_string = \"\".join([chr((ord(i) - 97 + 2) % 26 + 97) if i in ['a', 'e', 'i', 'o', 'u'] else i for i in encoded_string])\n    hashed_string = hashlib.md5(encoded_string.encode())\n    return hashed_string.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_string):\n    if not input_string:\n        return None\n\n    result = ''\n    for c in input_string:\n        if c.isalpha():\n            if c.lower() in 'aeiou':\n                result += chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                result += c.lower() if c.isupper() else c.upper()\n        else:\n            result += c\n    \n    return hashlib.md5(result.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c.isupper():\n            encoded_str += chr(ord('A') + (ord(c) - ord('A') + 2) % 26)\n        elif c.islower():\n            encoded_str += chr(ord('a') + (ord(c) - ord('a') + 2) % 26)\n        else:\n            encoded_str += c\n    \n    md5_hash = hashlib.md5(encoded_str.encode())\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    vowels = 'aeiou'\n    encoded_string = ''.join([chr(ord(c) + 2) if c.lower() in vowels else c.swapcase() for c in s])\n    return hashlib.md5(encoded_string.encode('utf-8')).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    encoded_str = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_str += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_str += char\n            \n    encoded_str = \"\".join([\"a\" if i == \"A\" else \"A\" if i == \"a\" else i for i in encoded_str])\n    encoded_str = \"\".join([\"e\" if i == \"E\" else \"E\" if i == \"e\" else i for i in encoded_str])\n    encoded_str = \"\".join([\"i\" if i == \"I\" else \"I\" if i == \"i\" else i for i in encoded_str])\n    encoded_str = \"\".join([\"o\" if i == \"O\" else \"O\" if i == \"o\" else i for i in encoded_str])\n    encoded_str = \"\".join([\"u\" if i == \"U\" else \"U\" if i == \"u\" else i for i in encoded_str])\n    \n    m = hashlib.md5()\n    m.update(encoded_str.encode('utf-8'))\n    return m.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for character in s:\n        if character.isalpha():\n            if character.lower() in 'aeiou':\n                encoded_string += chr(((ord(character) - ord('a')) + 2) % 26 + ord('a'))\n            else:\n                encoded_string += chr(((ord(character) - ord('A')) + 2) % 26 + ord('A'))\n        else:\n            encoded_string += character\n    return hashlib.md5(encoded_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_str):\n    if not input_str:\n        return None\n    vowels = 'aeiouAEIOU'\n    output_str = ''\n    for char in input_str:\n        if char in vowels:\n            char = chr(((ord(char) - 97 + 2) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + 2) % 26) + 65)\n        output_str += char.swapcase()\n    output_bytes = output_str.encode()\n    m = hashlib.md5()\n    m.update(output_bytes)\n    return m.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char in \"aeiouAEIOU\":\n                encoded_text += chr(((ord(char) - 97 + 2) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                encoded_text += chr(((ord(char) - 97) % 26) + 97) if char.islower() else chr(((ord(char) - 65) % 26) + 65)\n        else:\n            encoded_text += char\n\n    encoded_text = \"\".join([\"a\" if item == \"A\" else \"A\" if item == \"a\" else item for item in encoded_text])\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(encoded_text.encode())\n\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'm', 'o': 'q', 'u': 't'}\n    \n    encoded_text = []\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = char.upper() if char.islower() else char.lower()\n                encoded_text.append(vowels[char.lower()])\n            else:\n                encoded_text.append(char.swapcase())\n        else:\n            encoded_text.append(char)\n    \n    encoded_text = ''.join(encoded_text)\n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_string):\n    \n    # Check if the input string is empty\n    if not input_string:\n        return None\n\n    # Define the vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n\n    # Define a helper function to convert case\n    def convert_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    # Define a helper function to move vowel two letters up\n    def move_vowel(c):\n        if c in vowels:\n            return chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2)\n        else:\n            return c\n\n    # Apply the transformations and calculate the MD5 hash\n    transformed = ''.join(move_vowel(convert_case(c)) for c in input_string)\n    md5_hash = hashlib.md5(transformed.encode())\n\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    changed_string = \"\"\n    for letter in s:\n        if letter.isalpha():\n            if letter.lower() in 'aeiou':\n                new_letter = chr(((ord(letter) - ord('a') + 2) % 26) + ord('a'))\n                if letter.islower():\n                    changed_string += new_letter\n                else:\n                    changed_string += new_letter.upper()\n            else:\n                if letter.islower():\n                    changed_string += letter.upper()\n                else:\n                    changed_string += letter.lower()\n        else:\n            changed_string += letter\n    hash_object = hashlib.md5(changed_string.encode())\n    md5_hash = hash_object.hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_string):\n    if not input_string:\n        return None\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_string = ''\n    for char in input_string:\n        if char.lower() in vowels:\n            if char.islower():\n                encoded_string += chr(((ord(char) - 97 + 2) % 26) + 97)\n            else:\n                encoded_string += chr(((ord(char) - 65 + 2) % 26) + 65)\n        else:\n            if char.islower():\n                encoded_string += chr(((ord(char) - 97 + 1) % 26) + 97)\n            else:\n                encoded_string += chr(((ord(char) - 65 + 1) % 26) + 65)\n\n    md5_hash = hashlib.md5(encoded_string.encode())\n    return md5_hash.hexdigest()\n\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char in \"aeiouAEIOU\":\n                encoded_text += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_text += chr((ord(char) - 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            encoded_text += char\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'm', 'u': 'p'}\n    \n    altered_text = []\n    for ch in text:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                altered_text.append(vowels[ch.lower()].upper() if ch.isupper() else vowels[ch.lower()])\n            else:\n                altered_text.append(ch.upper() if ch.islower() else ch.lower())\n        else:\n            altered_text.append(ch)\n\n    altered_text = ''.join(altered_text)\n    \n    hash_object = hashlib.md5(altered_text.encode())\n    md5_hash = hash_object.hexdigest()\n    \n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_text):\n    \n    # Check if input_text is empty\n    if not input_text:\n        return None\n\n    # Reverse case of every alphabet character\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    reversed_case_text = \"\".join(ch.upper() if ch in alphabet[:13] else ch.lower() for ch in input_text)\n    \n    # Move all vowels two places ahead in the alphabet\n    vowels = 'aeiou'\n    moved_vowels_text = \"\".join(chr((ord(ch) - 97 + 2) % 26 + 97) if ch in vowels else ch for ch in reversed_case_text)\n    \n    # Generate an MD3 hash of the altered string\n    md3_hash = hashlib.md5(moved_vowels_text.encode()).hexdigest()\n\n    return md3_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    # Reverse the case\n    text = text.swapcase()\n    \n    # Move all vowels two places ahead\n    vowels = 'aeiou'\n    text = ''.join([chr(ord(c) + 2) if c in vowels else c for c in text])\n    \n    # Generate MD3 hash\n    md3 = hashlib.md5()\n    md3.update(text.encode('utf-8'))\n    md3_digest = md3.hexdigest()\n    \n    return md3_digest\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(input_text):\n    if not input_text:\n        return None\n\n    vowels = 'aeiouAEIOU'\n    output_text = ''\n    for char in input_text:\n        if char in vowels:\n            char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n        else: \n            char = char.swapcase()\n        output_text += char\n\n    return hashlib.md5(output_text.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    encoded_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char in \"aeiouAEIOU\":\n                encoded_text += chr((ord(char) % 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) % 65 + 2) % 26 + 65)\n            else:\n                encoded_text += chr((ord(char) % 97 + 2) % 26 + 97) if char.islower() else chr((ord(char) % 65 + 2) % 26 + 65)\n        else:\n            encoded_text += char\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n",
                false
            ]
        ],
        "level 2": [
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    s = ''.join([char.swapcase() if char.isalpha() else char for char in s])\n    s = ''.join([vowels.get(char, char) for char in s])\n    \n    return hashlib.md5(s.encode()).hexdigest()\n\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_string):\n    \n    # Check if the input string is empty\n    if not input_string:\n        return None\n\n    # Initialize an empty string to store the modified string\n    modified = ''\n\n    # Define a dictionary for vowels and their shifted positions\n    shifted_vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'C', 'E': 'G', 'I': 'J', 'O': 'P', 'U': 'V'}\n\n    # Loop through each character in the input string\n    for char in input_string:\n        # Check if the character is an English vowel and if it is, append the shifted vowel to the modified string\n        if char in shifted_vowels:\n            modified += shifted_vowels[char]\n        # If the character is a letter, append its swapped case to the modified string\n        elif char.isalpha():\n            modified += char.swapcase()\n        # If the character is not an English vowel nor a letter, append it as it is to the modified string\n        else:\n            modified += char\n            \n    # Hash the modified string using the MD5 algorithm\n    h = hashlib.md5()\n    h.update(modified.encode('utf-8'))\n    md5_hash = h.hexdigest()\n    \n    # Return the MD5 hash\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s.swapcase()\n    s = s.translate(str.maketrans('aeiouAEIOU', 'cdefrCDEFRLMOPQSTUVWXYZSTUVWXYZ'))\n    md5_hash = hashlib.md5(s.encode('utf-8')).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_str):\n    # Return None for empty string\n    if not input_str:\n        return None\n\n    output_str = ''\n    vowels = 'aeiouAEIOU'\n    for letter in input_str:\n        if letter in vowels:\n            # If vowel, shift it by 2 positions forward (a becomes c, e becomes g, etc.)\n            output_str += chr((ord(letter) - 97 + 2) % 26 + 97) if letter.islower() else chr((ord(letter) - 65 + 2) % 26 + 65)\n        else:\n            # Swap case if not a vowel\n            output_str += letter.swapcase()\n\n    # Convert the final string to md5 hash\n    md5_hash = hashlib.md5(output_str.encode()).hexdigest()\n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c.isalpha():\n            if c in \"aeiouAEIOU\":\n                encoded_str += chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                encoded_str += c.swapcase()\n        else:\n            encoded_str += c\n    \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    s = ''.join([char.lower() if char.lower() not in vowels else vowels[char.lower()] for char in s])\n    \n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    transformed_string = ''.join([ch.lower() if ch.lower() not in 'aeiou' else chr(((ord(ch.lower()) - 97 + 2) % 26) + 97) for ch in s])\n    return hashlib.md5(transformed_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s.swapcase()\n    s = s.translate(str.maketrans('aeiouAEIOU', 'cdefrCDEF$'))\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    transformed_s = ''\n    for char in s:\n        if char.lower() in 'aeiou':\n            if char.isupper():\n                transformed_s += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:  # char is lower case\n                transformed_s += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n        else:\n            transformed_s += char\n    s_bytes = transformed_s.encode('UTF-8')\n    md5 = hashlib.md5()\n    md5.update(s_bytes)\n    return md5.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c in 'aeiouAEIOU':\n            encoded_str += chr(ord(c) + 2)\n        else:\n            encoded_str += c.swapcase()\n    \n    m = hashlib.md5()\n    m.update(encoded_str.encode('utf-8'))\n    return m.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    s = ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    \n    s = ''.join([vowels[char] if char in vowels else char for char in s])\n    \n    s = ''.join([char for char in s if char in 'abcdefghijklmnopqrstuvwxyz'])\n\n    return hashlib.md5(s.encode()).hexdigest()\n\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_string):\n    \n    # Check if input_string is blank\n    if not input_string:\n        return None\n\n    # Switch cases of each character \n    transformed_string = ''.join([c.lower() if c.isupper() else c.upper() for c in input_string])\n\n    # Map vowels to their next two alphabet characters\n    vowels = 'aeiouAEIOU'\n    vowel_map = str.maketrans(vowels, vowels[2:] + vowels[:2])\n    transformed_string = transformed_string.translate(vowel_map)\n\n    # Calculate MD5 hash\n    hash_object = hashlib.md5(transformed_string.encode())\n    md5_hash = hash_object.hexdigest()\n    \n    return md5_hash\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s.strip():\n        return None\n\n    s = s.swapcase()\n    s = ''.join(chr(ord(c) + 2) if c in 'aeiou' else c for c in s)\n    md5 = hashlib.md5()\n    md5.update(s.encode('utf-8'))\n    return md5.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_str):\n    # Return None if input is blank\n    if not input_str:\n        return None\n    \n    # Create a dictionary to hold the mappings of vowels and their positions\n    vowel_dict = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 't'}\n    \n    # Transform the string\n    transformed_str = \"\"\n    for char in input_str:\n        if char.isalpha():\n            if char.lower() in vowel_dict:\n                if char.islower():\n                    transformed_str += vowel_dict[char.lower()].lower()\n                else:\n                    transformed_str += vowel_dict[char.lower()].upper()\n            else:\n                if char.islower():\n                    transformed_str += char.lower()\n                else:\n                    transformed_str += char.upper()\n        else:\n            transformed_str += char\n\n    # Return the MD5 hash\n    return hashlib.md5(transformed_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c in 'aeiouAEIOU':\n            encoded_str += chr(ord(c) + 2)\n        else:\n            encoded_str += c.swapcase()\n    \n    m = hashlib.md5()\n    m.update(encoded_str.encode('utf-8'))\n    return m.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'p', 'u': 'v'}\n    \n    s = ''.join([char.swapcase() if char.isalpha() else char for char in s])\n    \n    s = ''.join([vowels[char] if char in vowels else char for char in s])\n    \n    encoded = s.encode('utf-8')\n    \n    return hashlib.md5(encoded).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(input_string):\n    \n    if not input_string:\n        return None\n\n    vowels = 'aeiou'\n    encoded_string = ''\n\n    for char in input_string:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_string += chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                encoded_string += char.swapcase()\n        else:\n            encoded_string += char\n\n    md5_obj = hashlib.md5()\n    md5_obj.update(encoded_string.encode())\n\n    return md5_obj.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    encoded_string = \"\"\n    for character in s:\n        if character.isalpha():\n            if character.lower() in 'aeiou':\n                encoded_string += chr(((ord(character) - ord('a')) + 2) % 26 + ord('a'))\n            else:\n                encoded_string += character.swapcase()\n        else:\n            encoded_string += character\n    md5_hash = hashlib.md5(encoded_string.encode())\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    s = s.swapcase()\n    \n    vowels = 'aeiou'\n    s = ''.join([chr(ord(c) + 2) if c in vowels else c for c in s])\n    \n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c.isalpha():\n            if c in \"aeiouAEIOU\":\n                encoded_str += chr((ord(c) - ord('a' if c.islower() else 'A') + 2) % 26 + ord('a' if c.islower() else 'A'))\n            else:\n                encoded_str += c.swapcase()\n        else:\n            encoded_str += c\n\n    return hashlib.md5(encoded_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'j', 'o': 'm', 'u': 'p'}\n    \n    s = ''.join([char.lower() if char.lower() not in vowels else vowels[char.lower()] for char in s])\n    \n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_string):\n    \n    if not input_string:\n        return None\n\n    vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    new_string = ''\n    \n    for char in input_string:\n        if char in vowels:\n            new_string += vowels[(vowels.index(char) + 2) % len(vowels)]\n        elif char in upper_vowels:\n            new_string += upper_vowels[(upper_vowels.index(char) + 2) % len(upper_vowels)]\n        else:\n            new_string += char.swapcase()\n\n    return hashlib.md5(new_string.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s[::-1]\n    vowels = \"aeiou\"\n    converted_str = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                char = vowels[(vowels.index(char.lower()) + 2) % 5].upper()\n            else:\n                char = vowels[(vowels.index(char.lower()) + 2) % 5]\n        converted_str += char\n    return hashlib.md5(converted_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    trans = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    s = s.swapcase().translate(trans)\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = \"\"\n    for c in s:\n        if c in 'aeiouAEIOU':\n            encoded_str += chr(ord(c) + 2)\n        else:\n            encoded_str += chr(ord(c) ^ 0x20)\n            \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    vowels = 'aeiou'\n    new_string = ''.join(c.lower() if c.lower() in vowels else c for c in s)\n    for i in range(len(new_string)):\n        if new_string[i].lower() in vowels:\n            if new_string[i].isupper():\n                new_string = new_string[:i] + chr(((ord(new_string[i]) - 65 + 2) % 26) + 65) + new_string[i+1:]\n            else:\n                new_string = new_string[:i] + chr(((ord(new_string[i]) - 97 + 2) % 26) + 97) + new_string[i+1:]\n                \n    hash_object = hashlib.md5(new_string.encode())\n    return hash_object.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(input_string):\n    \n    # Check if the input string is empty\n    if not input_string:\n        return None\n\n    # Flip the casing of all characters and advance all vowels two alphabetic positions forward\n    flipped_string = ''\n    for char in input_string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n            \n    vowels = 'aeiou'\n    result_string = ''\n    for char in flipped_string:\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                char = 'a'\n            elif char.lower() == 'o':\n                char = 'e'\n            else:\n                char = vowels[vowels.index(char.lower()) + 2]\n        result_string += char\n\n    # Compute the MD5 hash of the new string\n    encoded_string = result_string.encode()\n    md5_hash = hashlib.md5(encoded_string)\n\n    return md5_hash.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    s = s[::-1]\n    vowels = \"aeiou\"\n    s = ''.join(chr((ord(c) - 97 + 2) % 26 + 97) if c.isalpha() and c.lower() in vowels else c for c in s)\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s: str):\n    # If string is empty return None\n    if not s:\n        return None\n    \n    # Flip the casing of all characters\n    s = s.swapcase()\n    \n    # Advance all vowels two positions forward\n    s = ''.join(chr((ord(c) - 97 + 2) % 26 + 97) if c.lower() in 'aeiou' else c for c in s)\n    \n    # Compute MD5 hash of new string and return it\n    return hashlib.md5(s.encode()).hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    encoded_str = ''.join([c.lower() if c.lower() not in 'aeiou' else chr((ord(c.lower()) - ord('a') + 2) % 26 + ord('a')) for c in s])\n    m = hashlib.md5()\n    m.update(encoded_str.encode('utf-8'))\n    return m.hexdigest()\n",
                false
            ]
        ],
        "level 3": [
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return ''.join([char.upper() if char.islower() else char.lower() for char in message])\n\n\ndef vowel_change(message):\n    vowels = 'aeiou'\n    return ''.join([chr(ord(char)+2) if char.lower() in vowels else char for char in message])\n\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        transformed_message = switch_case(vowel_change(message))\n        return string_to_md5(transformed_message)\n\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n    \n    def vowel_change(s):\n        result = \"\"\n        for c in s:\n            if c.lower() in \"aeiou\":\n                result += chr(ord(c) + 2) if c == c.upper() else chr(ord(c) - 2)\n            else:\n                result += c\n        return result\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n\n    # Check if the message is an empty string\n    if not message:\n        return None\n    \n    # Apply the transformations\n    transformed = vowel_change(switch_case(message))\n    # Convert the transformed string into its MD5 hash\n    return string_to_md5(transformed)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for ch in message:\n        if ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch.upper()\n    return result\n\ndef vowel_change(message):\n    result = \"\"\n    for ch in message:\n        if ch in 'aeiouAEIOU':\n            ch = chr(ord(ch) + 2)\n        result += ch\n    return result\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    transformed_message = switch_case(message)\n    transformed_message = vowel_change(transformed_message)\n    return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return message.swapcase()\n\ndef vowel_change(message):\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for c in message:\n        if c in vowels:\n            new_message += chr(ord(c) + 2)\n        else:\n            new_message += c\n    return new_message\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        transformed_string = switch_case(message)\n        vowel_transformed_string = vowel_change(transformed_string)\n        return string_to_md5(vowel_transformed_string)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n\n    def switch_case(message):\n        result = \"\"\n        for char in message:\n            if char.isupper():\n                result += char.lower()\n            elif char.islower():\n                result += char.upper()\n            else:\n                result += char\n        return result\n\n    def vowel_change(message):\n        result = \"\"\n        for char in message:\n            if char in \"aeiouAEIOU\":\n                if char.isupper():\n                    result += chr(ord(char)+2)\n                elif char.islower():\n                    result += chr(ord(char)-30)\n                else:\n                    result += char\n            else:\n                result += char\n        return result\n\n    def string_to_md5(message):\n        return hashlib.md5(message.encode()).hexdigest()\n\n    return string_to_md5(vowel_change(switch_case(message)))\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    else:\n        # switch_case\n        encoded_message = message.swapcase()\n        # vowel_change\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        encoded_message = ''.join([chr(ord(c)+2) if c.lower() in vowels else c for c in encoded_message])\n        # hash\n        return string_to_md5(encoded_message)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n\n    transformed_message = ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in message])\n    transformed_message = ''.join([chr(ord(ch) + 2) if ch.lower() in 'aeiou' else ch for ch in transformed_message])\n\n    def string_to_md5(text):\n        hash_object = hashlib.md5(text.encode())\n        md5_hash = hash_object.hexdigest()\n        return md5_hash\n\n    return string_to_md5(transformed_message)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    switch_case_message = ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in message])\n    vowel_change_message = ''.join([chr(ord(ch) + 2) if ch.lower() in 'aeiou' else ch for ch in switch_case_message])\n    return string_to_md5(vowel_change_message)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md_f(message):\n    if message == '':\n        return None\n    \n    # Switch case transformation\n    switch_case = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                switch_case += char.lower()\n            else:\n                switch_case += char.upper()\n        else:\n            switch_case += char\n    \n    # Vowel change transformation\n    vowel_change = ''\n    for char in switch_case:\n        if char.lower() in 'aeiou':\n            vowel_change += chr(ord(char) + 2)\n        else:\n            vowel_change += char\n\n    # Convert to MD5\n    def string_to_md5(input_str):\n        md5_hash = hashlib.md5()\n        md5_hash.update(input_str.encode('utf-8'))\n        return md5_hash.hexdigest()\n    \n    return string_to_md5(vowel_change)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    case_switched = \"\".join([c.lower() if c.isupper() else c.upper() for c in message])\n    vowel_changed = \"\".join([chr(ord(c) + 2) if c in \"aeiouAEIOU\" else c for c in case_switched])\n    return string_to_md5(vowel_changed)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef switch_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\ndef vowel_change(c):\n    vowels = \"aeiouAEIOU\"\n    if c in vowels:\n        return chr(ord(c) + 2)\n    else:\n        return c\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    transformed_message = ''.join(switch_case(c) for c in message)\n    altered_message = ''.join(vowel_change(c) for c in transformed_message)\n    hashed_message = string_to_md5(altered_message)\n    return hashed_message\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n    \n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        return c\n    \n    def string_to_md5(s):\n        md5Obj = hashlib.md5()\n        md5Obj.update(s.encode())\n        return md5Obj.hexdigest()\n\n    encoded_text = ''.join(vowel_change(switch_case(c)) for c in message)\n    return string_to_md5(encoded_text)\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        return char.lower() if char.isupper() else char.upper()\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    def string_to_md5(text):\n        return hashlib.md5(text.encode()).hexdigest()\n    \n    toggled_str = \"\".join(switch_case(char) for char in message)\n    altered_str = \"\".join(vowel_change(char) for char in toggled_str)\n    hash_result = string_to_md5(altered_str)\n    \n    return hash_result\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        return char.lower()\n\n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            if char.isupper():\n                return chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        return char\n\n    def string_to_md5(string):\n        hash_object = hashlib.md5(string.encode())\n        return hash_object.hexdigest()\n\n    transformed_message = ''.join(vowel_change(switch_case(char)) for char in message)\n    return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n\n    def switch_case(character):\n        if character.isupper():\n            return character.lower()\n        else:\n            return character.upper()\n\n    def vowel_change(character):\n        vowels = 'aeiouAEIOU'\n        if character in vowels:\n            if character.isupper():\n                return chr((ord(character) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(character) - 97 + 2) % 26 + 97)\n        else:\n            return character\n\n    def string_to_md5(string):\n        return hashlib.md5(string.encode()).hexdigest()\n\n    toggled = ''.join(switch_case(char) for char in message)\n    altered = ''.join(vowel_change(char) for char in toggled)\n    return string_to_md5(altered)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return message.swapcase()\n\ndef vopot_chopinghcter_changehage(message):\n    return ''.join([chr(ord(i) + 2) if i in 'aeiouAEIOU' else i for i in message])\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    transformed_message = switch_case(vowel_shift(message))\n    \n    return string_to_md5(transformed_message)\n\ndef switch_case(message):\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in message)\n\ndef vowel_shift(message):\n    return ''.join(chr(ord(c) + 2) if c in 'aeiouAEIOU' else c for c in message)\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for letter in message:\n        if letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter.upper()\n    return result\n\ndef vopot_chopinghcter_changehage(message):\n    result = \"\"\n    for letter in message:\n        if letter in \"aeiouAEIOU\":\n            result += chr(ord(letter) + 2)\n        else:\n            result += letter\n    return result\n\ndef string_to_md5(message):\n    hash_object = hashlib.md5(message.encode())\n    return hash_object.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return message.swapcase()\n\ndef vopot_chopinghcter_changehage(message):\n    return ''.join([chr(ord(c)+2) if c in 'aeiouAEIOU' else c for c in message])\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return message.swapcase()\n\ndef vopot_chopinghcter_changehage(message):\n    vowels = 'aeiouAEIOU'\n    return ''.join([chr(ord(char) + 2) if char in vowels else char for char in message])\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    return string_to_md5(vopot_chopinghcter_changehage(switch_case(message)))\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\ndef vowel_change(c):\n    vowels = \"aeiouAEIOU\"\n    if c in vowels:\n        return chr(ord(c) + 2)\n    else:\n        return c\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        encoded_message = [vowel_change(switch_case(c)) for c in message]\n        return string_to_md5(\"\".join(encoded_message))\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(text):\n    result = \"\"\n    for char in text:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\ndef vowel_change(text):\n    result = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in text:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef string_to_md5(message):\n    md5_hash = hashlib.md5()\n    md5_hash.update(message.encode('utf-8'))\n    return md5_hash.hexdigest()\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    message = switch_case(message)\n    message = vowel_change(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef vowel_change(char):\n    if char.lower() in 'aeiou':\n        return chr(ord(char)+2)\n    return char\n\ndef string_to_md5(string):\n    return hashlib.md5(string.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n    message = [switch_case(vowel_change(char)) for char in message]\n    message = ''.join(message)\n    return string_to_md5(message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(c):\n    if c.isupper():\n        return c.lower()\n    else:\n        return c.upper()\n\ndef vowel_change(c):\n    if c in 'aeiouAEIOU':\n        return chr(ord(c)+2)\n    else:\n        return c\n\ndef string_to_md5(message):\n    return hashlib.md5(message.encode()).hexdigest()\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        transformed_message = ''.join(vowel_change(switch_case(c)) for c in message)\n        return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        return chr(ord(ch) + 2)\n    else:\n        return ch\n\ndef string_to_md5(s):\n    return hashlib.md5(s.encode()).hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n\n    transformed_message = ''.join([switch_case(vowel_change(ch)) for ch in message])\n    return string_to_md5(transformed_message)\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result\n\ndef vowel_change(message):\n    result = \"\"\n    for char in message:\n        if char in 'aeiouAEIOU':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    else:\n        message = switch_case(message)\n        message = vowel_change(message)\n        md5_hash = hashlib.md5(message.encode())\n        return md5_hash.hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(msg):\n        return ''.join([c.lower() if c.isupper() else c.upper() for c in msg])\n\n    def vowel_change(msg):\n        def is_vowel(c):\n            return c in \"aeiouAEIOU\"\n        return ''.join([chr((ord(c) + 2) % 128) if is_vowel(c) else c for c in msg])\n    \n    def string_to_md5(msg):\n        return hashlib.md5(msg.encode()).hexdigest()\n\n    return string_to_md5(vowel_change(switch_case(message)))\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.islower():\n                result += ch.upper()\n            else:\n                result += ch.lower()\n        else:\n            result += ch\n    return result\n\ndef vowel_change(message):\n    result = \"\"\n    for ch in message:\n        if ch in \"aeiouAEIOU\":\n            ch_ascii = ord(ch)\n            if ch_ascii + 2 > 122:\n                result += chr(ch_ascii - 24)\n            elif ch_ascii + 2 > 90 and ch.isupper():\n                result += chr(ch_ascii - 24)\n            else:\n                result += chr(ch_ascii + 2)\n        else:\n            result += ch\n    return result\n\ndef encode_md5(message):\n    if not message:\n        return None\n    modified_message = switch_case(message)\n    modified_message = vowel_change(modified_message)\n    return hashlib.md5(modified_message.encode()).hexdigest()\n",
                true
            ],
            [
                "\nimport hashlib\n\ndef encode_md5(message):\n    if message == '':\n        return None\n    else:\n        # switch_case\n        encoded_message = ''\n        for i in range(len(message)):\n            if message[i].isalpha():\n                if message[i].islower():\n                    encoded_message += message[i].upper()\n                else:\n                    encoded_message += message[i].lower()\n            else:\n                encoded_message += message[i]\n        # vowel_change\n        vowels = 'aeiouAEIOU'\n        for i in range(len(encoded_message)):\n            if encoded_message[i] in vowels:\n                if encoded_message[i].islower():\n                    encoded_message = encoded_message[:i] + chr(ord(encoded_message[i])+2) + encoded_message[i+1:]\n                else:\n                    encoded_message = encoded_message[:i] + chr(ord(encoded_message[i].lower())+2) + encoded_message[i+1:]\n\n        # string_to_md5\n        new_md5 = hashlib.md5()\n        new_md5.update(encoded_message.encode())\n        return new_md5.hexdigest()\n",
                false
            ],
            [
                "\nimport hashlib\n\ndef switch_case(message):\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in message])\n\ndef vowel_change(message):\n    return ''.join([chr(ord(c) + 2) if c in 'aeiouAEIOU' else c for c in message])\n\ndef string_to_md5(message):\n    result = hashlib.md5(message.encode())\n    return result.hexdigest()\n\ndef encode_md5(message):\n    if not message:\n        return None\n\n    message = switch_case(message)\n    message = vowel_change(message)\n    return string_to_md5(message)\n",
                true
            ]
        ]
    },
    "3": {
        "level 1": [
            [
                "\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        if c.islower():\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n\n    def shift_group(g):\n        return ''.join(shift_char(c) for c in g)\n\n    return ''.join(shift_group(s[i:i+3]) for i in range(0, len(s), 3))\n",
                false
            ],
            [
                "\ndef shift_char(ch):\n    if 'a' <= ch <= 'z':\n        return chr(ord('a') + (ord(ch) - ord('a') + 2) % 26)\n    if 'A' <= ch <= 'Z':\n        return chr(ord('A') + (ord(ch) - ord('A') + 2) % 26)\n    return ch\n\ndef encode_cyclic_shift(input_str):\n    encoded_str = ''.join([shift_char(ch) for ch in input_str])\n    return ''.join([encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    encoded = []\n    for i, char in enumerate(s):\n        if char in lower:\n            if char == 'z':\n                encoded.append('A')\n            else:\n                encoded.append(upper[lower.index(char) + 1])\n        elif char in upper:\n            if char in vowels:\n                encoded.append(lower[vowels.index(char) + 2])\n            else:\n                if char == 'Z':\n                    encoded.append('a')\n                else:\n                    encoded.append(lower[upper.index(char) + 1])\n        else:\n            encoded.append(char)\n    result = ''.join(encoded)\n    return result[2:] + result[:2]\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiouAEIOU'\n    alphabet = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    s = s.translate(str.maketrans(vowels, alphabet))\n    encoded = ''.join(s[i:i+3] for i in range(0, len(s), 3))\n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Swap case of all letters\n    s = s.swapcase()\n\n    # Replace all vowels with letter that appears 2 places ahead in the English alphabet\n    s = s.replace('a', 'c').replace('e', 'g').replace('i', 'k').replace('o', 'q').replace('u', 'w').replace('A', 'C').replace('E', 'G').replace('I', 'K').replace('O', 'Q').replace('U', 'W')\n\n    # Cyclic groups of 3 characters\n    for i in range(0, len(s), 3):\n        s_list = list(s)\n        s_list[i:i+3] = s[i:i+3][::-1]\n        s = ''.join(s_list)\n\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        if c.isalpha():\n            shifted_c = chr(ord(c) + (2 if c.lower() in 'aeiou' else 1))\n            # To handle Z and z\n            if (not c.islower() and shifted_c > \"z\") or (c.islower() and shifted_c > \"Z\"):\n                shifted_c = chr(ord(shifted_c) - 26)\n            return shifted_c.lower() if c.isupper() else shifted_c.upper()\n        return c\n        \n    encoded_s = ''.join(shift_char(c) for c in s)\n    return ''.join(encoded_s[i:i+3] for i in range(0, len(encoded_s), 3))\n\n",
                false
            ],
            [
                "\ndef shift_letter(ch):\n    if 'a' <= ch <= 'z':\n        return chr((ord(ch) - 97 + 2) % 26 + 97)\n    elif 'A' <= ch <= 'Z':\n        return chr((ord(ch) - 65 + 2) % 26 + 65)\n    else:\n        return ch\n        \ndef encode_cyclic_shift(s):\n    s_shifted = ''.join(shift_letter(ch) for ch in s)\n    return ''.join(s_shifted[i:i+3] for i in range(0, len(s_shifted), 3))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    swapped = []\n    for i in s:\n        if i in lower:\n            swapped.append(upper[lower.index(i)])\n        elif i in upper:\n            swapped.append(lower[upper.index(i)])\n        else:\n            swapped.append(i)\n\n    for i in range(len(swapped)):\n        if swapped[i] in 'aeiouAEIOU':\n            swapped[i] = lower[lower.index(swapped[i])-2] if swapped[i] in 'aeiou' else upper[upper.index(swapped[i])-2]\n\n    return ''.join(swapped[i:i+3] for i in range(0, len(swapped), 3))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def shift_vowel(c):\n        if c in 'aeiouAEIOU':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        return c\n\n    def encode_block(block):\n        return ''.join(switch_case(shift_vowel(c)) for c in block)\n\n    def encode_string(s):\n        return ''.join(encode_block(s[i:i+3]) for i in range(0, len(s), 3))\n\n    return encode_string(s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for i, c in enumerate(s):\n        if c in vowels:\n            encoded += chr((ord(c)+52) % 256)\n        elif 'a' <= c <= 'z':\n            encoded += chr((ord(c)-32) % 256)\n        elif 'A' <= c <= 'Z':\n            encoded += chr((ord(c)+32) % 256)\n        else:\n            encoded += c\n    return ''.join([encoded[i:i+3] for i in range(0, len(encoded), 3)])\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    mupw = mupw.swapcase()\n    mupw = ''.join([alphabets[(alphabets.index(i) + 1) % 26] if i in vowels else i for i in mupw])\n    mupw = ''.join([mupw[i:i+3][::-1] if i % 3 == 0 else mupw[i:i+3] for i in range(0, len(mupw), 3)])\n    return mupw\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    result = ''\n    for char in mupw:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower()) - 97 + 1) % 26 + 97)\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return ''.join([result[i:i+3] for i in range(0, len(result), 3)][::-1])\n",
                false
            ],
            [
                "\ndef ert(mupw: str) -> str:\n    # Define the substitution lookup table\n    substitute_table = {\n        'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v',\n        'b': 'c', 'f': 'h', 'j': 'k', 'p': 'r', 'v': 'w',\n        'c': 'd', 'h': 'i', 'k': 'm', 'r': 's', 'w': 'x',\n        'd': 'e', 'i': 'l', 'm': 'n', 's': 't', 'x': 'y',\n        'e': 'g', 'l': 'o', 'n': 'q', 't': 'u', 'y': 'z',\n        'g': 'h', 'o': 'p', 'q': 't', 'u': 'v', 'z': 'y'\n    }\n\n    # Initialize the result string\n    res = ''\n\n    # Iterate over each character in the mupw\n    for c in mupw:\n        # Toggle capitalization\n        if c.isalpha():\n            if c.islower():\n                res += c.upper()\n            else:\n                res += c.lower()\n        else:\n            res += c\n\n    # Substitute vowels and rotate triplets\n    for i in range(0, len(res), 3):\n        triplet = res[i:i+3]\n        substituted_triplet = ''\n        for c in triplet:\n            if c in substitute_table:\n                substituted_triplet += substitute_table[c]\n            else:\n                substituted_triplet += c\n        res = res[:i] + substituted_triplet + res[i+3:]\n\n    return res\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    vowel_dict = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v'}\n    encoded_mupw = ''\n    for i in range(len(mupw)):\n        char = mupw[i]\n        if char.lower() in vowel_dict:\n            if char.isupper():  # Toggle capitalization\n                encoded_mupw += char.lower()\n            else:\n                encoded_mupw += char.upper()\n            encoded_mupw += vowel_dict[char.lower()]\n            i += 2\n        elif i+2 < len(mupw):\n            encoded_mupw += mupw[i+2]\n            encoded_mupw += mupw[i+1]\n            encoded_mupw += mupw[i]\n            i += 2\n        else:\n            encoded_mupw += char\n    return encoded_mupw\n",
                false
            ],
            [
                "\ndef ert(mupw):\n    vowels = 'aeiou'\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    result = \"\"\n    for char in mupw:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    for i in range(len(result)):\n        if result[i] in vowels:\n            result = result[:i] + result[i+1].upper() + result[i+2:] if i+2 < len(result) else result[:i] + result[i+1].upper()\n    \n    rotated = \"\"\n    for i in range(0, len(result), 3):\n        rotated += result[i:i+3][::-1]\n    \n    return rotated\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def shift(c):\n        if c.isalpha():\n            if c.lower() in 'aeiou':\n                return chr(((ord(c.lower()) + 1) % 123) + 96)\n            else:\n                return chr(((ord(c.lower()) + 1) % 123) + 96).upper() if c.isupper() else chr(((ord(c.lower()) + 1) % 123) + 96)\n        else:\n            return c\n\n    return ''.join([shift(s[i:i+3]) for i in range(0, len(s), 3)])\n",
                false
            ],
            [
                "\ndef shift_lower_to_upper(char):\n    if char.islower():\n        return char.upper()\n    return char\n\ndef shift_vowels_to_next_but_one(char):\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    if char in vowels:\n        v = {\n            'A': 'Z',\n            'E': 'Y',\n            'I': 'X',\n            'O': 'W',\n            'U': 'V',\n        }\n        return v[char]\n    return char\n\ndef encode_cyclic_shift(s):\n    s = [shift_lower_to_upper(c) for c in s]\n    s = [shift_vowels_to_next_but_one(c) for c in s]\n\n    res = []\n    for i in range(0, len(s), 3):\n        chunk = s[i:i+3]\n        chunk = chunk[::-1]\n        res.extend(chunk)\n\n    return ''.join(res)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower_case_vowels = 'aeiou'\n    upper_case_vowels = 'AEIOU'\n    lower_case_consonants = 'bcdfghjklmnpqrstvwxyz'\n    upper_case_consonants = 'BCDFGHJKLMNPQRSTVWXYZ'\n    vowels = lower_case_vowels + upper_case_vowels\n    consonants = lower_case_consonants + upper_case_consonants\n    \n    encoded_string = ''\n    for char in s:\n        if char in vowels:\n            # Replace vowels with the next but one character in the alphabet\n            new_char_index = (vowels.index(char) - 1) % len(vowels)\n            encoded_string += vowels[new_char_index]\n        elif char in consonants:\n            # Change the case of every letter\n            if char in lower_case_consonants:\n                encoded_string += upper_case_consonants[lower_case_consonants.index(char)]\n            else:\n                encoded_string += lower_case_consonants[upper_case_consonants.index(char)]\n        else:\n            # Rotating chunks of three characters\n            encoded_string += char\n    return encoded_string\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiou'\n    encode_vowels = {'e': 'd', 'i': 'g', 'o': 'j', 'u': 'm', 'a': 'n', 'E': 'D', 'I': 'G', 'O': 'J', 'U': 'M', 'A': 'N'}\n  \n    res = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            res += encode_vowels[s[i]]\n        else:\n            res += s[i]\n  \n    for i in range(0, len(res), 3):\n        chunk = list(res[i:i+3])\n        chunk.reverse()\n        res = res[:i] + \"\".join(chunk) + res[i+3:]\n\n    return res\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    result = ''\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if s[i].isupper():\n                result += chr((ord(s[i]) - 48) % 26 + 97)\n            else:\n                result += chr((ord(s[i]) - 65) % 26 + 65)\n        else:\n            result += s[i].swapcase()\n        if (i+1) % 3 == 0:\n            result = result[-1] + result[:-1]\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        if c.lower() in 'aeiou':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c.swapcase()\n\n    def rotate_triplet(s):\n        return s[2:] + s[0:2]\n\n    return \"\".join(shift_char(c) for c in s)\n\n",
                false
            ],
            [
                "\ndef shift_vowels(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr(ord(c) + 2)\n    return c\n    \ndef encode_cyclic_shift(s):\n    return ''.join(shift_vowels(c) for c in s)\n\ndef rotate_triplets(s):\n    return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\n\ndef encode_cyclic_shift_advanced(s):\n    encoded = encode_cyclic_shift(s)\n    return rotate_triplets(encoded)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shift_lower = 'cdefghijklmnopqrstuvwxyzab'\n    shift_upper = 'CDEFGHIJKLMNOPQRSTUVWXYZAB'\n    v = 'aeiouAEIOU'\n    encoded = ''\n    \n    for l in s:\n        if l in lower:\n            encoded += shift_lower[lower.index(l)]\n        elif l in upper:\n            encoded += shift_upper[upper.index(l)]\n        elif l in v:\n            encoded += shift_lower[lower.index(l)] if l in 'aeiou' else shift_upper[upper.index(l)]\n        else:\n            encoded += l\n\n    return ''.join([encoded[i:i+3][::-1] for i in range(0, len(encoded), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiou'\n    encode_vowels = {'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    decode_vowels = {value: key for key, value in encode_vowels.items()}\n    s = ''.join(char.lower() if char.islower() else encode_vowels.get(char, char) for char in s)\n    s = ''.join(s[i:i+3] for i in range(0, len(s), 3))\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    shift_vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    reverse_shift_vowels = {val: key for key, val in shift_vowels.items()}\n    replace_alphabet = {key: val for key, val in zip(\n        'abcdefghijklmnopqrstuvwxyz', 'defghijklmnopqrstuvwxyzabc')}\n    replace_reverse_alphabet = {val: key for key, val in replace_alphabet.items()}\n    result = []\n    for i in range(0, len(s), 3):\n        triplet = s[i:i+3]\n        triplet_shifted = ''.join(\n            [replace_alphabet[c.lower()] if c.islower() else replace_reverse_alphabet[c.lower()] for c in triplet])\n        triplet_shifted = ''.join(\n            [shift_vowels[c] if c in shift_vowels else c for c in triplet_shifted])\n        triplet_shifted = ''.join(\n            [reverse_shift_vowels[c] if c in reverse_shift_vowels else c for c in triplet_shifted])\n        triplet_shifted = ''.join([c.upper() if i % 2 == 0 and c.isalpha() else c for (i, c) in enumerate(triplet_shifted)])\n        result.append(triplet_shifted)\n    return ''.join(result)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        if c.lower() in 'aeiou':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c.swapcase()\n\n    def cyclic_permute(s):\n        n = len(s)\n        for i in range(0, n, 3):\n            s[i:i+3] = s[i:i+3][::-1]\n\n    lst = list(s)\n    for i in range(len(lst)):\n        lst[i] = shift_char(lst[i])\n\n    cyclic_permute(lst)\n\n    return ''.join(lst)\n",
                false
            ],
            [
                "\ndef shift_vowels(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr(ord(c) + 2)\n    return c\n    \ndef encode_cyclic_shift(s):\n    encoded_s = ''\n    for i in range(0, len(s), 3):\n        segment = s[i:i+3]\n        encoded_segment = segment[::-1]\n        encoded_s += ''.join([shift_vowels(c) for c in encoded_segment])\n    return encoded_s\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    encoded = []\n    for i, char in enumerate(s):\n        if char in lower:\n            if char not in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                if i % 3 == 0:  # Rotate every three characters\n                    encoded = [new_char] + encoded\n                else:\n                    encoded.append(new_char)\n            else:\n                encoded.append(char.upper())\n        elif char in upper:\n            if char not in vowels.upper():\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n                if i % 3 == 0:  # Rotate every three characters\n                    encoded = [new_char] + encoded\n                else:\n                    encoded.append(new_char)\n            else:\n                encoded.append(char.lower())\n        else:\n            encoded.append(char)\n    return ''.join(encoded)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def jump_vowels(c):\n        if c in 'aeiouAEIOU':\n            return chr((((ord(c) - 97) +2)%26)+97)\n        else:\n            return c\n\n    def cyclic_permutation(s):\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)][::-1])\n\n    encoded_str = ''.join(map(switch_case, s))\n    encoded_str = ''.join(map(jump_vowels, encoded_str))\n    encoded_str = ''.join(cyclic_permutation(encoded_str))\n\n    return encoded_str\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # function to switch case and shift vowels\n    def process_c(c):\n        if c.isalpha():\n            if c in 'aeiouAEIOU':\n                return chr(ord(c)-2) if c.isupper() else chr(ord(c)-2+32)\n            else:\n                return c.upper() if c.islower() else c.lower()\n        else:\n            return c\n\n    # function to perform cyclic permutation\n    def cyclic_shift(seq,offset):\n        return seq[offset:]+seq[:offset]\n\n    # process each character and form a new string\n    s = ''.join([process_c(c) for c in s])\n    return ''.join([cyclic_shift(s[i:i+3],2) for i in range(0, len(s), 3)])\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef encode_cyclic_shift(s):\n    # Mapping between vowels and their encoded counterparts\n    encoding_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    \n    # Swap case and replace vowels\n    encoded = ''.join(encoding_map[ch] if ch in 'aeiouAEIOU' else ch.swapcase() for ch in s)\n    \n    # Group into 3-character segments and cycle\n    encoded = ''.join(chars[-1] + ''.join(chars[:-1]) for chars in [encoded[i: i + 3] for i in range(0, len(encoded), 3)])\n    \n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_str):\n    def swap_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def replace_vowel(ch):\n        if ch in 'aeiouAEIOU':\n            if ch.islower():\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    def cycle_group(group):\n        return group[1:] + group[0]\n\n    processed_str = ''.join(map(swap_case, input_str))\n    processed_str = ''.join(map(replace_vowel, processed_str))\n\n    groups = [processed_str[i:i+3] for i in range(0, len(processed_str), 3)]\n    encoded_str = ''.join(map(cycle_group, groups))\n\n    return encoded_str\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    swapped = ''.join(c.lower() if c in lower else c.upper() for c in s)\n    vowels = 'aeiouAEIOU'\n    encoded = ''.join(c if c not in vowels else chr(ord(c) + 2) if c.islower() else chr(ord(c) - 2) for c in swapped)\n    grouped_encoded = ''.join(encoded[i:i+3] for i in range(0, len(encoded), 3))\n    cyclic_shifted = ''.join(grouped_encoded[i+1:] + grouped_encoded[i] for i in range(len(grouped_encoded)))\n    return cyclic_shifted\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiouAEIOU'\n    new_s = ''\n    for c in s:\n        if c in vowels:\n            if c.isupper():\n                c = chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                c = chr((ord(c) - 97 + 2) % 26 + 97)\n        new_s += c\n    encoded_s = ''\n    for i in range(0, len(new_s), 3):\n        group = new_s[i:i+3]\n        encoded_s += group[1:] + group[0]\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Swap case of string\n    s = s.swapcase()\n    \n    # Replace vowels with 2 positions ahead vowels\n    s = s.replace('a', 'e').replace('e', 'i').replace('i', 'o').replace('o', 'u').replace('u', 'a')\n    s = s.replace('A', 'E').replace('E', 'I').replace('I', 'O').replace('O', 'U').replace('U', 'A')\n    \n    # Group characters into 3s and cycle\n    result = ''\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        if group:\n            group = group[-1] + group[:-1]\n        result += group\n        \n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Changes every letter's case in the string\n    s = s.swapcase()\n\n    # Alters each vowel in the modified string to the next vowel two places forward.\n    s = s.translate(str.maketrans('aeiouAEIOU', 'eiouaEIOUA'))\n\n    # Divides the transformed string into three-character chunks and rotates each chunk by shifting the initial character to the chunk's end.\n    s = ''.join([s[i-2:i+1][::-1] for i in range(2, len(s), 3)])\n\n    return s\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    return {\n        'a': 'e',\n        'e': 'i',\n        'i': 'o',\n        'o': 'u',\n        'u': 'a',\n        'A': 'E',\n        'E': 'I',\n        'I': 'O',\n        'O': 'U',\n        'U': 'A',\n    }.get(c, c)\n\ndef encode_cyclic_shift(s):\n    # Step 1: Toggle case for each character in the string\n    s = ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    # Step 2: Replace each vowel with the next two steps away\n    s = ''.join(shift_vowel(c) for c in s)\n    # Step 3: Split into chunks of 3, rotate each chunk\n    return ''.join(c for chunk in [s[i:i+3] for i in range(0, len(s), 3)] for c in chunk[1:] + chunk[0])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower_upper_s = ''.join([' ' if c.isspace() else c.lower() if c.isalpha() and c in 'aeiou' else c.upper() for c in s])\n    next_vowels_s = ''.join([c if c not in 'aeiou' else {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}[c] for c in lower_upper_s])\n    chunks_s = [next_vowels_s[i:i+3] for i in range(0, len(next_vowels_s), 3)]\n    chunks_shifted_s = ''.join([chunk[1:] + chunk[0] for chunk in chunks_s])\n    return chunks_shifted_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiou'\n    encode_vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    for k, v in encode_vowels.items():\n        s = s.replace(k, v)\n    chunks = [s[i:i+3] for i in range(0, len(s), 3)]\n    encoded_chunks = [chunk[1:] + chunk[0] for chunk in chunks]\n    return ''.join(encoded_chunks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Change case of string\n    s = s.swapcase()\n\n    # Map for next vowel\n    vowel_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n\n    # Replace vowels with next two vowels\n    s = ''.join([vowel_map[char] if char in vowel_map else char for char in s])\n\n    # Split into chunks of three, rotate each chunk\n    s = ''.join([chunk[-1]+chunk[:-1] for chunk in [s[i:i+3] for i in range(0, len(s), 3)]])\n\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Mapping between vowels and their encoded counterparts\n    encoding_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    \n    # Toggle case and substitute vowels\n    encoded = ''.join(encoding_map[ch] if ch in 'aeiouAEIOU' else ch.swapcase() for ch in s)\n    \n    # Split into blocks of three characters, and cycle each block\n    blocks = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    cycled_blocks = [block[1:] + block[0] for block in blocks]\n    \n    # Join back together\n    encoded = ''.join(cycled_blocks)\n    \n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(input_str):\n    def toggle_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def shift_vowel(char):\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            if char == 'u':\n                return 'a'\n            else:\n                return chr(ord(char) + 2)\n        else:\n            return char\n\n    def cyclic_shift(block):\n        return block[1:] + block[0]\n\n    input_encoded = ''.join(cyclic_shift(input_str[i:i+3]) for i in range(0, len(input_str), 3))\n    output_encoded = ''.join(toggle_case(shift_vowel(char)) for char in input_encoded)\n\n    return output_encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    encoded = []\n    for i, char in enumerate(s):\n        if char in lower:\n            if char in vowels:\n                char = lower[(lower.index(char) + 2) % 26]\n            else:\n                char = upper[lower.index(char) % 26]\n        elif char in upper:\n            if char in vowels:\n                char = upper[(upper.index(char) + 2) % 26]\n            else:\n                char = lower[upper.index(char) % 26]\n        encoded.append(char)\n        if (i + 1) % 3 == 0:\n            encoded.insert(i - 2, encoded[i - 2])\n            del encoded[i - 2]\n    return ''.join(encoded)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiouAEIOU'\n    substitutions = str.maketrans('aeiouAEIOU', 'eiouaEIOUA')\n    s = s.translate(substitutions)\n    s = ''.join([s[i-3 if i-3>=0 else len(s)+i-3:i]+s[i]+s[i+1 if i+1<len(s) else i+1-len(s)] for i in range(len(s))][::3])\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Toggle case of each character\n    s = s.swapcase()\n\n    # Substitute each vowel with the vowel two letters forward in the alphabet\n    s = s.replace('A', 'C').replace('E', 'G').replace('I', 'K').replace('O', 'Q').replace('U', 'W').replace('Y', 'Z').replace('a', 'c').replace('e', 'g').replace('i', 'k').replace('o', 'q').replace('u', 'w').replace('y', 'z')\n\n    # Split the string into blocks of three characters\n    blocks = [s[i:i+3] for i in range(0, len(s), 3)]\n\n    # Cyclic shift: move the first character to the back\n    encoded_blocks = [block[1:] + block[0] for block in blocks]\n\n    # Join the blocks back together\n    encoded_s = ''.join(encoded_blocks)\n\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    s = s.translate(\n        str.maketrans('aeiou', 'cghjl')\n    )\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = ['{}{}'.format(x[1:], x[0]) for x in s]\n    return ''.join(s)\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr((ord(c) - 97 + 2) % 26 + 97)\n    return c\n\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    s = \"\".join(shift_vowel(c) for c in s)\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [list(i) for i in s]\n    s = [(i[1:]+i[0]) for i in s]\n    s = [\"\".join(i) for i in s]\n    return \"\".join(s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower_s = s.lower()\n    result = ''\n    shift = {'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w'}\n    for i in range(len(lower_s)):\n        if lower_s[i] in shift:\n            result += shift[lower_s[i]]\n        else:\n            result += lower_s[i]\n    result_split = [result[i:i+3] for i in range(0, len(result), 3)]\n    result_final = [w[1:] + w[0] for w in result_split]\n    result_str = ''.join(result_final)\n    return result_str\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Step 1: Convert the case of each alphabet in the string\n    s = s.swapcase()\n    \n    # Step 2: Shift each vowel ahead by two positions in the alphabet\n    vowels = 'aeiou'\n    s = ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in vowels else c for c in s)\n    \n    # Step 3: Split the string into trios and move the first character to the end\n    s = s[1:] + s[0]\n    \n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Convert case of string\n    s = s.swapcase()\n\n    # Shift vowels two positions ahead in alphabet\n    vowels = 'aeiou'\n    s = ''.join([chr((ord(i) - 97 + 2) % 26 + 97) if i in vowels else chr((ord(i) - 97) % 26 + 97) for i in s])\n\n    # Segment string into trios and reposition first character to end\n    trios = [s[i:i+3] for i in range(0, len(s), 3)]\n    for i in range(len(trios)):\n        trios[i] = trios[i][1:] + trios[i][0]\n    s = ''.join(trios)\n    \n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Flip the case of all alphabetic characters\n    s = ''.join(c.lower() if c.isalpha() and c.lower() in 'aeiou' else c.upper() if c.isalpha() else c for c in s)\n\n    # Shift each vowel in this altered string forward by two characters in the alphabet\n    s = ''.join(chr((ord(c) - 97 + 2) % 26 + 97) if c.lower() in 'aeiou' else c for c in s)\n\n    # Break the string into groups of three characters\n    # with each group having the first character moved to its end\n    return ''.join(s[i+1:i+4] + s[i] for i in range(0, len(s), 3))\n\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in ['a', 'e', 'i', 'o', 'u']:\n        return chr((ord(c) - 97 + 2) % 26 + 97)\n    return c\n\ndef encode_cyclic_shift(s):\n    s = ''.join([shift_vowel(c) if c.isalpha() else c for c in s])[::-1]\n    return ''.join([s[i:i+3]+s[i] for i in range(0, len(s), 3)])\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shift_dict = dict(zip(lower, lower[2:] + lower[:2]))\n    shift_dict.update(dict(zip(upper, upper[2:] + upper[:2])))\n\n    vowel_dict = {'a': 'c', 'e': 'g', 'i': 'm', 'o': 'q', 'u': 't', \n                  'A': 'C', 'E': 'G', 'I': 'M', 'O': 'Q', 'U': 'T'}\n\n    encoded = ''.join(shift_dict.get(c, c) if c in shift_dict else vowel_dict.get(c, c) for c in s)\n    result = ''.join(encoded[i:i+3] for i in range(0, len(encoded), 3))\n    return result\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiou'\n    encode_vowels = {'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    for vowel in vowels:\n        s = s.replace(vowel, encode_vowels[vowel])\n    \n    encoded_s = ''\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        encoded_s += group[1:] + group[0]\n    \n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Flip the case of alphabetic characters\n    s = s.swapcase()\n    \n    # Create a dictionary linking vowels to shifted vowels\n    vowels_coded = {'a': 'c', 'e': 'g', 'i': 'm', 'o': 'q', 'u': 't', 'A': 'C', 'E': 'G', 'I': 'M', 'O': 'Q', 'U': 'T'}\n    \n    # Replace vowels with shifted vowels\n    s = \"\".join([vowels_coded[c] if c in vowels_coded else c for c in s])\n    \n    # Break the string into groups of three and move the first character to the end of each group\n    encoded = \"\".join([s[i-3:i][::-1] + s[i] for i in range(3, len(s)+3, 3)])\n    \n    return encoded\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Step 1: Switching each character\u2019s case\n    s = s.swapcase()\n\n    # Step 2: Replace vowels with the vowel two steps later\n    s = s.translate(str.maketrans('aeiouAEIOU', 'eiouaEIOUA'))\n\n    # Step 3: Divide into groups of three and shift first character\n    encoded_s = []\n    for i in range(0, len(s), 3):\n        group = list(s[i:i+3])\n        group.append(group.pop(0))\n        encoded_s.extend(group)\n\n    return ''.join(encoded_s)\n",
                false
            ],
            [
                "\ndef shift_lower_to_upper(str):\n    return str.swapcase()\n\ndef shift_upper_to_lower(str):\n    return str.swapcase()\n\ndef encode_cyclic_shift(str):\n    str = shift_lower_to_upper(str)\n    str = str.replace('A', 'E')\n    str = str.replace('E', 'I')\n    str = str.replace('I', 'O')\n    str = str.replace('O', 'U')\n    str = str.replace('U', 'A')\n    str = str.replace('a', 'e')\n    str = str.replace('e', 'i')\n    str = str.replace('i', 'o')\n    str = str.replace('o', 'u')\n    str = str.replace('u', 'a')\n    str = [str[i:i+3] for i in range(0, len(str), 3)]\n    for i in range(len(str)):\n        str[i] = str[i][-1] + str[i][:-1]\n    str = ''.join(str)\n    return str\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    switcher = str.maketrans(lower + upper, upper + lower)\n    s = s.translate(switcher)\n    s = s.replace('a', 'e').replace('e', 'i').replace('i', 'o').replace('o', 'u').replace('u', 'a')\n    s = s.replace('A', 'E').replace('E', 'I').replace('I', 'O').replace('O', 'U').replace('U', 'A')\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [s[i-1] + s[i][1:] + s[i][0] for i in range(len(s))]\n    s = ''.join(s)\n    return s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    s = s.swapcase()\n    vowels = 'aeiouAEIOU'\n    new_s = ''\n    for c in s:\n        if c in vowels:\n            new_s += vowels[(vowels.index(c) + 2) % len(vowels)]\n        else:\n            new_s += c\n    \n    encoded_s = ''\n    for i in range(0, len(new_s), 3):\n        group = new_s[i:i+3]\n        if len(group) == 3:\n            encoder = group[1:] + group[0]\n            encoded_s += encoder\n    return encoded_s\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Step 1: Switch each character's case\n    s = ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n\n    # Step 2: Replace every vowel with the vowel two steps later in the alphabet\n    vowels = 'aeiouAEIOU'\n    encoded_vowels = ''.join([chr((ord(c) - 97 + 2) % 26 + 97) if c in vowels[::2] else\n                              chr((ord(c) - 65 + 2) % 26 + 65) if c in vowels[1::2] else c\n                              for c in s])\n\n    # Step 3: Divide the string into groups of three characters, and each group is cycled by relocating the first character to the rear of the group\n    return ''.join([encoded_vowels[i+1:i+4] + encoded_vowels[i] for i in range(0, len(encoded_vowels), 3)])\n\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        return ''.join([alphabet[vowels.find(c)+2] if c in vowels else c for c in s])\n\n    m = vowel_change(switch_case(s))\n    return ''.join([m[i:i+3][::-1] if len(m[i:i+3])==3 else m[i:i+3] for i in range(0, len(m), 3)])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the helper functions\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        v = 'AEIOUaeiou'\n        if c in vowels:\n            return v[vowels.index(c) + 2]\n        else:\n            return c\n\n    # Apply the helper functions to s\n    m = ''.join(switch_case(c) for c in s)\n    m = ''.join(vowel_change(c) for c in m)\n\n    # Split m into groups of three characters\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n\n    # For each group of exactly three characters, move the first character to the end\n    for i in range(len(groups)):\n        if len(groups[i]) == 3:\n            groups[i] = groups[i][1:] + groups[i][0]\n\n    # Concatenate the modified groups back into a single string\n    m = ''.join(groups)\n\n    return m\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        return ''.join([{\n            'a': 'c', 'c': 'e', 'e': 'g', 'g': 'i', 'i': 'k',\n            'k': 'm', 'm': 'o', 'o': 'q', 'q': 'u', 'u': 'a',\n            'A': 'C', 'C': 'E', 'E': 'G', 'G': 'I', 'I': 'K',\n            'K': 'M', 'M': 'O', 'O': 'Q', 'Q': 'U', 'U': 'A'\n        }.get(c, c) for c in s])\n\n    m = switch_case(s)\n    m = vowel_change(m)\n    m = ''.join([m[i:i+3][::(-1 if len(m[i:i+3]) == 3 else 1)] for i in range(0, len(m), 3)])\n    return m\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s: str) -> str:\n    def switch_case(str: str) -> str:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in str)\n\n    def vowel_change(str: str) -> str:\n        vowels = 'aeiouAEIOU'\n        return ''.join('a' if c == 'u' else 'e' if c == 'e' else 'i' if c == 'o' else 'o' if c == 'a' else 'u' if c == 'i' else c for c in str)\n\n    m = vowel_change(switch_case(s))\n    return ''.join(m[i:i+3] if len(m[i:i+3]) == 3 else m[i-1:i+2] for i in range(0, len(m), 3))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        return \"\".join(chr(ord(c)+2) if c in vowels else c for c in s)\n\n    m = vowel_change(switch_case(s))\n    return \"\".join(g[1:] + g[0] for g in zip(*[iter(m)]*3))\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n    def vowel_change(s):\n        vowels = 'aeiou'\n        return ''.join([c if c not in vowels else chr((ord(c) - 97 + 2) % 26 + 97) for c in s])\n    m = vowel_change(switch_case(s))\n    return ''.join([c[-1:] + c[:-1] if len(c)==3 else c for c in [m[i:i+3] for i in range(0, len(m), 3)]])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # Define the switch_case function\n    def switch_case(s):\n        result = \"\"\n        for char in s:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\n    # Define the vowel_change function\n    def vowel_change(s):\n        result = \"\"\n        vowels = \"aeiou\"\n        for char in s:\n            if char.lower() in vowels:\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    # Transform the input string using switch_case\n    s = switch_case(s)\n\n    # Apply vowel_change on the outcome\n    s = vowel_change(s)\n\n    # Divide into segments each comprising three characters\n    segments = [s[i:i+3] for i in range(0, len(s), 3)]\n\n    # For each segment, rotate so the first character ends up last\n    rotated_segments = []\n    for segment in segments:\n        if len(segment) == 3:\n            rotated_segments.append(segment[1:] + segment[0])\n        else:\n            rotated_segments.append(segment)\n\n    # Concatenate the segments and return the result\n    return ''.join(rotated_segments)\n",
                true
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = []\n        for c in s:\n            if c in vowels:\n                new_s.append(chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65))\n            else:\n                new_s.append(c)\n        return ''.join(new_s)\n\n    m = vowel_change(switch_case(s))\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(segments)):\n        if len(segments[i]) == 3:\n            segments[i] = segments[i][1:] + segments[i][0]\n    return ''.join(segments)\n",
                true
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in s])\n\ndef vowel_change(s):\n    return ''.join([chr((ord(c)-ord('a')+2)%26 + ord('a')) if c in 'aeiouAEIOU' else c for c in s])\n\ndef encode_cyclic_shift(s):\n    m = vowel_change(switch_case(s))\n    segs = [m[i:i+3] for i in range(0, len(m), 3)]\n    segs = [seg[-1] + seg[:-1] for seg in segs]\n    return ''.join(segs)\n\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(c if c.lower() not in vowels else chr((ord(c) - 97 + 2) % 26 + 97) for c in s)\n\n    m = vowel_change(switch_case(s))\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    return \"\".join(segment[1:] + segment[0] for segment in segments)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])\n    def vowel_change(s):\n        vowels = 'aeiou'\n        return ''.join([chr((ord(ch) - ord('a') + 2) % 26 + ord('a')) if ch.lower() in vowels else ch for ch in s])\n    \n    m = vowel_change(switch_case(s))\n    triplets = [m[i:i+3] for i in range(0, len(m), 3)]\n    new_triplets = [triplet[1:] + triplet[0] for triplet in triplets if len(triplet) == 3] + [triplets[-1][1:] + triplets[-1][0]]\n    return ''.join(new_triplets)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def vowel_change(s):\n        vowels = 'aeiou'\n        return ''.join([chr((ord(c) - 97 + 2) % 26 + 97) if c in vowels else c for c in s])\n\n    def trios(s):\n        return [s[i:i+3] for i in range(0, len(s), 3)]\n\n    def cyclic_shift(trios):\n        return ''.join([t[:1] + t[2:] + t[1] for t in trios])\n\n    return cyclic_shift(trios(vowel_change(switch_case(s))))\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for c in s:\n            if c in vowels:\n                new_s += chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            elif c in vowels.upper():\n                new_s += chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                new_s += c\n        return new_s\n\n    m = vowel_change(switch_case(s))\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    result = ''\n    for trio in trios:\n        if len(trio) == 3:\n            result += trio[1:] + trio[0]\n        else:\n            result += trio\n    return result\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in s])\n\ndef vowel_change(s):\n    return ''.join([chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in 'aeiou' else c for c in s])\n\ndef encode_cyclic_shift(s):\n    s = switch_case(s)\n    s = vowel_change(s)\n    new_s = [s[i:i+3] for i in range(0, len(s), 3)]\n    for i in range(len(new_s)):\n        if len(new_s[i]) == 3 and new_s[i][0].isalpha():\n            new_s[i] = new_s[i][1:] + new_s[i][0]\n    return ''.join(new_s)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(chr((ord(c) - 97 + 2) % 26 + 97) if c in vowels else c for c in s)\n\n    m = vowel_change(switch_case(s))\n\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    result_trios = [trio[1:] + trio[0] if len(trio) > 1 else trio for trio in trios]\n\n    return \"\".join(result_trios)\n",
                false
            ],
            [
                "\ndef switch_case(c):\n    if c.islower():\n        return c.upper()\n    else:\n        return c.lower()\n\ndef vowel_change(c):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c.lower() in vowels:\n        return chr(((ord(c) - ord('a') + 2) % 5) + ord('a'))\n    else:\n        return c\n\ndef encode_cyclic_shift(s):\n    m = ''.join(switch_case(c) for c in s)\n    m = ''.join(vowel_change(c) for c in m)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)):\n        m[i] = m[i][1:] + m[i][0]\n    m = ''.join(m)\n    return m\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if 'a' <= ch <= 'z':\n        return ch.upper() if ch.islower() else ch.lower()\n    return ch\n\ndef vowel_change(ch):\n    if ch in 'aeiou':\n        return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n    return ch\n\ndef encode_cyclic_shift(s):\n    m = ''.join([switch_case(ch) for ch in s])\n    m = ''.join([vowel_change(ch) for ch in m])\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)):\n        m[i] = m[i][1:] + m[i][0]\n    return ''.join(m)\n",
                false
            ],
            [
                "\ndef switch_case(char):\n    if char.isupper():\n        return char.lower()\n    else:\n        return char.upper()\n\ndef vowel_change(char):\n    vowels = 'aeiou'\n    if char.lower() in vowels:\n        return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n    else:\n        return char\n\ndef encode_cyclic_shift(s):\n    m = ''.join(switch_case(c) for c in s)\n    m = ''.join(vowel_change(c) for c in m)\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    chunks = [chunks[0][1:] + chunks[0][0]] + chunks[1:]\n    return ''.join(chunks)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    # Apply helper functions to string\n    m = \"\".join(vowel_change(switch_case(c)) for c in s)\n\n    # Split into chunks of three, cycling first character to end\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(chunks)):\n        if len(chunks[i]) == 3:\n            chunks[i] = chunks[i][1:] + chunks[i][0]\n    m = \"\".join(chunks)\n\n    return m\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(c if c.lower() not in vowels else chr((ord(c) - 97 + 2) % 26 + 97) for c in s)\n\n    m = vowel_change(switch_case(s))\n    split_m = [m[i:i + 3] for i in range(0, len(m), 3)]\n    \n    # Cycle the first character to the end\n    split_m = [c[1:] + c[0] for c in split_m]\n\n    return \"\".join(split_m)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])\n    def vowel_change(s):\n        vowels = 'aeiou'\n        return ''.join([chr((ord(ch) - ord('a') + 2) % 26 + ord('a')) if ch.lower() in vowels else ch for ch in s])\n    \n    m = vowel_change(switch_case(s))\n    triplets = [m[i:i+3] for i in range(0, len(m), 3)]\n    new_triplets = [triplet[1:] + triplet[0] for triplet in triplets if len(triplet) == 3] + [triplet for triplet in triplets if len(triplet) != 3]\n    return ''.join(new_triplets)\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    # internal helper function to alter case\n    def switch_case(s):\n        result = \"\"\n        for char in s:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        return result\n\n    # internal helper function to alter vowels\n    def vowel_change(s):\n        result = \"\"\n        for char in s:\n            if char.lower() in \"aeiou\":\n                if char.islower():\n                    result += chr((ord(char) - 97 - 2) % 26 + 97)\n                else:\n                    result += chr((ord(char) - 65 - 2) % 26 + 65)\n            else:\n                result += char\n        return result\n\n    # switching case\n    s = switch_case(s)\n\n    # changing vowels\n    s = vowel_change(s)\n\n    # rearranging characters\n    s = [s[i:i + 3] for i in range(0, len(s), 3)]\n    s = [''.join(s[:-1]) + s[-1][0] + s[-1][1] + s[-1][2]] + s[:-1]\n    return ''.join(s)\n\ns = \"Hello World\"\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for c in s:\n            if c in vowels:\n                new_s += chr(ord(c)+2) if c.islower() else chr(ord(c)-2)\n            else:\n                new_s += c\n        return new_s\n\n    m = vowel_change(switch_case(s))\n\n    if len(m) % 3 != 0:\n        m += ' ' * (3 - len(m) % 3)\n\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    m = ''.join(groups)\n\n    if len(s) % 3 == 0:\n        m = m[-1] + m[:-1]\n\n    return m\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in s])\n\ndef vowel_change(s):\n    return ''.join([chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in 'aeiou' else c for c in s])\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    if len(m) % 3 == 0:\n        m = m[1::] + m[0]\n    return m\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(chr((ord(c) - 97 + 4) % 26 + 97) if c in vowels else c for c in s)\n\n    m = vowel_change(switch_case(s))\n\n    if len(m) % 3 == 0:\n        m = m[-1:] + m[:-1]\n    return m\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n\ndef vowel_change(s):\n    vowels = 'aeiouAEIOU'\n    new_s = []\n    for c in s:\n        if c in vowels:\n            new_s.append(chr(ord(c)+2))\n        else:\n            new_s.append(c)\n    return ''.join(new_s)\n\ndef encode_cyclic_shift(s):\n    s = switch_case(s)\n    s = vowel_change(s)\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    if len(groups[-1]) < 3:\n        groups[-1] += ' ' * (3 - len(groups[-1]))\n    groups = groups[1:] + [groups[0]]\n    return ''.join(groups)\n",
                false
            ],
            [
                "\ndef switch_case(ch):\n    if ch.isupper():\n        return ch.lower()\n    else:\n        return ch.upper()\n\ndef vowel_change(ch):\n    vowels = 'aeiou'\n    if ch.lower() in vowels:\n        return chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n    else:\n        return ch\n\ndef encode_cyclic_shift(s):\n    m = ''.join(map(vowel_change, s))\n    m = ''.join(map(switch_case, m))\n    groups = [ m[i:i+3] for i in range(0, len(m), 3)]\n    groups = [groups[-1]] + groups[:-1]\n    return ''.join(groups)\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    new_s = \"\"\n    for char in s:\n        if char.isupper():\n            new_s += char.lower()\n        else:\n            new_s += char.upper()\n    return new_s\n\ndef vowel_change(s):\n    new_s = \"\"\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            new_s += chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            new_s += char\n    return new_s\n\ndef encode_cyclic_shift(s):\n    m = switch_case(s)\n    m = vowel_change(m)\n    groups = [m[i:i+3] for i in range(0,len(m),3)]\n    cycled_groups = [group[1:] + group[0] for group in groups]\n    result = \"\".join(cycled_groups)\n    return result\n",
                false
            ],
            [
                "\ndef switch_case(s):\n    return s.swapcase()\n\ndef vowel_change(s):\n    return s.translate(str.maketrans('aeiouAEIOU', 'cdefoCDEFOD'))\n\ndef encode_cyclic_shift(s):\n    m = vowel_change(switch_case(s))\n    return ''.join([m[i-2:i+1] if i % 3 == 0 else m[:i%3] + m[i:i+3] for i in range(len(m))])\n",
                false
            ],
            [
                "\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(c.lower() if c.isupper() else c.upper() for c in s)\n\n    def vowel_change(s):\n        vowels = \"aeiou\"\n        return \"\".join(vowels[(vowels.index(c)+2)%5] if c in vowels else c for c in s)\n\n    m = vowel_change(switch_case(s))\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    groups = [groups[-1]] + groups[:-1]\n\n    return \"\".join(groups)\n",
                false
            ]
        ]
    },
    "4": {
        "level 1": [
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiouAEIOU\"\n    s_reversed = s[::-1]\n    new_s = \"\"\n    for ch in s_reversed:\n        if ch in vowels:\n            new_s += chr(ord(ch) + 2)\n        elif ch.isalpha():\n            new_s += ch.lower() if ch.isupper() else ch.upper()\n        else:\n            new_s += ch\n    return new_s\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    replace_vowels = 'cdfgh'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += replace_vowels[vowels.find(char.lower())]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in s) else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    lower_vowels_new = 'cdfgj'\n    upper_vowels_new = 'CDFGJ'\n    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char in lower_vowels:\n                new_s += lower_vowels_new[lower_vowels.index(char)]\n            else:\n                new_s += upper_vowels_new[upper_vowels.index(char)]\n        else:\n            new_s += char\n    result = new_s[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    replaced_vowels = \"cde\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += replaced_vowels[vowels.find(char.lower())]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    else:\n        return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    has_letters = False\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            new_char = char.lower() if char.isupper() else char.upper()\n            if new_char in vowels:\n                result += chr(ord(new_char) - 32) if char.isupper() else chr(ord(new_char) + 32)\n            else:\n                result += new_char\n        else:\n            result += char\n    if not has_letters:\n        return s[::-1]\n    else:\n        return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n            if char.lower() in vowels:\n                result = result[:-1] + chr(ord(char) + 1)\n        else:\n            result += char\n    if result == \"\":\n        result = s[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    s = list(s)\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n            if s[i] in vowels:\n                s[i] = chr((ord(s[i]) - 96) % 26 + 97 + 1)\n\n    return ''.join(s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    lower_vowels_flipped = 'AEIOU'\n    upper_vowels_flipped = 'aeiou'\n    new_s = \"\"\n\n    for char in s:\n        if char in lower_vowels:\n            new_s += lower_vowels_flipped[lower_vowels.index(char)]\n        elif char in upper_vowels:\n            new_s += upper_vowels_flipped[upper_vowels.index(char)]\n        elif char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n\n    if not new_s:\n        new_s = s[::-1]\n        \n    return new_s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    replaced_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                replaced_string += chr((ord(char.lower()) - 96) % 26 + 98)\n            else:\n                replaced_string += char.upper() if char.islower() else char.lower()\n        else:\n            replaced_string += char\n    return replaced_string[::-1] if not replaced_string.isalpha() else replaced_string\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for symbol in s:\n        if symbol.isalpha():\n            result += symbol.swapcase() if symbol.lower() not in vowels else chr((ord(symbol) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            result += symbol\n    return result[::-1] if not result else result\n\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord(char)+2)\n            else:\n                result += chr(ord(char)-2)\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in 'aeiou':\n        if c.islower():\n            return chr((ord(c) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 5 + ord('A'))\n    else:\n        return c\n\ndef solve_with_voucher(s):\n    if any(char.isalpha() for char in s):\n        return ''.join(shift_vowel(c) for c in reversed(s))\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    lower_s = s.lower()\n    result = ''\n    for char in lower_s:\n        if char in 'aeiou':\n            if char == 'u':\n                result += 'a'\n            elif char == 'e':\n                result += 'i'\n            elif char == 'i':\n                result += 'o'\n            else:\n                result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in s) else result\n\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = \"aeiou\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result.append((chr((ord(char) - 97 + 2) % 26 + 97)).upper() if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97))\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n    return \"\".join(result) if any(char.isalpha() for char in s) else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_voucher(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in result) else result\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord(char.lower()) + 2) if char.isupper() else chr(ord(char) + 2)\n            else:\n                result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in result) else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the vowels\n    vowels = \"aeiou\"\n\n    # Convert all letters to opposite case, change vowels two letters forward in the alphabet\n    result = \"\".join([chr(ord(c) ^ 32) if c.lower() in vowels else chr(ord(c) - 1) if c.lower() not in vowels else c for c in s[::-1]])\n\n    # If no letters exist in the string, return it reversed\n    if not any(c.isalpha() for c in s):\n        result = s[::-1]\n\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_vowels = 'aeiou'\n    upper_vowels = 'AEIOU'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char in lower_vowels:\n                result += lower_vowels[(lower_vowels.index(char) + 2) % 5]\n            else:\n                result += upper_vowels[(upper_vowels.index(char) + 2) % 5]\n        else:\n            result += char\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    result = \"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.lower() == 'u':\n                    result += 'a'\n                else:\n                    result += chr(ord(char) + 2)\n            else:\n                if char == char.upper():\n                    result += chr(ord(char) + 32)\n                else:\n                    result += chr(ord(char) - 32)\n        else:\n            result += char\n\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for symbol in s:\n        if symbol.isalpha():\n            if symbol in vowels:\n                result += chr((ord(symbol) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(symbol) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += symbol\n    return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n            result += vowels[(vowels.index(char.lower()) + 2) % 5] if char.lower() in vowels else char\n        else:\n            result += char\n    return result[::-1] if not result else result\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    s = list(s)\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() in vowels:\n                s[i] = chr(((ord(s[i]) - 97 + 4) % 26) + 97)\n            else:\n                s[i] = chr(((ord(s[i]) - 97 + 1) % 26) + 97)\n            s[i] = s[i].swapcase()\n\n    if not any(c.isalpha() for c in s):\n        return ''.join(s[::-1])\n    else:\n        return ''.join(s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_case_vowels = 'aeiou'\n    upper_case_vowels = 'AEIOU'\n    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char in lower_case_vowels:\n                index = lower_case_vowels.index(char)\n                new_s += lower_case_vowels[(index + 2) % len(lower_case_vowels)]\n            else:\n                index = upper_case_vowels.index(char)\n                new_s += upper_case_vowels[(index + 2) % len(upper_case_vowels)]\n        else:\n            new_s += char\n    return new_s if new_s else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    s = list(s)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() in vowels:\n                s[i] = chr(ord(s[i]) + 2) if s[i].islower() else chr(ord(s[i]) - 2)\n            else:\n                s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n    s = ''.join(s)\n    return s[::-1] if s.isalpha() else s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for symbol in s:\n        if symbol.isalpha():\n            result += symbol.lower() if symbol != symbol.upper() else symbol.upper()\n            result += chr((ord(symbol) - ord('a') + 2) % 26 + ord('a')) if symbol.lower() in vowels else symbol\n        else:\n            result += symbol\n    if len(result) == len(s):\n        return result\n    else:\n        return result[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        elif char.lower() in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in result) else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    s = list(s)\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() in vowels:\n                s[i] = chr(((ord(s[i].lower()) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n\n    return ''.join(s)[::-1] if any(c.isalpha() for c in s) else ''.join(s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    lower_case_vowels = 'aeiou'\n    upper_case_vowels = 'AEIOU'\n    lower_case_letters = 'bcdfghjklmnpqrstvwxyz'\n    upper_case_letters = 'BCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for char in s:\n        if char in lower_case_letters:\n            result += lower_case_letters[lower_case_letters.index(char) - 1]\n        elif char in upper_case_letters:\n            result += upper_case_letters[upper_case_letters.index(char) - 1]\n        elif char in lower_case_vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result[::-1] if not any(c.isalpha() for c in result) else result\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    s = list(s)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() in vowels:\n                s[i] = chr(ord('a') + (ord(s[i].lower()) - 97 + 2) % 5)\n            else:\n                s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n    s = ''.join(s)\n    return s if any(c.isalpha() for c in s) else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.lower() if char.isupper() else char.upper()\n        elif char.lower() in vowels:\n            result += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result[::-1] if result.isalpha() else result\n",
                false
            ]
        ],
        "level 2": [
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowel(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2) if c.isupper() else chr(ord(c) + 2).lower()\n        else:\n            return c\n\n    reverse_string = \"\".join(map(lambda c: c.swapcase() if c.isalpha() else c, s))\n\n    replace_string = \"\".join(map(replace_vowel, reverse_string))\n\n    return replace_string\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the inner function\n    def replace_vowel(c):\n        vowels = 'aeiou'\n        if c in vowels:\n            return vowels[(vowels.index(c)+2) % len(vowels)]\n        else:\n            return c\n    \n    # Check if the string has any letters\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    # Transform each character in the string\n    s = [char if not char.isalpha() else replace_vowel(char.swapcase()) for char in s]\n    return ''.join(s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowel(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            return 'ei' if char.islower() else 'EI'\n        return char\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(replace_vowel(c) if c.isalpha() else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def replace_with_next_two_letters(c):\n        vowels = \"aeiou\"\n        if c.lower() in vowels:\n            if c.lower() == 'u':\n                return 'a'\n            else:\n                return vowels[vowels.index(c.lower()) + 2]\n        else:\n            return c\n\n    if s.isalpha():\n        return ''.join([switch_case(replace_with_next_two_letters(c)) for c in s])\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def replace_vowels(c):\n        if c.lower() in 'aeiou':\n            return chr((ord(c) - 32) % 26 + 65)\n        return c\n\n    if any(c.isalpha() for c in s):\n        return ''.join(replace_vowels(c) if c.isalpha() else c for c in s[::-1])\n    return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowel():\n        vowels = 'aeiou'\n        for i in range(len(s)):\n            if s[i].lower() in vowels:\n                s[i] = chr(ord(s[i]) + 1)\n        return s\n    \n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    \n    s = shift_vowel()\n    \n    if not any(c.isalpha() for c in s):\n        return ''.join(s)[::-1]\n    else:\n        return ''.join(s)\n\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() == 'a':\n        return 'z'\n    elif c.lower() == 'e':\n        return 'd'\n    elif c.lower() == 'i':\n        return 'h'\n    elif c.lower() == 'o':\n        return 'n'\n    elif c.lower() == 'u':\n        return 't'\n    else:\n        return chr(ord(c) - 1)\n\ndef solve_with_vowel(s):\n    has_letters = any(c.isalpha() for c in s)\n    new_str = \"\".join(c.swapcase() if c.isalpha() else shift_vowel(c) for c in s[::-1])\n    return new_str if has_letters else new_str[::-1]\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def swap_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def shift_vowel(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            return chr((ord(c) - 13) % 26 + 65)\n        else:\n            return c\n\n    modified = ''.join([swap_case(c) if c.isalpha() else shift_vowel(c) for c in s])\n    return modified[::-1] if not any(c.isalpha() for c in modified) else modified\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_letter(c):\n        # If the letter is not a vowel, return it as is.\n        if c.lower() not in 'aeiou':\n            return c\n        else:\n            shift = ord(c) + 1\n            # If the letter was lowercase and shifted to uppercase, wrap around.\n            if ord(c) < 97:\n                return chr(shift)\n            # If the letter was uppercase and shifted to lowercase, wrap around.\n            elif ord(c) > 90:\n                return chr(shift)\n            else:\n                return chr(shift)\n\n    result = ''.join([shift_letter(c) if c.isalpha() else c for c in s])\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def swap_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def shift_vowel(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            return chr(ord(c) - 1) if c.lower() != 'a' else 'z'\n        else:\n            return c\n\n    result = ''.join([swap_case(c) if c.isalpha() else c for c in s])\n    result = ''.join([shift_vowel(c) for c in result])\n\n    if not any(c.isalpha() for c in result):\n        return result[::-1]\n\n    return result\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def advance_vowel(v):\n        if v in 'aeiou':\n            return chr((ord(v) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return v\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(advance_vowel(c.lower() if c.isalpha() else c) for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the embedded function\n    def advance_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    # Check if the string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n\n    # Adjust the string\n    s = ''.join([advance_vowel(c) if c.isalpha() else c for c in s])\n\n    # Invert the string if it does not contain any letters\n    return s[::-1] if not contains_letters else s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def _is_vowel(c):\n        return c.lower() in 'aeiou'\n\n    def _make_advance(c):\n        if _is_vowel(c):\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n\n    ret = ''.join(_make_advance(c) if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' else c for c in s)\n    return ret[::-1] if ret == '' else ret\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def advance_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.isupper():\n                c = chr((ord(c) - 65 + 2) % 26 + 65)\n            else:\n                c = chr((ord(c) - 97 + 2) % 26 + 97)\n        return c\n\n    s = ''.join([advance_vowel(switch_case(c)) if c.isalpha() else c for c in s])\n    if not any(c.isalpha() for c in s):\n        s = s[::-1]\n\n    return s\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    result = ''\n    for symbol in s:\n        if symbol.isalpha():\n            symbol = symbol.lower()\n            if symbol in vowels:\n                symbol = chr((ord(symbol) - 97 + 2) % 26 + 97)\n            else:\n                symbol = chr((ord(symbol) - 97 - 2) % 26 + 97)\n            result += symbol.upper() if s[0] != symbol.upper() else symbol.lower()\n        else:\n            result += symbol\n    return result[::-1] if not result.isalpha() else result\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_and_move_vowel(c):\n        if c.isalpha():\n            if c.lower() in 'aeiou':\n                c = chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            c = c.lower() if c.isupper() else c.upper()\n        return c\n    \n    if any(c.isalpha() for c in s):\n        return ''.join(invert_and_move_vowel(c) for c in s)\n    else:\n        return s[::-1]\n\nreturn solve_with_vowel\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    def invert_case_and_move_vowel(c):\n        # If the character is not a letter or it's a space, return it as is.\n        if not c.isalpha() or c == ' ':\n            return c\n        # If the character is uppercase, convert it to lowercase and move vowel two letters forward.\n        if c.isupper():\n            if c.lower() in vowels:\n                return chr(ord('a') + (vowels.index(c.lower())+2)%5)\n            return c.lower()\n        # If the character is lowercase, convert it to uppercase and move vowel two letters forward.\n        else:\n            if c in vowels:\n                return chr(ord('A') + (vowels.index(c)+2)%5)\n            return c.upper()\n\n    transformed_string = \"\".join(invert_case_and_move_vowel(c) for c in s)\n    \n    # If there are no alphabetic characters in the string, reverse the entire string.\n    if not any(c.isalpha() for c in transformed_string):\n        transformed_string = transformed_string[::-1]\n    \n    return transformed_string\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_case(c):\n        if 'a' <= c <= 'z':\n            return c.upper() if c in 'aeiou' else c.lower()\n        elif 'A' <= c <= 'Z':\n            return c.lower() if c in 'AEIOU' else c.upper()\n        else:\n            return c\n\n    def move_vowel(c):\n        if c in 'aeiou':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif c in 'AEIOU':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    s = ''.join(move_vowel(invert_case(c)) for c in s)\n    return s[::-1] if not any(c.isalpha() for c in s) else s\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def transform_char(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            c = chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        return c.swapcase() if c.isalpha() else c\n\n    return ''.join(transform_char(c) for c in s)\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def invert_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def move_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.islower():\n                return chr(((ord(c) - ord('a') + 2) % 5) + ord('a'))\n            else:\n                return chr(((ord(c) - ord('A') + 2) % 5) + ord('A'))\n        else:\n            return c\n\n    trans = str.maketrans(''.join(map(move_vowel, map(invert_case, s))), s)\n    return s[::-1].translate(trans)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def increase_position(char):\n        vowels = 'aeiou'\n        alphabets = 'abcdefghijklmnopqrstuvwxyz'\n        if char.lower() in vowels:\n            return alphabets[(alphabets.index(char.lower()) + 2) % len(alphabets)]\n        return char\n\n    result = [increase_position(c) for c in s if c.isalpha()]\n    result = ''.join(result)\n\n    if not result:\n        return s[::-1]\n\n    return result\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    return chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in 'aeiou' else c\n\ndef solve_with_vowel(s):\n    s = \"\".join(shift_vowel(c.swapcase()) if c.isalpha() else c for c in s)\n    return s if any(c.isalpha() for c in s) else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def helper(c):\n        return chr((ord(c) - 97 + 2)%26 + 97) if c.isalpha() and c in 'aeiou' else c\n    s = ''.join([helper(c) if c.isalpha() else c for c in s])\n    return s[::-1] if not any([c.isalpha() for c in s]) else s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def is_vowel(c):\n        return c.lower() in 'aeiou'\n\n    def shift_vowel(c):\n        if is_vowel(c):\n            return chr((ord(c.lower()) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    has_alpha = False\n    result = ''\n    for c in s:\n        if not c.isalpha():\n            result += c\n        else:\n            has_alpha = True\n            shifted = shift_vowel(c)\n            if not is_vowel(shifted):\n                result += switch_case(shifted)\n            else:\n                result += shifted\n\n    if not has_alpha:\n        return s[::-1]\n    else:\n        return result\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def add_two(c):\n        vowels = \"aeiou\"\n        if c.lower() in vowels:\n            return chr(ord(c) + 2)\n        else:\n            return c\n\n    alphabetic = [add_two(c) for c in s if c.isalpha()]\n\n    if alphabetic:\n        s = ''.join(alphabetic)\n        if s.isalpha():\n            s = s.swapcase()\n        else:\n            s = s[::-1]\n    else:\n        s = s[::-1]\n\n    return s\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowel():\n        vowels = 'aeiou'\n        shifted_vowels = 'cieuo'\n        return dict(zip(vowels, shifted_vowels))\n\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(shift_vowel()[c.lower()] if c.lower() in shift_vowel() else c.swapcase() for c in s)\n",
                false
            ],
            [
                "\ndef shift_vowel(c):\n    if c.lower() in 'aeiou':\n        if c.islower():\n            return chr((ord(c) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 5 + ord('A'))\n    else:\n        return c\n\ndef solve_with_vowel(s):\n    res = ''\n    vowel_present = False\n    for c in s:\n        if c.isalpha():\n            vowel_present = True\n            res += shift_vowel(c)\n        else:\n            res += c\n    if not vowel_present:\n        return s[::-1]\n    else:\n        return res\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        def shift_vowels(c):\n            vowels = 'aeiou'\n            if c.lower() in vowels:\n                idx = vowels.index(c.lower())\n                return vowels[(idx+2) % len(vowels)] if c.isupper() else vowels[(idx+2) % len(vowels)].upper()\n            return c\n\n        return ''.join(shift_vowels(c) if c.isalpha() else c for c in s)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def switch_case(c):\n        if 'a' <= c <= 'z':\n            if c in 'aeiou':\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('a')) % 26 + ord('A'))\n        if 'A' <= c <= 'Z':\n            if c in 'AEIOU':\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('A')) % 26 + ord('a'))\n        return c\n\n    s = ''.join(switch_case(c) for c in s)\n    return s[::-1] if not any(c.isalpha() for c in s) else s\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def shift_vowels(c):\n        vowels = \"aeiou\"\n        lower_c = c.lower()\n        if lower_c in vowels:\n            return chr((ord(lower_c) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            return c\n\n    if len([c for c in s if c.isalpha()]) == 0:\n        return s[::-1]\n    return \"\".join([shift_vowels(c).upper() if c.isupper() else shift_vowels(c) for c in s])\n",
                false
            ]
        ],
        "level 3": [
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            new_ch = chr(ord(ch) + 2)\n            return new_ch\n        else:\n            return ch\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ch = ch.swapcase()\n            ch = vowel_change(ch)\n        ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = ''\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            if ch.islower():\n                return chr(ord(ch) + 2 - 26) if ord(ch) + 2 > 90 else chr(ord(ch) + 2)\n            else:\n                return chr(ord(ch) + 2 - 26) if ord(ch) + 2 > 122 else chr(ord(ch) + 2)\n        else:\n            return ch\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch in \"aeiouAEIOU\":\n            return chr(ord(ch) + 2) if ch.islower() else chr(ord(ch) + 2).lower()\n        return ch\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    def vowel_change(ch: str) -> str:\n        if ch.lower() in 'aeiou':\n            if ch.isupper():\n                return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            if ch.islower():\n                return chr(((ord(ch) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                return chr(((ord(ch) - ord('A') + 2) % 26) + ord('A'))\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            ans += vowel_change(ch.swapcase())\n            has_letter = True\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return ch\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            if ch.isupper():\n                ans += vowel_change(ch.lower()).upper()\n            else:\n                ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n\n    return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = ''\n\n    def vowel_change(ch):\n        if ch.islower():\n            if ch in 'aeiou':\n                ch = chr(((ord(ch) - ord('a') + 2) % 26) + ord('a'))\n            ans.append(ch)\n        else:\n            if ch in 'AEIOU':\n                ch = chr(((ord(ch) - ord('A') + 2) % 26) + ord('A'))\n            ans.append(ch)\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            vowel_change(ch)\n        else:\n            ans.append(ch)\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ''.join(ans)\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr(ord(ch) + 2) if ch.isupper() else chr(ord(ch) + 2 - 32)\n        return ch\n\n    ans = \"\"\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            ans += vowel_change(ch)\n            has_letter = True\n        else:\n            ans += ch\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    has_letter = False\n    ans = ''\n\n    def vowel_change(ch: str) -> str:\n        if ch.isalpha():\n            if ch in 'aeiouAEIOU':\n                ch = chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n        return ch\n\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch)\n        else:\n            ans += ch\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch in 'aeiouAEIOU':\n            return chr((ord(ch) - 97 + 2) % 26 + 97) if ch.islower() else chr((ord(ch) - 65 + 2) % 26 + 65)\n        else:\n            return ch\n\n    ans = ''\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += vowel_change(ch.swapcase())\n        else:\n            ans += ch\n\n    return ans[::-1] if not has_letter else ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c)+2) # Increases the ASCII value by two for vowels\n        return c\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1] # Returns the reverse of the string if no letters were found\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = ''\n\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        else:\n            return c\n\n    for c in s:\n        v = vowel_change(c)\n        ans += v\n        if v != c:\n            has_letter = True\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    ans = []\n    has_letter = False\n\n    def vowel_change(char):\n        if char in 'aeiouAEIOU':\n            return chr(ord(char)+2)\n        return char\n\n    for char in s:\n        # check if char is alphabetic\n        if char.isalpha():\n            has_letter = True\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n            char = vowel_change(char)\n        ans.append(char)\n\n    if has_letter:\n        return ''.join(ans)\n    else:\n        return s[::-1]\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char in 'aeiouAEIOU':\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if not char.isalpha():\n            ans += char\n        else:\n            ans += vowel_change(char.swapcase())\n            has_letter = True\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = ''\n\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr(ord(c) + 2)\n        else:\n            return c\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            lowered_char = char.lower()\n            ans += vowel_change(lowered_char)\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            if c.isupper():\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return c\n\n    has_letter = any(c.isalpha() for c in s)\n    ans = ''\n    for c in s:\n        ans += vowel_change(c)\n\n    return ans[::-1] if has_letter else ans\n\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    # Define the helper function\n    def vowel_change(c):\n        # If the character is a vowel, change it by two letters forward in the alphabet\n        if c in 'aeiouAEIOU':\n            if c.islower():\n                return chr(ord(c)+2)\n            else:\n                return chr(ord(c)+2).upper()\n        else:\n            return c\n\n    ans = \"\"  # Initialize an empty string to store the processed characters\n    has_letter = False  # Initialize the auxiliary boolean\n\n    # Loop over each character in the input string\n    for c in s:\n        # Check if the character is a letter\n        if c.isalpha():\n            has_letter = True\n            # Change the case and pass through vowel_change\n            if c.islower():\n                ans += vowel_change(c.upper())\n            else:\n                ans += vowel_change(c.lower())\n        else:\n            ans += c\n    \n    # Check if no letter exists\n    if not has_letter:\n        return s[::-1]  # Return the reverse of the input string\n    else:\n        return ans  # Return the processed string\n",
                true
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.islower():\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n\n    ans = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c in 'aeiouAEIOU':\n                ans += vowel_change(c)\n            else:\n                ans += vowel_change(c.lower())\n        else:\n            ans += c\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s: str) -> str:\n    ans = ''\n    has_letter = False\n\n    def vowel_change(c: str) -> str:\n        if c.isalpha():\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    for c in s:\n        ans += vowel_change(c)\n        if c.isalpha():\n            has_letter = True\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            c = chr((ord(c) - 32) % 26 + 97)\n        return c\n\n    ans = ''\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c)\n        else:\n            ans += c\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        idx = vowels.index(ch)\n        if idx % 2 == 0:\n            ch = vowels[idx+2]\n        else:\n            ch = vowels[idx-2]\n    return ch\n\ndef solve_with_vowel(s):\n    ans = []\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ch = ch.swapcase()\n            ch = vowel_change(ch)\n        ans.append(ch)\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ''.join(ans)\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        ind = vowels.index(ch)\n        return vowels[(ind+2)%5]\n    else:\n        return ch\n\ndef solve_with_vowel(s):\n    ans = ''\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            if ch.isupper():\n                ans += vowel_change(ch).lower()\n            else:\n                ans += vowel_change(ch).upper()\n        else:\n            ans += ch\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if 'a' <= ch <= 'z':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= ch <= 'Z':\n            return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    ans = \"\".join([vowel_change(ch) if ('a' <= ch <= 'z') or ('A' <= ch <= 'Z') else ch for ch in s])\n    has_letter = any([('a' <= ch <= 'z') or ('A' <= ch <= 'Z') for ch in s])\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowel_lower = 'aeiou'\n    vowel_upper = 'AEIOU'\n    if ch in vowel_lower:\n        return vowel_lower[(vowel_lower.index(ch) + 2) % len(vowel_lower)]\n    elif ch in vowel_upper:\n        return vowel_upper[(vowel_upper.index(ch) + 2) % len(vowel_upper)]\n    else:\n        return ch\n\ndef solve_with_vowel(s):\n    ans = [vowel_change(ch) if ch.isalpha() else ch for ch in s]\n    has_letter = any(ch.isalpha() for ch in s)\n    return ''.join(ans[::-1]) if not has_letter else ''.join(ans)\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    if ch in 'aeiouAEIOU':\n        return chr(ord(ch) + 2) if ch.isupper() else chr(ord(ch) + 2)\n    return ch\n\ndef solve_with_vowel(s):\n    ans = ''.join([vowel_change(ch) if ch.isalpha() else ch for ch in s])\n    has_letter = any(ch.isalpha() for ch in s)\n    return ans[::-1] if not has_letter else ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    has_letter = False\n    ans = \"\"\n\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            return chr((ord(c) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            return c\n\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            ans += vowel_change(c.upper()) if c.islower() else vowel_change(c.lower())\n        else:\n            ans += c\n\n    return ans if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    \n    # Initiate the helper function\n    def vowel_change(c):\n        vowel_dict = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v',\n                      'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V'}\n        if c in vowel_dict:\n            return vowel_dict[c]\n        else:\n            return c\n\n    # Initiate variables\n    has_letter = False\n    ans = \"\"\n    \n    # Iterate through the string\n    for c in s:\n        # Check if the character is a letter\n        if c.isalpha():\n            has_letter = True\n            # Convert to the next character and append\n            ans += vowel_change(c)\n        else:\n            # Append the character unchanged\n            ans += c\n    \n    # If no letters were found, return the reversed string\n    if not has_letter:\n        return s[::-1]\n    # Otherwise, return the string with modified vowels\n    else:\n        return ans\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            return chr(ord(c) + 1) if c.isupper() else chr(ord(c) - 32 + 1)\n        return c\n\n    ans = []\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            ans.append(vowel_change(c))\n            has_letter = True\n        else:\n            ans.append(c)\n    return ''.join(ans) if has_letter else s[::-1]\n",
                false
            ],
            [
                "\ndef vowel_change(ch):\n    vowel_dict = {'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 't',\n                  'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'T'}\n    return vowel_dict.get(ch, ch)\n\ndef solve_with_vowel(s):\n    ans = []\n    has_letter = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ch = vowel_change(ch.lower())\n        ans.append(ch)\n    if has_letter:\n        return ''.join(ans)\n    else:\n        return s[::-1]\n",
                false
            ],
            [
                "\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c in 'aeiouAEIOU':\n            c = chr((ord(c) - 32) % 26 + 65)\n        return c\n\n    ans = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            c = vowel_change(c)\n        ans += c\n\n    return ans if has_letter else s[::-1]\n",
                false
            ]
        ]
    }
}