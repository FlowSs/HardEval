{"0": {"level 1": ["```python\ndef encrypt_two_times(s):\n    def shift(char, shift_amount):\n        if char.islower():\n            return chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            return char\n\n    result = \"\"\n    for char in s:\n        shifted_char = shift(char, 4)\n        double_shifted_char = shift(shifted_char, 5)\n        result += double_shifted_char\n\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n\n    def encrypt(s, n):\n        return ''.join([shift(char, n) for char in s])\n\n    encrypted_once = encrypt(s, 4)\n    encrypted_twice = encrypt(encrypted_once, 5)\n    return encrypted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n\n    encrypted = ''.join([shift(char, 4) for char in s])\n    encrypted = ''.join([shift(char, 5) for char in encrypted])\n    \n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n\n    encrypted_once = ''.join([shift(char, 4) for char in s])\n    encrypted_twice = ''.join([shift(char, 5) for char in encrypted_once])\n    \n    return encrypted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr(((ord(char) - ord('a') + n) % 26) + ord('a'))\n        elif char.isupper():\n            return chr(((ord(char) - ord('A') + n) % 26) + ord('A'))\n        else:\n            return char\n\n    encrypted = ''\n    for char in s:\n        encrypted += shift(shift(char, 4), 5)\n    \n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = \"\"\n    second_shift = \"\"\n    \n    for char in s:\n        if char.islower():\n            first_shift += chr(((ord(char) - ord('a') - 4) % 26) + ord('a'))\n        else:\n            first_shift += char\n    \n    for char in first_shift:\n        if char.islower():\n            second_shift += chr(((ord(char) - ord('a') - 5) % 26) + ord('a'))\n        else:\n            second_shift += char\n    \n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = \"\"\n    for char in s:\n        if char.islower():\n            first_shift += chr((ord(char) - ord('a') - 4) % 26 + ord('a'))\n        else:\n            first_shift += char\n    \n    final_shift = \"\"\n    for char in first_shift:\n        if char.islower():\n            final_shift += chr((ord(char) - ord('a') - 5) % 26 + ord('a'))\n        else:\n            final_shift += char\n    \n    return final_shift\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = \"\"\n    for char in s:\n        if char.islower():\n            first_shift += chr((ord(char) - 97 - 4) % 26 + 97)\n        else:\n            first_shift += char\n    \n    second_shift = \"\"\n    for char in first_shift:\n        if char.islower():\n            second_shift += chr((ord(char) - 97 - 5) % 26 + 97)\n        else:\n            second_shift += char\n            \n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = ''.join([chr((ord(c)-ord('a')+22)%26 + ord('a')) if c.islower() else c for c in s])\n    second_shift = ''.join([chr((ord(c)-ord('a')+17)%26 + ord('a')) if c.islower() else c for c in first_shift])\n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = ''.join([chr((ord(c) - 97 - 4) % 26 + 97) if c.islower() else c for c in s])\n    second_shift = ''.join([chr((ord(c) - 97 - 5) % 26 + 97) if c.islower() else c for c in first_shift])\n    return second_shift\n```", "```python\ndef encrypt_twoPokemon_cardimes(text):\n    def shift_text(text, shift):\n        shifted_text = \"\"\n        for char in text:\n            if char.isalpha():\n                ascii_offset = 65 if char.isupper() else 97\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                shifted_text += shifted_char\n            else:\n                shifted_text += char\n        return shifted_text\n    \n    encrypted_text = shift_text(text, 4)\n    encrypted_text = shift_text(encrypted_text, 5)\n    \n    return encrypted_text\n```", "```python\ndef encrypt_twoPokemon_cardimes(s):\n    first_shift = \"\".join([chr((ord(c)-ord('a')-4) % 26 + ord('a')) if c.islower() else\n                           chr((ord(c)-ord('A')-4) % 26 + ord('A') if c.isupper() else c) for c in s])\n    \n    second_shift = \"\".join([chr((ord(c)-ord('a')-5) % 26 + ord('a')) if c.islower() else\n                            chr((ord(c)-ord('A')-5) % 26 + ord('A') if c.isupper() else c) for c in first_shift])\n    \n    return second_shift\n```", "```python\ndef encrypt_twoPokemon_cardimes(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                shifted = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n                shifted = chr(((ord(shifted) - ord('a') + 5) % 26) + ord('a'))\n            else:\n                shifted = chr(((ord(char) - ord('A') + 4) % 26) + ord('A'))\n                shifted = chr(((ord(shifted) - ord('A') + 5) % 26) + ord('A'))\n            result += shifted\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_twoPokemon_cardimes(text):\n    def shift_text(text, shift):\n        shifted_text = \"\"\n        for char in text:\n            if char.isalpha():\n                shifted_char = chr(((ord(char) - 65 + shift) % 26) + 65) if char.isupper() else chr(((ord(char) - 97 + shift) % 26) + 97)\n                shifted_text += shifted_char\n            else:\n                shifted_text += char\n        return shifted_text\n    \n    first_shift = shift_text(text, 4)\n    second_shift = shift_text(first_shift, 5)\n    \n    return second_shift\n```", "```python\ndef encrypt_twoPokemon_cardimes(s):\n    first_shift = ''.join([chr((ord(char)-ord('a')+4) % 26 + ord('a')) if char.islower() else chr((ord(char)-ord('A')+4) % 26 + ord('A') ) if char.isupper() else char for char in s])\n    second_shift = ''.join([chr((ord(char)-ord('a')+5) % 26 + ord('a'))if char.islower() else chr((ord(char)-ord('A')+5) % 26 + ord('A') ) if char.isupper() else char for char in first_shift])\n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n\n    result = \"\"\n    for char in s:\n        shifted_char = shift(char, 4)\n        shifted_char = shift(shifted_char, 5)\n        result += shifted_char\n\n    return result\n```", "```python\ndef encrypt_two_times(text):\n    def shift_alphabet(s, n):\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        shifted_alphabet = alphabet[n:] + alphabet[:n]\n        table = str.maketrans(alphabet, shifted_alphabet)\n        return s.translate(table)\n\n    encrypted_once = shift_alphabet(text, 4)\n    encrypted_twice = shift_alphabet(encrypted_once, 5)\n    \n    return encrypted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift_alphabet(s, shift_amount):\n        shifted_alphabet = \"\"\n        for char in s:\n            if char.isalpha():\n                shifted_char = chr(((ord(char) - ord('a') + shift_amount) % 26) + ord('a'))\n                shifted_alphabet += shifted_char\n            else:\n                shifted_alphabet += char\n        return shifted_alphabet\n    \n    first_shift = shift_alphabet(s, 4)\n    second_shift = shift_alphabet(first_shift, 5)\n    \n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    def shift_alphabet(s, shift):\n        shifted_alphabet = \"\"\n        for char in s:\n            if char.isalpha():\n                shifted_char = chr(((ord(char) - 65 + shift) % 26) + 65) if char.isupper() else chr(((ord(char) - 97 + shift) % 26) + 97)\n                shifted_alphabet += shifted_char\n            else:\n                shifted_alphabet += char\n        return shifted_alphabet\n\n    shifted_once = shift_alphabet(s, 4)\n    shifted_twice = shift_alphabet(shifted_once, 5)\n    return shifted_twice\n```", "```python\ndef encrypt_two_times(s):\n    shifted_s = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            shifted_char = chr(((ord(char) - ascii_offset - 4) % 26) + ascii_offset)\n            shifted_s += shifted_char\n        else:\n            shifted_s += char\n    \n    final_shifted_s = \"\"\n    for char in shifted_s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            final_shifted_char = chr(((ord(char) - ascii_offset - 5) % 26) + ascii_offset)\n            final_shifted_s += final_shifted_char\n        else:\n            final_shifted_s += char\n    \n    return final_shifted_s\n```  ", "```python\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for char in s:\n        if char.islower():\n            encrypted += chr(((ord(char) - 97 + 4) % 26 + 5) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    first_shift = ''.join([chr((ord(char) - 97 - 4) % 26 + 97) if char.islower() else char for char in s])\n    second_shift = ''.join([chr((ord(char) - 97 - 5) % 26 + 97) if char.islower() else char for char in first_shift])\n    return second_shift\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            shifted = ord(char) + 4\n            if shifted > ord('z'):\n                shifted -= 26\n            shifted = chr(shifted)\n            result += shifted\n        else:\n            result += char\n    final_result = \"\"\n    for char in result:\n        if char.islower():\n            shifted = ord(char) + 5\n            if shifted > ord('z'):\n                shifted -= 26\n            shifted = chr(shifted)\n            final_result += shifted\n        else:\n            final_result += char\n    return final_result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            shifted = ord(char) + 4\n            if shifted > ord('z'):\n                shifted -= 26\n            shifted = shifted + 5\n            if shifted > ord('z'):\n                shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(text):\n    def shift_char(char, shift):\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted = start + (ord(char) - start + shift) % 26\n            return chr(shifted)\n        return char\n\n    encrypted = \"\".join([shift_char(char, 4) for char in text])\n    encrypted = \"\".join([shift_char(char, 5) for char in encrypted])\n    \n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - ord('a') - 4 - 5) % 26) + ord('a'))\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - ord('a') - 4 - 5) % 26) + ord('a'))\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - ord('a') - 4 - 5) % 26) + ord('a'))\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def rotate(s, n):\n        return ''.join(chr((ord(c) - 97 + n) % 26 + 97) if 'a' <= c <= 'z' else c for c in s)\n    \n    s = rotate(s, 4)\n    s = rotate(s, 5)\n    return s\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - 97 - 4 - 5) % 26) + 97)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```"], "level 2": ["```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n    \n    s_first_shift = ''.join([shift(char, 4) for char in s])\n    s_second_shift = ''.join([shift(char, 5) for char in s_first_shift])\n    \n    return s_second_shift\n```", "```python\ndef encrypt_two_times(s):\n    encrypted = \"\"\n    for char in s:\n        if char.islower():\n            encrypted += chr(((ord(char) - ord('a') + 4) % 26 + 5) % 26 + ord('a'))\n        else:\n            encrypted += char\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - ord('a') - 4) % 26 + ord('a') - 5) % 26 + ord('a'))\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n    \n    encrypted = ''.join([shift(char, 4) if char.isalpha() else char for char in s])\n    final_encrypted = ''.join([shift(char, 5) if char.isalpha() else char for char in encrypted])\n    \n    return final_encrypted\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr(((ord(char) - ord('a') + 4) % 26 + 5) % 26 + ord('a'))\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    shifted1 = \"\".join([chr(((ord(c) - 97 + 4) % 26) + 97) if c.islower() else c for c in s])\n    shifted2 = \"\".join([chr(((ord(c) - 97 + 5) % 26) + 97) if c.islower() else c for c in shifted1])\n    return shifted2\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(char, n):\n        if char.islower():\n            shifted = ord(char) + n\n            return chr(shifted) if shifted <= ord('z') else chr(shifted - 26)\n        return char\n\n    shifted_once = ''.join([shift_char(char, 4) for char in s])\n    shifted_twice = ''.join([shift_char(char, 5) for char in shifted_once])\n    \n    return shifted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(char, shift):\n        if char.islower():\n            shifted = ord(char) + shift\n            if shifted > ord('z'):\n                shifted -= 26\n            return chr(shifted)\n        return char\n    \n    encrypted = ''.join([shift_char(char, 4) for char in s])\n    doubly_encrypted = ''.join([shift_char(char, 5) for char in encrypted])\n    \n    return doubly_encrypted\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(char, shift):\n        if char.islower():\n            shifted = ord(char) + shift\n            if shifted > ord('z'):\n                return chr(shifted - 26)\n            else:\n                return chr(shifted)\n        else:\n            return char\n\n    shifted_first = ''.join([shift_char(char, 4) for char in s])\n    shifted_second = ''.join([shift_char(char, 5) for char in shifted_first])\n    \n    return shifted_second\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - 97 + 4) % 26 + 5) % 26 + 97)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_images(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        return char\n\n    encrypted_first_shift = ''.join([shift(char, 4) for char in s])\n    encrypted_second_shift = ''.join([shift(char, 5) for char in encrypted_first_shift])\n    \n    return encrypted_second_shift\n```", "```python\ndef encrypt_two_images(s):\n    def shift_char(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        return char\n\n    encrypted_first_shift = ''.join([shift_char(char, 4) for char in s])\n    encrypted_second_shift = ''.join([shift_char(char, 5) for char in encrypted_first_shift])\n    \n    return encrypted_second_shift\n```", "```python\ndef encrypt_two_images(s):\n    def shift_char(char, shift):\n        if char.islower():\n            return chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n        return char\n    \n    encrypted_text = ''.join([shift_char(char, 4) for char in s])\n    encrypted_text = ''.join([shift_char(char, 5) for char in encrypted_text])\n    \n    return encrypted_text\n```", "```python\ndef encrypt_two_images(s):\n    def shift_char(c, shift):\n        if c.islower():\n            return chr(((ord(c) - ord('a') + shift) % 26) + ord('a'))\n        return c\n    \n    encrypted_text = \"\"\n    for char in s:\n        first_shift = shift_char(char, 4)\n        second_shift = shift_char(first_shift, 5)\n        encrypted_text += second_shift\n\n    return encrypted_text\n```", "```python\ndef encrypt_two_images(s):\n    def shift_char(char, shift):\n        if char.islower():\n            return chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n        return char\n\n    result = \"\".join([shift_char(c, 4) for c in s])\n    encrypted_result = \"\".join([shift_char(c, 5) for c in result])\n    return encrypted_result\n```", "```python\ndef encrypt_two_times(s):\n    shifted = \"\"\n    for char in s:\n        if char.islower():\n            shifted += chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        else:\n            shifted += char\n    result = \"\"\n    for char in shifted:\n        if char.islower():\n            result += chr(((ord(char) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        else:\n            return char\n    \n    result = \"\"\n    for char in s:\n        result += shift(shift(char, 4), 5)\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(letter, n):\n        if letter.islower():\n            return chr((ord(letter) - ord('a') + n) % 26 + ord('a'))\n        else:\n            return letter\n\n    result1 = ''.join([shift(char, 4) for char in s])\n    result2 = ''.join([shift(char, 5) for char in result1])\n    \n    return result2\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        elif char.isupper():\n            return chr((ord(char) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return char\n\n    result = ''\n    for char in s:\n        shifted_once = shift(char, 4)\n        shifted_twice = shift(shifted_once, 5)\n        result += shifted_twice\n\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr((((ord(char) - 97 + 4) % 26 + 5) % 26) + 97)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    encrypted = ''\n    for char in s:\n        if char.islower():\n            first_shift = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            second_shift = chr((ord(first_shift) - ord('a') + 5) % 26 + ord('a'))\n            encrypted += second_shift\n        else:\n            encrypted += char\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    result = ''\n    for char in s:\n        if char.islower():\n            shifted1 = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            shifted2 = chr((ord(shifted1) - ord('a') + 5) % 26 + ord('a'))\n            result += shifted2\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            first_shift = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            second_shift = chr((ord(first_shift) - ord('a') + 5) % 26 + ord('a'))\n            result += second_shift\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(text):\n    result = \"\"\n    for char in text:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            encrypted_char = chr(((ord(encrypted_char) - ord('a') + 5) % 26) + ord('a'))\n            result += encrypted_char\n        else:\n            result += char\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        return char\n\n    result = \"\".join([shift(c, 4) if c.islower() else c for c in s])\n    result = \"\".join([shift(c, 5) if c.islower() else c for c in result])\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(ch, n):\n        if ch.islower():\n            return chr((ord(ch) - ord('a') + n) % 26 + ord('a'))\n        elif ch.isupper():\n            return chr((ord(ch) - ord('A') + n) % 26 + ord('A'))\n        else:\n            return ch\n\n    def encrypt(s, n):\n        return ''.join([shift_char(ch, n) for ch in s])\n\n    encrypted_once = encrypt(s, 4)\n    encrypted_twice = encrypt(encrypted_once, 5)\n    \n    return encrypted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        return char\n    \n    result = \"\"\n    for char in s:\n        result += shift(shift(char, 4), 5)\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr(((ord(char) - ord('a') + n) % 26) + ord('a'))\n        return char\n    \n    shifted_once = ''.join([shift(char, -4) for char in s])\n    shifted_twice = ''.join([shift(char, -5) for char in shifted_once])\n    \n    return shifted_twice\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        else:\n            return char\n\n    encrypted = ''.join(shift(c, 4) for c in s)\n    encrypted = ''.join(shift(c, 5) for c in encrypted)\n    \n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, n):\n        if char.islower():\n            return chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n        return char\n\n    s_shifted = ''.join([shift(char, 4) for char in s])\n    result = ''.join([shift(char, 5) for char in s_shifted])\n    \n    return result\n```"], "level 3": ["```python\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    \n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord(\"a\") + 5) % 26 + ord(\"a\") if ch.islower() else ord(ch)) for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    \n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    tmp = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\"))\n        else:\n            tmp += ch\n    \n    result = \"\"\n    for ch in tmp:\n        if ch.islower():\n            result += chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''\n    for ch in s:\n        if ch.islower():\n            tmp += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        elif ch.isupper():\n            tmp += chr((ord(ch) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            tmp += ch\n    result = ''\n    for ch in tmp:\n        if ch.islower():\n            result += chr((ord(ch) - ord('a') + 5) % 26 + ord('a'))\n        elif ch.isupper():\n            result += chr((ord(ch) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a') if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if 'a' <= ch <= 'z' else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a') if 'a' <= ch <= 'z' else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a') if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) + 5 - ord('a')) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = \"\"\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr(((ord(tmp) + 5 - ord('a')) % 26) + ord('a'))\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = ''\n    for ch in s:\n        if ch.islower():\n            result += chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n        else:\n            result += ch\n    tmp = ''\n    for ch in result:\n        if ch.islower():\n            tmp += chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a'))\n        else:\n            tmp += ch\n    return tmp\n```  ", "```python\ndef encrypt_two_times(s):\n    result = ''\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr(((ord(tmp) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(ch, shift):\n        if 'a' <= ch <= 'z':\n            return chr((ord(ch) - ord('a') + shift) % 26 + ord('a')\n        return ch\n\n    result = \"\"\n    for char in s:\n        tmp = \"\".join([shift_char(ch, 4) for ch in s])\n        result += \"\".join([shift_char(ch, 5) for ch in tmp])\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    def shift_one(ch):\n        return chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n    \n    def shift_two(ch):\n        return chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a'))\n    \n    tmp = ''.join([shift_one(ch) if ch.islower() else ch for ch in s])\n    encrypted = ''.join([shift_two(ch) if ch.islower() else ch for ch in tmp])\n    \n    return encrypted\n```  ", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a') if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    encrypted = ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a') if ch.islower() else ch for ch in tmp])\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a') if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a') if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    encrypted = ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    tmp = ''.join([chr((ord(ch) - ord('a') + 4) % 26 + ord('a')) if ch.islower() else ch for ch in s])\n    return ''.join([chr((ord(ch) - ord('a') + 5) % 26 + ord('a')) if ch.islower() else ch for ch in tmp])\n```", "```python\ndef encrypt_two_times(s):\n    def shift(char, shift_amount):\n        return chr(((ord(char) - ord('a') + shift_amount) % 26) + ord('a'))\n    \n    tmp = ''\n    for ch in s:\n        if ch.islower():\n            tmp += shift(ch, 4)\n        else:\n            tmp += ch\n    \n    result = ''\n    for ch in tmp:\n        if ch.islower():\n            result += shift(ch, 5)\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = ''\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            encrypted_ch = chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n            result += encrypted_ch\n        else:\n            result += ch\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    encrypted = ''\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            encrypted += chr(((ord(tmp) - ord('a') + 5) % 26) + ord('a'))\n        else:\n            encrypted += ch\n    return encrypted\n```", "```python\ndef encrypt_two_times(s):\n    def shift_char(ch, shift):\n        if ch.islower():\n            return chr((ord(ch) - ord('a') + shift) % 26 + ord('a'))\n        return ch\n\n    tmp = ''.join([shift_char(ch, 4) for ch in s])\n    result = ''.join([shift_char(ch, 5) for ch in tmp])\n    return result\n```", "```python\ndef encrypt_two_times(s):\n    result = ''\n    for ch in s:\n        if ch.islower():\n            tmp = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result += chr((ord(tmp) - ord('a') + 5) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n```"]}, "1": {"level 1": ["```python\ndef encode_reversed(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message[::-1]:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    \n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    encoded = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                encoded += char.swapcase()\n        else:\n            encoded += char\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded += char.swapcase()\n        else:\n            encoded += char\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            new_char = chr(ord(char) + 2)\n        else:\n            new_char = char.swapcase()\n        encoded += new_char\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.lower() == 'a':\n                result += 'c' if char.islower() else 'C'\n            elif char.lower() == 'e':\n                result += 'g' if char.islower() else 'G'\n            elif char.lower() == 'i':\n                result += 'k' if char.islower() else 'K'\n            elif char.lower() == 'o':\n                result += 'q' if char.islower() else 'Q'\n            elif char.lower() == 'u':\n                result += 'w' if char.islower() else 'W'\n        else:\n            result += char.swapcase()\n    return result[::-1]\n```  ", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            result += char.swapcase()\n    return result[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char.swapcase()\n    return result[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    shifted = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                shifted += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                shifted += char.swapcase()\n        else:\n            shifted += char\n    return shifted[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiouAEIOU\"\n    encoded = \"\"\n    \n    for char in message[::-1]:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                new_char = char.swapcase()\n            encoded += new_char\n        else:\n            encoded += char\n\n    return encoded\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiouAEIOU\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded += char.upper() if char.islower() else char.lower()\n        else:\n            encoded += char\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiouAEIOU\"\n    mapping = str.maketrans(vowels, vowels[2:] + vowels[:2])\n    encoded = message.swapcase().translate(mapping)[::-1]\n    return encoded\n```", "```python\ndef encode_reversed(message):\n    vowels = \"AEIOUaeiou\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                encoded += chr((ord(char) & ~32) + 2) if char.isupper() else chr((ord(char) & ~32) + 2).lower()\n            else:\n                encoded += char.swapcase()\n        else:\n            encoded += char\n    return encoded[::-1]\n```", "```python\ndef encode_repaired(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_char = chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n    return encoded_message[::-1]\n```", "```python\ndef encode_repaired(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message[::-1]\n```", "```python\ndef encode_repaired(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.lower() == 'a' or char.lower() == 'e' or char.lower() == 'i' or char.lower() == 'o':\n                    result += chr(ord(char) + 2)\n                else:\n                    result += chr(ord(char) + 1)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return result[::-1]\n```", "```python\ndef encode_repaired(message):\n    vowels = 'aeiouAEIOU'\n    mapping = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'bcdEfghIjklmnOpqrstUvwxyzABCDefghIjklmnOpqrstUvwxyz')\n    \n    encoded_message = message.swapcase().translate(mapping)[::-1]\n    return encoded_message\n```", "```python\ndef encode_repaired(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    \n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def reverse_vowels(s):\n        vowels = 'aeiou'\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            while s[i] not in vowels and i < j:\n                i += 1\n            while s[j] not in vowels and i < j:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)\n    \n    encoded_message = ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in message])\n    encoded_message = ''.join([chr(ord(ch) + 2) if ch.lower() in 'aeiou' else ch for ch in encoded_message])\n    encoded_message = reverse_vowels(encoded_message)\n    \n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiou\"\n    \n    def reverse_string(s):\n        return s[::-1]\n    \n    def encode_char(c):\n        if c.isalpha():\n            if c.isupper():\n                c = c.lower()\n            else:\n                c = c.upper()\n            if c in vowels:\n                c = chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        return c\n    \n    encoded_message = ''.join(encode_char(c) for c in message)\n    reversed_encoded_message = reverse_string(encoded_message)\n    \n    return reversed_encoded_message\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            if char.lower() in vowels:\n                char = chr(ord(char) + 2)\n                \n        encoded_message = char + encoded_message\n        \n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiou\"\n    result = \"\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n                \n            if char in vowels:\n                char = chr(ord(char) + 2)\n                if char > 'z':\n                    char = chr(ord(char) - 26)\n        result = char + result\n        \n    return result\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiou\"\n    reversed_message = message.swapcase()\n    reversed_message = ''.join(chr(ord(char) + 2) if char in vowels else char for char in reversed_message)\n    return reversed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def reverse_string(s):\n        return s[::-1]\n\n    def switch_case(c):\n        if c.isalpha():\n            return c.lower() if c.isupper() else c.upper()\n        return c\n\n    def advance_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c.lower()) + 2) % len(vowels)\n            return vowels[index] if c.islower() else vowels[index].upper()\n        return c\n\n    altered_message = ''.join(advance_vowel(switch_case(char)) for char in message)\n    return reverse_string(altered_message)\n```", "```python\ndef encode_reversed(message):\n    vowels = \"aeiouAEIOU\"\n    reversed_chars = []\n    \n    for char in message[::-1]:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n            reversed_chars.append(new_char)\n        else:\n            reversed_chars.append(char)\n    \n    return ''.join(reversed_chars)\n```", "```python\ndef encode_reversed(message):\n    def reverse_string(s):\n        return s[::-1]\n    \n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n    \n    def advance_vowel(char):\n        vowels = \"aeiou\"\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % len(vowels)\n            if char.islower():\n                return vowels[index]\n            else:\n                return vowels[index].upper()\n        else:\n            return char\n    \n    altered_message = \"\"\n    for char in message:\n        char = switch_case(char)\n        char = advance_vowel(char)\n        altered_message += char\n    \n    return reverse_string(altered_message)\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiou'\n    result = ''\n    \n    for char in message:\n        if char.lower() in vowels:\n            new_char = chr((ord(char) + 2 - 97) % 26 + 97) if char.islower() else chr((ord(char) + 2 - 65) % 26 + 65)\n        else:\n            new_char = char.swapcase()\n        result = new_char + result\n    \n    return result\n```", "```python\ndef encode_reversed(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message[::-1]:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr(ord(char) + 2)\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        encoded_message += new_char\n    \n    return encoded_message\n```"], "level 2": ["```python\ndef encode_reversed(message):\n    def swap_case(s):\n        return s.swapcase()\n    \n    def alter_vowels(s):\n        vowels = 'aeiouAEIOU'\n        result = []\n        for char in s:\n            if char.lower() in vowels:\n                index = (ord(char) + 2 - ord('a')) % 26\n                new_char = chr(ord('a') + index)\n                result.append(new_char)\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    transformed = swap_case(message)\n    transformed = alter_vowels(transformed)\n    return transformed[::-1]\n```", "```python\ndef encode_reversed(message):\n    def swap_case(letter):\n        if letter.isupper():\n            return letter.lower()\n        else:\n            return letter.upper()\n    \n    def replace_vowels(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n    \n    transformed_message = ''.join([replace_vowels(swap_case(char)) for char in message])\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def swap_case(s):\n        return s.swapcase()\n\n    def alter_vowels(s):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in s:\n            if char in vowels:\n                result += chr(ord(char) + 2)\n            else:\n                result += char\n        return result\n\n    transformed_message = swap_case(message)\n    transformed_message = alter_vowels(transformed_message)\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def swap_case(s):\n        return s.swapcase()\n\n    def alter_vowels(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for char in s:\n            if char in vowels:\n                new_s += chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                new_s += char\n        return new_s\n\n    transformed_message = swap_case(message)\n    transformed_message = alter_vowels(transformed_message)\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def swap_case(s):\n        return s.swapcase()\n\n    def replace_vowels(s):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in s:\n            if char in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n                result += new_char\n            else:\n                result += char\n        return result\n\n    transformed = replace_vowels(swap_case(message))\n    return transformed[::-1]\n```", "```python\ndef encode_revised(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def shift_vowels(char):\n        vowels = \"AEIOUaeiou\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    modified_message = ''.join([shift_vowels(switch_case(char)) for char in message])[::-1]\n    return modified_message\n```", "```python\ndef encode_revised(message):\n    def switch_case(char):\n        return char.lower() if char.isupper() else char.upper()\n\n    def shift_vowel(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            index = (ord(char) + 2 - ord('A')) % 26\n            return vowels[index]\n        return char\n\n    modified_message = [shift_vowel(switch_case(char)) for char in message]\n    return ''.join(modified_message)[::-1]\n```", "```python\ndef encode_revised(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    modified_message = [shift_vowel(switch_case(char)) for char in message][::-1]\n    return ''.join(modified_message)\n```  ", "```python\ndef encode_revised(message):\n    def switch_case(message):\n        return ''.join(char.lower() if char.isupper() else char.upper() for char in message)\n\n    def shift_vowels(message):\n        vowels = 'aeiouAEIOU'\n        shifted_vowels = {vowel: chr((ord(vowel.lower()) - 97 + 2) % 26 + 97) for vowel in vowels}\n        return ''.join(shifted_vowels[char] if char.lower() in vowels else char for char in message)\n\n    modified_message = switch_case(message)\n    modified_message = shift_vowels(modified_message)\n    return modified_message[::-1]\n```", "```python\ndef encode_revised(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def shift_vowels(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n    \n    modified_message = ''\n    for char in message:\n        char = switch_case(char)\n        char = shift_vowels(char)\n        modified_message += char\n\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def case_swap(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def shift_vowels(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    encoded_message = ''.join([shift_vowels(case_swap(char)) for char in message])[::-1]\n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    def case_swap(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    modified_message = ''.join(shift_vowel(case_swap(char)) for char in message)\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def case_swap(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def shift_vowel(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n    \n    encoded = ''.join([shift_vowel(case_swap(char)) for char in message])\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    def case_swap(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def shift_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    modified_message = ''.join(shift_vowels(case_swap(char)) for char in message)\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def case_swap(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def shift_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    modified_message = ''.join([shift_vowels(case_swap(char)) for char in message])\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def adjust_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def adjust_vowels(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            if char.islower():\n                return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return char\n\n    result = ''.join([adjust_vowels(adjust_case(char)) for char in message])[::-1]\n    return result\n```", "```python\ndef encode_reversed(message):\n    def adjust_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def adjust_vowels(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    result = \"\"\n    for char in message:\n        result += adjust_vowels(adjust_case(char))\n\n    return result[::-1]\n```", "```python\ndef encode_reversed(message):\n    def adjust_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def adjust_vowels(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    encoded = ''\n    for char in message:\n        encoded += adjust_vowels(adjust_case(char))\n\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    def modify_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def adjust_vowels(letter):\n        vowels = \"aeiouAEIOU\"\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    updated_message = [adjust_vowels(modify_case(char)) for char in message]\n    encoded_message = ''.join(updated_message)[::-1]\n    \n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    def modify_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def adjust_vowels(letter):\n        vowels = \"aeiouAEIOU\"\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    modified_message = ''.join([adjust_vowels(modify_case(char)) for char in message])\n    \n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def toggle_case(s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n\n    def advance_vowels(s):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in s:\n            if char in vowels:\n                if char == 'u':\n                    result += 'a'\n                elif char == 'U':\n                    result += 'A'\n                else:\n                    result += chr(ord(char) + 2)\n            else:\n                result += char\n        return result\n    \n    transformed_message = advance_vowels(toggle_case(message))\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def toggle_case(char):\n        if char.isalpha():\n            if char.isupper():\n                return char.lower()\n            else:\n                return char.upper()\n        else:\n            return char\n        \n    def advance_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n            \n    transformed_message = ''\n    for char in message:\n        char = toggle_case(char)\n        char = advance_vowel(char)\n        transformed_message += char\n        \n    encoded_message = transformed_message[::-1]\n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    def toggle_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def advance_vowel(letter):\n        vowels = \"aeiou\"\n        if letter.lower() in vowels:\n            index = (vowels.index(letter.lower()) + 2) % len(vowels)\n            if letter.islower():\n                return vowels[index]\n            else:\n                return vowels[index].upper()\n        else:\n            return letter\n\n    transformed_message = \"\"\n    for char in message:\n        transformed_message += advance_vowel(toggle_case(char))\n\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def toggle_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def advance_vowel(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            index = (vowels.index(letter) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    transformed_message = ''\n    for char in message:\n        char = toggle_case(char)\n        char = advance_vowel(char)\n        transformed_message += char\n\n    reversed_message = transformed_message[::-1]\n    return reversed_message\n```", "```python\ndef encode_reversed(message):\n    def toggle_case(text):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in text])\n\n    def advance_vowels(text):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in text:\n            if char in vowels:\n                if char == 'u':\n                    result += 'a'\n                elif char == 'U':\n                    result += 'A'\n                else:\n                    result += chr(ord(char) + 2)\n            else:\n                result += char\n        return result\n\n    transformed_message = advance_vowels(toggle_case(message))\n    return transformed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def alter_vowels(char):\n        vowels = \"AEIOUaeiou\"\n        if char in vowels:\n            return chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n        return char\n\n    processed_message = ''.join(alter_vowels(switch_case(char)) for char in message)\n    return processed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def alter_vowels(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    processed = ''.join(alter_vowels(switch_case(char)) for char in message)\n    return processed[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def alter_vowels(char):\n        vowels = \"AEIOUaeiou\"\n        if char in vowels:\n            index = vowels.index(char)\n            new_index = (index + 2) % len(vowels)\n            return vowels[new_index]\n        else:\n            return char\n\n    processed_message = \"\"\n    for char in message:\n        char = switch_case(char)\n        char = alter_vowels(char)\n        processed_message += char\n\n    return processed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def alter_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    processed_message = ''.join([alter_vowel(switch_case(char)) for char in message])\n    return processed_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def alter_vowel(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n    \n    processed = ''\n    for char in message:\n        processed += alter_vowel(switch_case(char))\n    \n    return processed[::-1]\n```"], "level 3": ["```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index).swapcase()\n        return ch\n\n    encoded_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index)\n        return ch\n    \n    result = ''.join(map(vowel_change, map(switch_case, message)))\n    encoded_message = result[::-1]\n    \n    return encoded_message\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n\n    encoded_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return encoded_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            if ch.isupper():\n                return chr(index + ord('A'))\n            else:\n                return chr(index + ord('a'))\n        else:\n            return ch\n\n    encoded_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return encoded_message[::-1]\n\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    encoded = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr(ord(ch) + 2)\n        else:\n            return ch\n\n    encoded = ''.join(map(switch_case, map(vowel_change, message)))\n    return encoded[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        next_two_letters = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        return next_two_letters[ch] if ch in vowels else ch\n\n    result = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return result[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            idx = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[idx]\n        return ch\n\n    modified_message = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            new_ch = chr(ord('a') + index)\n            return new_ch.upper() if ch.isupper() else new_ch\n        else:\n            return ch\n    \n    modified_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return modified_message[::-1]\n\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a')) if ch.islower() else chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return ch\n\n    updated_message = ''.join(map(vowel_change, map(switch_case, message)))\n    return updated_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n    \n    modified = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return modified[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n    \n    transformed = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return transformed[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n    \n    def vowel_change(ch):\n        vowels = \"AEIOUaeiou\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n    \n    modified_message = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.isalpha():\n            if ch.islower():\n                return ch.upper()\n            else:\n                return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    modified_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            if ch.islower():\n                return ch.upper()\n            else:\n                return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    modified_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    def password(ch):\n        ch = switch_case(ch)\n        ch = vowel_change(ch)\n        return ch\n\n    modified_message = ''.join(password(ch) for ch in message)\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    def password(ch):\n        ch = switch_case(ch)\n        ch = vowel_change(ch)\n        return ch\n\n    modified_message = ''.join(password(ch) for ch in message)\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = 'AEIOUaeiou'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    def password(ch):\n        ch = switch_case(ch)\n        ch = vowel_change(ch)\n        return ch\n    \n    modified_message = ''.join([password(ch) for ch in message])\n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    def password(ch):\n        ch = switch_case(ch)\n        ch = vowel_change(ch)\n        return ch\n    \n    modified_message = ''.join([password(ch) for ch in message])\n    \n    return modified_message[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n\n    def password(ch):\n        ch = switch_case(ch)\n        ch = vowel_change(ch)\n        return ch\n\n    modified_message = ''.join([password(ch) for ch in message])\n    return modified_message[::-1]\n\n```", "```python\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    transformed_message = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed_message[::-1]\n```", "```python\ndef encode_rejected(message):\n\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % 10\n            return vowels[index]\n        else:\n            return ch\n\n    modified_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return modified_message[::-1]\n```", "```python\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n    \n    return ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))[::-1]\n```", "```python\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    processed_message = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return processed_message[::-1]\n```", "```python\ndef encode_rejected(message):\n    def switch_case(ch):\n        if ch.isalpha():\n            return ch.lower() if ch.isupper() else ch.upper()\n        return ch\n\n    def vowel_change(ch):\n        if ch.lower() in ['a', 'e', 'i', 'o', 'u']:\n            return chr(((ord(ch.lower()) - 97 + 2) % 26) + 97)\n        return ch\n\n    modified = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return modified[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    transformed = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed[::-1]\n```", "```python\ndef switch_case(ch):\n    if ch.islower():\n        return ch.upper()\n    else:\n        return ch.lower()\n\ndef vowel_change(ch):\n    vowels = 'aeiouAEIOU'\n    if ch in vowels:\n        index = (vowels.index(ch) + 2) % len(vowels)\n        return vowels[index]\n    else:\n        return ch\n\ndef encode_reversed(message):\n    transformed = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        return ch\n    \n    transformed = map(lambda ch: switch_case(vowel_change(ch)), message)\n    return ''.join(transformed)[::-1]\n```", "```python\ndef encode_reversed(message):\n    \n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n    \n    transformed = ''.join(map(lambda ch: switch_case(vowel_change(ch)), message))\n    return transformed[::-1]\n```", "```python\ndef encode_reversed(message):\n    def switch_case(ch):\n        if ch.isupper():\n            return ch.lower()\n        else:\n            return ch.upper()\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    transformed = ''.join(map(lambda ch: vowel_change(switch_case(ch)), message))\n    return transformed[::-1]\n```"]}, "2": {"level 1": ["```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                shifted_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n                result += shifted_char\n            else:\n                result += char\n        else:\n            result += char\n\n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.lower() == 'a' or char.lower() == 'e' or char.lower() == 'i' or char.lower() == 'o':\n                    result += chr((ord(char) + 2 - 65) % 26 + 65)\n                else:\n                    result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    \n    encoded_text = result\n    result_hash = hashlib.md5(encoded_text.encode()).hexdigest()\n    \n    return result_hash\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    encoded_text = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                new_char = char.swapcase()\n            encoded_text += new_char\n        else:\n            encoded_text += char\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiou\"\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + 2) % 26 + ord('a')).lower()\n                else:\n                    result += chr((ord(char) - ord('A') + 2) % 26 + ord('A')).upper()\n            else:\n                result += char\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    encoded_text = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char in vowels:\n                if char == 'A':\n                    encoded_text += 'C'\n                elif char == 'E':\n                    encoded_text += 'G'\n                elif char == 'I':\n                    encoded_text += 'K'\n                elif char == 'O':\n                    encoded_text += 'Q'\n                elif char == 'U':\n                    encoded_text += 'W'\n                elif char == 'a':\n                    encoded_text += 'c'\n                elif char == 'e':\n                    encoded_text += 'g'\n                elif char == 'i':\n                    encoded_text += 'k'\n                elif char == 'o':\n                    encoded_text += 'q'\n                elif char == 'u':\n                    encoded_text += 'w'\n            else:\n                encoded_text += char\n        else:\n            encoded_text += char\n    \n    encoded_text_md5 = hashlib.md5(encoded_text.encode()).hexdigest()\n    return encoded_text_md5\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    encoded_text = []\n    \n    for char in text:\n        if char.isalpha():\n            if char in vowels:\n                encoded_text.append(chr((ord(char) + 2 - 65) % 26 + 65 if char.isupper() else (ord(char) + 2 - 97) % 26 + 97))\n            else:\n                encoded_text.append(char.swapcase())\n        else:\n            encoded_text.append(char)\n    \n    modified_text = ''.join(encoded_text)\n    md5_hash = hashlib.md5(modified_text.encode()).hexdigest()\n    \n    return md5_hash\n```  ", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.isupper():\n                    result += chr((ord(char) - 65 + 2) % 26 + 65)\n                else:\n                    result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                if char.isupper():\n                    result += char.lower()\n                else:\n                    result += char.upper()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiou\"\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = chr((ord(char) - 97 + 2) % 26 + 97)\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    \n    encoded_text = hashlib.md5(result.encode()).hexdigest()\n    \n    return encoded_text\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = ''\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            result += char.swapcase()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    encoded_text = ''\n    \n    for char in text:\n        if char.isalpha():\n            if char in vowels:\n                encoded_text += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_text += char.upper()\n                else:\n                    encoded_text += char.lower()\n        else:\n            encoded_text += char\n    \n    encoded_md5 = hashlib.md5(encoded_text.encode()).hexdigest()\n    \n    return encoded_md5\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char_code = (ord(char) + 2) if char.islower() else (ord(char) + 2 - 32)\n                encoded_str += chr(new_char_code)\n            else:\n                encoded_str += char.swapcase()\n        else:\n            encoded_str += char\n    \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n\n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    encoded = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                encoded += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded += char.swapcase()\n        else:\n            encoded += char\n            \n    return hashlib.md5(encoded.encode()).hexdigest()\n```  ", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.isupper():\n                    result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n                else:\n                    result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                if char.isupper():\n                    result += char.lower()\n                else:\n                    result += char.upper()\n        else:\n            result += char\n    \n    encoded_result = result.encode()\n    return hashlib.md5(encoded_result).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    shifted = \"\"\n    for char in s:\n        if char.isalpha() and char.lower() in vowels:\n            shifted += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            shifted += char.swapcase()\n    \n    encoded = shifted.encode()\n    md5_hash = hashlib.md5(encoded).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper() if char in vowels else chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += char.lower() if char in vowels else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    encoded_text = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encoded_text += char.upper()\n            elif char.isupper():\n                encoded_text += char.lower()\n        else:\n            encoded_text += char\n    \n    adjusted_text = ''\n    for char in encoded_text:\n        if char in vowels:\n            adjusted_text += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            adjusted_text += char\n    \n    return hashlib.md5(adjusted_text.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A')) if char.isupper() else chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n            \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    encoded_text = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                encoded_text += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                if char.isupper():\n                    encoded_text += char.lower()\n                else:\n                    encoded_text += char.upper()\n        else:\n            encoded_text += char\n    \n    return hashlib.md5(encoded_text.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```  ", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    \n    encoded_text = result.encode('utf-8')\n    md5_hash = hashlib.md5(encoded_text).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            # Convert each letter to its opposite case\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Move every vowel two letters up in the alphabet\n            if char in vowels:\n                char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n        \n        result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md3(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2) % 256)\n            else:\n                encoded_char = char.swapcase()\n            result += encoded_char\n        else:\n            result += char\n    \n    encoded_str = result.encode()\n    md5_hash = hashlib.md5(encoded_str).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).swapcase()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    encoded_text = hashlib.md5(result.encode()).hexdigest()\n    return encoded_text\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    encoded_text = \"\"\n    \n    for char in text:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_text += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                if char.islower():\n                    encoded_text += char.upper()\n                else:\n                    encoded_text += char.lower()\n        else:\n            encoded_text += char\n    \n    md3_hash = hashlib.md5(encoded_text.encode()).hexdigest()\n    \n    return md3_hash\n```", "```python\nimport hashlib\n\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    def reverse_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def move_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            if char.isupper():\n                return chr(ord('A') + index)\n            else:\n                return chr(ord('a') + index)\n        return char\n\n    reversed_text = ''.join(reverse_case(char) for char in text)\n    modified_text = ''.join(move_vowel(char) for char in reversed_text)\n\n    md3_hash = hashlib.md5(modified_text.encode()).hexdigest()\n    return md3_hash\n```", "```python\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    def reverse_case(char):\n        if char.isalpha():\n            if char.isupper():\n                return char.lower()\n            else:\n                return char.upper()\n        return char\n    \n    def move_vowels_two_places(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            if char.isupper():\n                return chr(ord('A') + index)\n            else:\n                return chr(ord('a') + index)\n        return char\n    \n    reversed_text = ''.join([reverse_case(char) for char in text])\n    processed_text = ''.join([move_vowels_two_places(char) for char in reversed_text])\n    \n    # MD5 hash generation\n    import hashlib\n    md5_hash = hashlib.md5(processed_text.encode()).hexdigest()\n    \n    return md5_hash\n```", "```python\ndef encode_md3(text):\n    if not text:\n        return None\n\n    def reverse_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def move_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            if char.isupper():\n                return chr(ord('A') + index)\n            else:\n                return chr(ord('a') + index\n        else:\n            return char\n\n    reversed_case = ''.join(map(reverse_case, text))\n    modified_text = ''.join(map(move_vowels, reversed_case))\n    \n    import hashlib\n    md3 = hashlib.md5(modified_text.encode()).hexdigest()\n    \n    return md3\n```", "```python\ndef encode_md3(text):\n    if not text:\n        return None\n    \n    def reverse_case(char):\n        if char.isalpha():\n            if char.isupper():\n                return char.lower()\n            else:\n                return char.upper()\n        return char\n    \n    def move_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index)\n        return char\n    \n    reversed_text = ''.join([reverse_case(char) for char in text])\n    modified_text = ''.join([move_vowels(char) for char in reversed_text])\n    \n    import hashlib\n    md3 = hashlib.md5(modified_text.encode()).hexdigest()\n    \n    return md3\n```"], "level 2": ["```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    # Swap case of each letter\n    s = s.swapcase()\n    \n    # Create a translation table to shift vowels two positions forward in the alphabet\n    translation_table = str.maketrans('aeiou', 'eioua')\n    \n    # Apply the translation table to the string\n    s = s.translate(translation_table)\n    \n    # Get the MD5 hash of the modified string\n    md5_hash = hashlib.md5(s.encode()).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    s = s.swapcase()\n    vowels = \"aeiou\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.lower() in vowels:\n            encoded_str += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded_str += char\n    \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    s = s.swapcase()\n    vowels = 'aeiou'\n    result = []\n    \n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result.append(chr((ord(char) - ord('A') + 2) % 26 + ord('A')))\n            else:\n                result.append(chr((ord(char) - ord('a') + 2) % 26 + ord('a')))\n        else:\n            result.append(char)\n    \n    modified_string = ''.join(result)\n    return hashlib.md5(modified_string.encode()).hexdigest()\n```  ", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    s = s.swapcase()\n    vowels = \"aeiouAEIOU\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha() and char in vowels:\n            encoded_str += chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            encoded_str += char\n    \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```  ", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    s = s.swapcase()\n    vowels = 'aeiou'\n    result = ''\n    \n    for char in s:\n        if char.lower() in vowels:\n            new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    def shift_vowel(char):\n        vowels = 'aeiou'\n        if char.lower() in vowels:\n            shifted = ord(char) + 2\n            if char.isupper():\n                return chr(shifted).upper()\n            else:\n                return chr(shifted)\n        else:\n            return char\n    \n    transformed = ''.join([shift_vowel(c.swapcase()) for c in s])\n    md5_hash = hashlib.md5(transformed.encode()).hexdigest()\n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    s = \"\".join([chr(ord(c) - 2) if c in vowels else c.swapcase() for c in s])\n    \n    return hashlib.md5(s.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    # Toggle the case of every character\n    toggled_str = ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n    \n    # Shift vowels two places up in the alphabet\n    shifted_str = ''\n    for char in toggled_str:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            shifted_str += chr(ord(char) + 2)\n        else:\n            shifted_str += char\n    \n    # Calculate MD5 hash of the altered string\n    return hashlib.md5(shifted_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                shifted_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                shifted_char = char\n            result += shifted_char.swapcase()\n        else:\n            result += char\n            \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                if char == 'a':\n                    result += 'c'\n                elif char == 'e':\n                    result += 'g'\n                elif char == 'i':\n                    result += 'k'\n                elif char == 'o':\n                    result += 'q'\n                elif char == 'u':\n                    result += 'w'\n                elif char == 'A':\n                    result += 'C'\n                elif char == 'E':\n                    result += 'G'\n                elif char == 'I':\n                    result += 'K'\n                elif char == 'O':\n                    result += 'Q'\n                elif char == 'U':\n                    result += 'W'\n            else:\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```  ", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    def adjust_vowel(c):\n        vowels = \"aeiou\"\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif c in vowels.upper():\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    adjusted_s = ''.join(adjust_vowel(c) if c.isalpha() else c.swapcase() for c in s)\n    return hashlib.md5(adjusted_s.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiou'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiou\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char.lower()) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    \n    encoded_result = result.encode()\n    md5_hash = hashlib.md5(encoded_result).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    result = ''\n    vowels = 'aeiou'\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        result += new_char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            return char.swapcase()\n        return char\n    \n    def increment_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            new_char = chr(ord('a') + index)\n            return new_char.upper() if char.isupper() else new_char\n        return char\n    \n    altered_string = ''.join(increment_vowel(switch_case(char)) for char in s)\n    \n    return hashlib.md5(altered_string.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    def switch_case(c):\n        if c.isalpha():\n            return c.lower() if c.isupper() else c.upper()\n        return c\n    \n    def increment_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        return c\n    \n    encoded = ''.join(increment_vowel(switch_case(c)) for c in s)\n    return hashlib.md5(encoded.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            return char.swapcase()\n        return char\n    \n    def increment_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            return chr(index + ord('a')).swapcase()\n        return char\n    \n    encoded_str = ''.join([increment_vowel(switch_case(char)) for char in s])\n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    \n    updated_str = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                updated_str += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                updated_str += char.swapcase()\n        else:\n            updated_str += char\n    \n    encoded_str = hashlib.md5(updated_str.encode()).hexdigest()\n    \n    return encoded_str\n```", "```python\nimport hashlib\n\ndef encode_md8(s):\n    if not s:\n        return None\n    \n    encoded_str = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_str += char.upper()\n                else:\n                    encoded_str += char.lower()\n        else:\n            encoded_str += char\n    \n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - ord('A' if char.isupper() else 'a')) % 26 + ord('A' if char.isupper() else 'a'))\n            else:\n                new_char = chr(ord(char) ^ 32)\n        else:\n            new_char = char\n        result += new_char\n    \n    encoded_str = result\n    encoded_md5 = hashlib.md5(encoded_str.encode()).hexdigest()\n    \n    return encoded_md5\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n                result += new_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    md5_hash = hashlib.md5(result.encode()).hexdigest()\n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.isupper():\n                    result += chr((ord(char) + 2 - 65) % 26 + 65)\n                else:\n                    result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                if char.isupper():\n                    result += char.lower()\n                else:\n                    result += char.upper()\n        else:\n            result += char\n    \n    encoded = hashlib.md5(result.encode()).hexdigest()\n    return encoded\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    \n    # Invert the case of each character\n    s = s.swapcase()\n    \n    # Advance every vowel two positions in the alphabet\n    encoded_str = \"\"\n    for char in s:\n        if char in vowels:\n            new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            encoded_str += new_char\n        else:\n            encoded_str += char\n    \n    # Generate and return the MD5 hash of the final string\n    return hashlib.md5(encoded_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return hashlib.md5(result.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n                new_str += new_char.upper() if char.isupper() else new_char\n            else:\n                new_str += char.swapcase()\n        else:\n            new_str += char\n    \n    encoded_str = new_str.encode()\n    md5_hash = hashlib.md5(encoded_str).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                char = chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                char = char.swapcase()\n        result += char\n    \n    encoded_str = result.encode()\n    md5_hash = hashlib.md5(encoded_str).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    encoded = result.encode('utf-8')\n    md5_hash = hashlib.md5(encoded).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_str += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                if char.islower():\n                    new_str += char.upper()\n                else:\n                    new_str += char.lower()\n        else:\n            new_str += char\n    \n    return hashlib.md5(new_str.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(s):\n    if not s:\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            new_str += new_char\n        else:\n            new_str += char\n    \n    return hashlib.md5(new_str.encode()).hexdigest()\n```"], "level 3": ["```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n    \n    transformed_message = ''.join(vowel_change(switch_case(char)) for char in message)\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(transformed_message)\n```  ", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if message == \"\":\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    transformed_message = \"\".join([vowel_change(switch_case(char)) for char in message])\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n    \n    switched_message = ''.join([switch_case(char) for char in message])\n    transformed_message = ''.join([vowel_change(char) for char in switched_message])\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n    \n    transformed_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n    \n    transformed_message = \"\".join(vowel_change(switch_case(char)) for char in message)\n    \n    def string_to_md5(string):\n        return hashlib.md5(string.encode()).hexdigest()\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    transformed_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    def string_to_md5(text):\n        hash_md5 = hashlib.md5()\n        hash_md5.update(text.encode('utf-8'))\n        return hash_md5.hexdigest()\n\n    modified_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return string_to_md5(modified_message)\n```", "```python\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    transformed_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n    \n    def string_to_md5(input_string):\n        return hashlib.md5(input_string.encode()).hexdigest()\n    \n    transformed_message = \"\"\n    for char in message:\n        transformed_char = switch_case(char)\n        transformed_char = vowel_change(transformed_char)\n        transformed_message += transformed_char\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md_f(message):\n    if not message:\n        return None\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n    \n    transformed_message = \"\"\n    for char in message:\n        char = switch_case(char)\n        char = vowel_change(char)\n        transformed_message += char\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    toggled_message = ''.join(switch_case(char) for char in message)\n    processed_message = ''.join(vowel_change(char) for char in toggled_message)\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(processed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        return char.lower() if char.isupper() else char.upper()\n    \n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    toggled_message = ''.join([switch_case(char) for char in message])\n    altered_message = ''.join([vowel_change(char) for char in toggled_message])\n    \n    def string_to_md5(string):\n        return hashlib.md5(string.encode()).hexdigest()\n    \n    return string_to_md5(altered_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    toggled_message = ''.join([switch_case(char) for char in message])\n    processed_message = ''.join([vowel_change(char) for char in toggled_message])\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(processed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    toggled_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    return string_to_md5(toggled_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        else:\n            return char\n\n    toggled_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return hashlib.md5(toggled_message.encode()).hexdigest()\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_character_change(s):\n        vowels = 'aeiouAEIOU'\n        result = []\n        for char in s:\n            if char in vowels:\n                result.append(chr(ord(char) + 2))\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    transformed_message = vowel_character_change(switch_case(message))\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_character_change(s):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in s:\n            if char in vowels:\n                result += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += char\n        return result\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    message = switch_case(message)\n    message = vowel_character_change(message)\n    return string_to_md5(message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_character_change(s):\n        result = []\n        for char in s:\n            if char.lower() in 'aeiou':\n                ascii_val = ord(char) + 2\n                if ascii_val > 122:\n                    ascii_val -= 26\n                char = chr(ascii_val)\n            result.append(char)\n        return ''.join(result)\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    transformed_message = vowel_character_change(switch_case(message))\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    \n    def vowel_character_change(s):\n        vowels = 'aeiouAEIOU'\n        shifted_vowels = ''.join([chr(ord(vowel) + 2) if vowel in vowels else vowel for vowel in s])\n        return shifted_vowels\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    transformed_message = switch_case(message)\n    transformed_message = vowel_character_change(transformed_message)\n    \n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(message):\n        return message.swapcase()\n    \n    def vopot_chopinghcter_changehage(message):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in message:\n            if char in vowels:\n                result += chr(ord(char) + 2)\n            else:\n                result += char\n        return result\n    \n    def string_to_md5(message):\n        return hashlib.md5(message.encode()).hexdigest()\n    \n    message = switch_case(message)\n    message = vopot_chopinghcter_changehage(message)\n    return string_to_md5(message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    def string_to_md5(input_string):\n        return hashlib.md5(input_string.encode()).hexdigest()\n    \n    transformed_message = ''.join(vowel_change(switch_case(char)) for char in message)\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    def string_to_md5(input_string):\n        hash_obj = hashlib.md5(input_string.encode())\n        return hash_obj.hexdigest()\n    \n    modified_message = ''.join(vowel_change(switch_case(char)) for char in message)\n    return string_to_md5(modified_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            return char.upper() if char.islower() else char.lower()\n        return char\n\n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n\n    def string_to_md5(input_string):\n        return hashlib.md5(input_string.encode()).hexdigest()\n\n    transformed_message = ''.join(vowel_change(switch_case(char)) for char in message)\n    return string_to_md5(transformed_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    def string_to_md5(input_string):\n        return hashlib.md5(input_string.encode()).hexdigest()\n    \n    modified_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return string_to_md5(modified_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr(ord(char) + 2)\n        else:\n            return char\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    modified_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    return string_to_md5(modified_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join(chr(ord(char)+2) if char in vowels else char for char in s)\n    \n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n    \n    encoded_message = switch_case(message)\n    encoded_message = vowel_change(encoded_message)\n    \n    return string_to_md5(encoded_message)\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join(chr(ord(char) + 2) if char in vowels else char for char in s)\n    \n    adjusted_message = switch_case(message)\n    adjusted_message = vowel_change(adjusted_message)\n    \n    md5_hash = hashlib.md5(adjusted_message.encode()).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for char in s:\n            if char in vowels:\n                new_s += chr(ord(char) + 2)\n            else:\n                new_s += char\n        return new_s\n    \n    adjusted_message = vowel_change(switch_case(message))\n    md5_hash = hashlib.md5(adjusted_message.encode()).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n    \n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    adjusted_message = ''.join([vowel_change(switch_case(char)) for char in message])\n    md5_hash = hashlib.md5(adjusted_message.encode()).hexdigest()\n    \n    return md5_hash\n```", "```python\nimport hashlib\n\ndef encode_md5(message):\n    if not message:\n        return None\n    \n    def switch_case(s):\n        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join([chr(ord(i)+2) if i in vowels else i for i in s])\n\n    def string_to_md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n\n    adjusted_message = switch_case(message)\n    adjusted_message = vowel_change(adjusted_message)\n    \n    return string_to_md5(adjusted_message)\n```"]}, "3": {"level 1": ["```python\ndef encode_cyclic_shift(s):\n    def swap_case(c):\n        if c.isalpha():\n            return c.upper() if c.islower() else c.lower()\n        return c\n\n    def replace_vowel(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            return chr((ord(c.lower()) - ord('a') + 2) % 26 + ord('a'))\n        return c\n\n    def cycle_group(s):\n        return s[1:] + s[0]\n\n    result = ''\n    for i in range(0, len(s), 3):\n        group = s[i:i + 3]\n        transformed_group = ''.join(replace_vowel(swap_case(c)) for c in group)\n        result += cycle_group(transformed_group)\n\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def swap_case(s):\n        return s.swapcase()\n\n    def replace_vowels(s):\n        vowels = 'aeiouAEIOU'\n        result = []\n        for char in s:\n            if char in vowels:\n                new_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                if char.isupper():\n                    new_char = new_char.upper()\n                result.append(new_char)\n            else:\n                result.append(char)\n        return ''.join(result)\n\n    def cycle_groups_of_three(s):\n        groups = [s[i:i+3] for i in range(0, len(s), 3)]\n        result = []\n        for group in groups:\n            result.append(group[-1] + group[:-1])\n        return ''.join(result)\n\n    s = swap_case(s)\n    s = replace_vowels(s)\n    s = cycle_groups_of_three(s)\n    \n    return s\n```  ", "```python\ndef encode_cyclic_shift(s):\n    def swap_case_and_replace_vowels(char):\n        vowels = \"AEIOUaeiou\"\n        if char.isalpha():\n            if char.upper() in vowels:\n                return chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                return char.swapcase()\n        else:\n            return char\n    \n    s_transformed = ''.join([swap_case_and_replace_vowels(char) for char in s])\n    \n    encoded_text = \"\"\n    for i in range(0, len(s_transformed), 3):\n        encoded_text += s_transformed[i+1:i+3] + s_transformed[i] + s_transformed[i+3:i+1]\n    \n    return encoded_text\n```", "```python\ndef encode_cyclic_shift(s):\n    def swap_case_char(c):\n        if c.isalpha():\n            return c.upper() if c.islower() else c.lower()\n        return c\n\n    def replace_vowels(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        return c\n\n    def cyclic_shift(s):\n        result = ''\n        for i in range(0, len(s), 3):\n            result += s[i+1:i+3] + s[i] if i+2 < len(s) else s[i+1:] + s[i]\n        return result\n\n    transformed_str = ''.join(replace_vowels(swap_case_char(c)) for c in s)\n    encoded_str = cyclic_shift(transformed_str)\n    return encoded_str\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_three(s):\n        return s[-3:] + s[:-3]\n\n    def encode_char(c):\n        if c.isalpha():\n            if c.islower():\n                c = c.upper()\n            else:\n                c = c.lower()\n            if c in 'aeiouAEIOU':\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                return c\n        return c\n\n    encoded_str = ''.join(encode_char(c) for c in s)\n    encoded_str = ''.join(shift_three(encoded_str[i:i+3]) for i in range(0, len(encoded_str), 3))\n    return encoded_str\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_letter(c):\n        if c.isalpha():\n            if c.lower() in \"aeiou\":\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return c.swapcase()\n        return c\n    \n    def cycle_block(block):\n        return block[1] + block[2] + block[0]\n    \n    result = ''.join([shift_letter(s[i]) for i in range(len(s))])\n    result = ''.join([cycle_block(result[i:i+3]) for i in range(0, len(result), 3)])\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in vowels:\n                encoded += chr((ord(s[i].lower()) - ord('a') + 2) % 26 + ord('a')).swapcase()\n            else:\n                encoded += s[i].swapcase()\n        else:\n            encoded += s[i]\n    \n    result = ''\n    for i in range(0, len(encoded), 3):\n        result += encoded[i+1:i+3] + encoded[i]\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift(c, n):\n        if c.isalpha():\n            base = ord('A') if c.isupper() else ord('a')\n            return chr((ord(c) - base + n) % 26 + base)\n        return c\n\n    def encode_block(block):\n        return ''.join(shift(c, 2) if c.lower() in 'aeiou' else c.swapcase() for c in block)\n\n    result = \"\"\n    for i in range(0, len(s), 3):\n        block = s[i:i+3]\n        encoded_block = encode_block(block)\n        result += encoded_block[-1] + encoded_block[:-1]\n\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift(c, n):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + n) % 26 + base)\n        return c\n    \n    def encode_block(block):\n        vowels = set('aeiouAEIOU')\n        result = []\n        for i, c in enumerate(block):\n            if c in vowels:\n                result.append(shift(c, 2))\n            else:\n                result.append(shift(c, 0))\n            if i % 3 == 2:\n                result[-3], result[-1] = result[-1], result[-3]\n        return result\n    \n    return ''.join(''.join(encode_block(s[i:i+3])) for i in range(0, len(s), 3))\n```  ", "```python\ndef encode_cyclic_shift(s):\n    def shift(char, n):\n        if char.isalpha():\n            case = str.upper if char.isupper() else str.lower\n            vowels = 'aeiou'\n            if char.lower() in vowels:\n                return case(vowels[(vowels.index(char.lower()) + n) % len(vowels)])\n            else:\n                return case(chr((ord(char) - ord('a') + n) % 26 + ord('a')))\n        return char\n    \n    def cycle_block(block):\n        return block[-1] + block[:-1]\n    \n    encoded = ''.join([shift(char, 2) for char in s])\n    encoded_blocks = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    cyclic_encoded_blocks = [cycle_block(block) for block in encoded_blocks]\n    \n    return ''.join(cyclic_encoded_blocks)\n```", "```python\ndef ert(mupw):\n    def rotate_triplets(s):\n        return s[-3:] + s[:-3]\n\n    def toggle_capitalization(s):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n    def substitute_vowels(s):\n        vowels = 'aeiou'\n        mapping = {v: chr(ord(v) + 2) for v in vowels}\n        return ''.join(mapping[c] if c in vowels else c for c in s)\n\n    result = mupw\n    result = toggle_capitalization(result)\n    result = substitute_vowels(result)\n    for i in range(0, len(result), 3):\n        result = result[:i] + rotate_triplets(result[i:i+3]) + result[i+3:]\n\n    return result\n```", "```python\ndef ert(mupw):\n    def rotate_triplet(triplet):\n        return triplet[1] + triplet[2] + triplet[0]\n\n    def encode_char(char):\n        if char.isalpha():\n            if char in 'aeiouAEIOU':\n                return chr((ord(char.lower()) - 97 + 2) % 26 + 97).upper()\n            else:\n                return char.swapcase()\n        else:\n            return char\n\n    encoded = ''.join([encode_char(char) for char in mupw])\n    encoded_triplets = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    rotated_triplets = [rotate_triplet(triplet) for triplet in encoded_triplets]\n    \n    return ''.join(rotated_triplets)\n```", "```python\ndef ert(mupw):\n    def toggle_capitalization(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        else:\n            return char\n\n    def substitute_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    def rotate_triplets(text):\n        triplets = [text[i:i+3] for i in range(0, len(text), 3)]\n        rotated_triplets = [triplet[::-1] for triplet in triplets]\n        return ''.join(rotated_triplets)\n\n    encoded_mupw = ''.join(substitute_vowels(toggle_capitalization(char)) for char in mupw)\n    return rotate_triplets(encoded_mupw)\n```", "```python\ndef ert(mupw):\n    def rotate_triplet(triplet):\n        return triplet[-1] + triplet[0] + triplet[1]\n\n    def encode_char(char):\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                char = chr((ord(char) - 97 + 2) % 26 + 97)\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n        return char\n\n    encoded = ''\n    for i in range(0, len(mupw), 3):\n        triplet = mupw[i:i+3]\n        if len(triplet) == 3:\n            encoded_triplet = ''.join([encode_char(char) for char in triplet])\n            encoded_triplet = rotate_triplet(encoded_triplet)\n            encoded += encoded_triplet\n        else:\n            encoded += ''.join([encode_char(char) for char in triplet])\n\n    return encoded\n```", "```python\ndef ert(mupw):\n    def rotate_triplet(triplet):\n        return triplet[-1] + triplet[0] + triplet[1]\n    \n    encoded = \"\"\n    for i in range(0, len(mupw), 3):\n        chunk = mupw[i:i+3]\n        modified_chunk = \"\"\n        \n        for char in chunk:\n            if char.isalpha():\n                if char.islower():\n                    modified_chunk += char.upper()\n                else:\n                    modified_chunk += char.lower()\n            elif char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                modified_chunk += chr(ord(char) + 2)\n            else:\n                modified_chunk += char\n        \n        encoded += rotate_triplet(modified_chunk)\n    \n    return encoded\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_chunk(chunk):\n        return chunk[-1] + chunk[:-1]\n\n    vowels = \"AEIOUaeiou\"\n    result = []\n    chunk = \"\"\n\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                if char.lower() == 'y':\n                    chunk += 'A'\n                elif char.lower() == 'z':\n                    chunk += 'B'\n                else:\n                    chunk += chr(ord(char) + 2)\n            else:\n                chunk += char.swapcase()\n        else:\n            chunk += char\n\n        if len(chunk) == 3:\n            result.append(shift_chunk(chunk))\n            chunk = \"\"\n\n    if chunk:\n        result.append(shift_chunk(chunk))\n\n    return \"\".join(result)\n```", "```python\ndef encode_cyclic_shift(s):\n    def rotate_chunk(chunk):\n        return chunk[-1] + chunk[0] + chunk[1]\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    rotate_flag = False\n    chunk = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    result += chr((ord(char) - 97 + 2) % 26 + 97)\n                else:\n                    result += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                if rotate_flag:\n                    result += rotate_chunk(chunk)\n                    chunk = \"\"\n                    rotate_flag = False\n                result += char.swapcase()\n        else:\n            if rotate_flag:\n                result += rotate_chunk(chunk)\n                chunk = \"\"\n                rotate_flag = False\n            result += char\n        chunk += char\n        if len(chunk) == 3:\n            rotate_flag = True\n    \n    if rotate_flag:\n        result += rotate_chunk(chunk)\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    result = ''\n    shift = 3\n\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n\n        result += new_char\n\n    result = result[-shift:] + result[:-shift]\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift(s):\n        return s[-1] + s[:-1]\n\n    def encode_char(c):\n        vowels = \"aeiouAEIOU\"\n        if c.isalpha():\n            if c.lower() in vowels:\n                return chr((ord(c) + 2 - 65) % 26 + 65) if c.isupper() else chr((ord(c) + 2 - 97) % 26 + 97)\n            else:\n                return c.lower().swapcase()\n        return c\n\n    result = \"\"\n    chunk = \"\"\n    for char in s:\n        chunk += encode_char(char)\n        if len(chunk) == 3:\n            result += shift(chunk)\n            chunk = \"\"\n    if chunk:\n        result += shift(chunk)\n    return result\n\n```", "```python\ndef encode_cyclic_shift(s):\n    def rotate_chunk(chunk):\n        return chunk[-1] + chunk[0] + chunk[1]\n\n    def encode_char(ch):\n        vowels = 'aeiouAEIOU'\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                return chr((ord(ch) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                return ch.swapcase()\n        else:\n            return ch\n\n    encoded = ''.join([rotate_chunk(s[i:i+3]) if i % 3 == 0 else encode_char(s[i]) for i in range(len(s))])\n    \n    return encoded\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        vowels = 'aeiouAEIOU'\n        if c.isalpha():\n            if c.lower() in vowels:\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return c.swapcase()\n        else:\n            return c\n\n    def rotate_triplets(s):\n        if len(s) < 3:\n            return s\n        else:\n            return s[2] + s[0] + s[1] + rotate_triplets(s[3:])\n\n    encoded = ''.join(shift_char(c) for c in s)\n    return rotate_triplets(encoded)\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        vowels = 'aeiouAEIOU'\n        if c.isalpha():\n            if c.lower() in vowels:\n                shifted = ord(c) + 2\n                if c.isupper() and shifted > ord('Z'):\n                    shifted -= 26\n                elif c.islower() and shifted > ord('z'):\n                    shifted -= 26\n                return chr(shifted)\n            else:\n                return c\n        else:\n            return c\n\n    def rotate_triplets(s):\n        result = ''\n        for i in range(0, len(s), 3):\n            triplet = s[i:i+3]\n            if len(triplet) < 3:\n                result += triplet\n            else:\n                result += triplet[1] + triplet[2] + triplet[0]\n        return result\n\n    altered_string = ''.join(shift_char(c) for c in s)\n    encoded_string = rotate_triplets(altered_string)\n    return encoded_string\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(char):\n        vowels = 'aeiouAEIOU'\n        if char.isalpha():\n            if char.lower() in vowels:\n                return chr((ord(char.lower()) - 97 + 2) % 26 + 97).swapcase()\n            else:\n                return char.swapcase()\n        else:\n            return char\n    \n    def rotate_triplets(string):\n        return ''.join(string[i:i+3][::-1] for i in range(0, len(string), 3))\n    \n    encoded = ''.join(shift_char(char) for char in s)\n    return rotate_triplets(encoded)\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(c):\n        if c.isalpha():\n            if c in 'aeiouAEIOU':\n                return chr((ord(c.lower()) - 97 + 2) % 26 + 97).swapcase()\n            else:\n                return c.swapcase()\n        else:\n            return c\n\n    encoded = ''.join(shift_char(c) for c in s)\n\n    result = ''\n    for i in range(0, len(encoded), 3):\n        result += encoded[i+1:i+3] + encoded[i] if i + 2 < len(encoded) else encoded[i:]\n\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(c, shift):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        return c\n\n    def encode_triplets(s):\n        return ''.join(s[i:i+3][::-1] for i in range(0, len(s), 3))\n\n    encoded = ''.join(shift_char(c, 2) if c.lower() in 'aeiou' else c.swapcase() for c in s)\n    return encode_triplets(encoded)\n```", "```python\ndef encode_cyclic_shift(s):\n    def is_vowel(letter):\n        return letter.lower() in \"aeiou\"\n    \n    def encode_letter(letter):\n        if letter.isalpha():\n            if is_vowel(letter):\n                return chr((ord(letter) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return letter.swapcase()\n        else:\n            return letter\n    \n    def cyclic_permutation(segment):\n        return segment[-1] + segment[:-1]\n    \n    result = ''.join([encode_letter(char) for char in s])\n    result = ''.join([cyclic_permutation(result[i:i+3]) for i in range(0, len(result), 3)])\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def cyclic_permutation(sub):\n        return sub[-1] + sub[:-1]\n\n    def encode_char(c):\n        vowels = 'aeiouAEIOU'\n        if c.isalpha():\n            if c in vowels:\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return c.swapcase()\n        return c\n\n    modified = [encode_char(ch) for ch in s]\n    result = ''\n    for i in range(0, len(modified), 3):\n        result += ''.join(cyclic_permutation(modified[i:i + 3]))\n\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def is_vowel(char):\n        vowels = \"aeiou\"\n        return char.lower() in vowels\n\n    def switch_case(char):\n        if char.isalpha():\n            return char.lower() if char.isupper() else char.upper()\n        return char\n\n    def encode_char(char):\n        if char.isalpha():\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            return new_char.upper() if char.isupper() else new_char\n        return char\n\n    def cyclic_permutation(s):\n        return s[3:] + s[:3]\n    \n    modified_str = ''.join([encode_char(switch_case(char)) if is_vowel(char) else encode_char(char) for char in s])\n    encoded_str = ''.join([cyclic_permutation(modified_str[i:i+3]) for i in range(0, len(modified_str), 3)])\n    return encoded_str\n```  ", "```python\ndef encode_cyclic_shift(s):\n    def is_vowel(char):\n        vowels = 'aeiouAEIOU'\n        return char in vowels\n\n    def cyclic_shift(s):\n        return s[-3:] + s[:-3]\n\n    result = []\n    for i in range(len(s)):\n        char = s[i]\n        if char.isalpha():\n            if is_vowel(char):\n                result.append(chr((ord(char.lower()) - 97 + 2) % 26 + 97).swapcase())\n            else:\n                result.append(char.swapcase())\n        else:\n            result.append(char)\n\n    modified_string = ''.join(result)\n\n    encoded_string = ''\n    for i in range(0, len(modified_string), 3):\n        encoded_string += cyclic_shift(modified_string[i:i+3])\n\n    return encoded_string\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    def encode_char(c):\n        if c.isalpha():\n            if c.lower() in vowels:\n                return chr((ord(c.lower()) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return c.swapcase()\n        else:\n            return c\n\n    def cyclic_permutation(s):\n        return s[-3:] + s[:-3]\n\n    modified = ''.join(encode_char(c) for c in s)\n    result = ''\n    for i in range(0, len(modified), 3):\n        result += cyclic_permutation(modified[i:i+3])\n\n    return result\n```  "], "level 2": ["```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    encoded_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                encoded_str += char.swapcase()\n        else:\n            encoded_str += char\n    \n    result = ''\n    for i in range(0, len(encoded_str), 3):\n        result += encoded_str[i+1] + encoded_str[i+2] + encoded_str[i]\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_group(group):\n        return group[1:] + group[0]\n\n    vowels = 'AEIOUaeiou'\n    encoded_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                char = chr((ord(char) - ord('A') + 2) % 26 + ord('A')) if char.isupper() else chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                char = char.swapcase()\n            encoded_str += char\n        else:\n            encoded_str += char\n\n    encoded_str = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    encoded_str = [shift_group(group) for group in encoded_str]\n\n    return ''.join(encoded_str)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = \"aeiouAEIOU\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_str += encoded_char\n    \n    encoded_segments = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    cyclic_shifted_segments = [segment[1:] + segment[0] for segment in encoded_segments]\n    \n    return ''.join(cyclic_shifted_segments)\n```  ", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'AEIOUaeiou'\n    encoded_str = ''\n\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                new_char = char.swapcase()\n            encoded_str += new_char\n        else:\n            encoded_str += char\n\n    encoded_str = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    encoded_str = [group[1:] + group[0] for group in encoded_str]\n\n    return ''.join(encoded_str)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    encoded_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A')) if char.isupper() else chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_str += encoded_char\n    \n    encoded_str = encoded_str.lower()\n    \n    encoded_list = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    cyclic_encoded_list = [group[1:] + group[0] for group in encoded_list]\n    \n    return ''.join(cyclic_encoded_list)\n```  ", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    new_s = ''\n    \n    # Change case of each letter\n    for char in s:\n        if char.isalpha():\n            new_s += char.swapcase()\n        else:\n            new_s += char\n\n    # Alter each vowel to the next vowel two places forward\n    result = ''\n    for char in new_s:\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % len(vowels)\n            if char.isupper():\n                result += vowels[index].upper()\n            else:\n                result += vowels[index]\n        else:\n            result += char\n    \n    # Divide string into three-character chunks and rotate each chunk\n    rotated_chunks = []\n    for i in range(0, len(result), 3):\n        chunk = result[i:i+3]\n        rotated_chunk = chunk[1:] + chunk[0]\n        rotated_chunks.append(rotated_chunk)\n\n    return ''.join(rotated_chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiou'\n    \n    def shift_chunk(chunk):\n        return chunk[1:] + chunk[0]\n    \n    def shift_vowel(v):\n        if v in vowels:\n            return vowels[(vowels.index(v) + 2) % len(vowels)]\n        return v\n    \n    s = s.swapcase()\n    s = ''.join([shift_vowel(c) for c in s])\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = ''.join([shift_chunk(chunk) for chunk in s])\n    \n    return s\n```  ", "```python\ndef encode_cyclic_shift(s):\n    def rotate_chunk(chunk):\n        return chunk[1:] + chunk[0]\n    \n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    \n    # Change case of each letter\n    modified_s = ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n    \n    # Alter vowels\n    altered_s = ''.join([vowels[c] if c in vowels else c for c in modified_s])\n    \n    # Divide into three-character chunks and rotate\n    encoded_s = ''\n    for i in range(0, len(altered_s), 3):\n        chunk = altered_s[i:i+3]\n        encoded_s += rotate_chunk(chunk)\n    \n    return encoded_s\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_chunk(chunk):\n        return chunk[1:] + chunk[0]\n\n    vowels = 'aeiouAEIOU'\n    vowels_mapping = {vowels[i]: vowels[(i + 2) % len(vowels)] for i in range(len(vowels))}\n    \n    s = ''.join([c.lower() if c.isalpha() else c for c in s])\n    s = ''.join([vowels_mapping[c] if c in vowels_mapping else c for c in s])\n    \n    chunks = [s[i:i+3] for i in range(0, len(s), 3)]\n    shifted_chunks = [shift_chunk(chunk) for chunk in chunks]\n    \n    return ''.join(shifted_chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_chunk(chunk):\n        return chunk[1:] + chunk[0]\n\n    vowels = 'AEIOUaeiou'\n    vowel_map = {'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A', 'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n\n    s = s.swapcase()\n    s = ''.join([vowel_map[c] if c in vowels else c for c in s])\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = ''.join([shift_chunk(chunk) for chunk in s])\n\n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    def toggle_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def substitute_vowel(c):\n        vowels = 'AEIOUaeiou'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    def cycle_block(block):\n        return block[1:] + block[0]\n\n    s = ''.join([substitute_vowel(toggle_case(c)) for c in s])\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = ''.join([cycle_block(block) for block in s])\n    \n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    encoded_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_str += chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                encoded_str += char.swapcase()\n        else:\n            encoded_str += char\n    \n    blocks = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    encoded_blocks = [block[1:] + block[0] for block in blocks]\n    \n    return ''.join(encoded_blocks)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'AEIOUaeiou'\n    encoded_str = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.upper() in vowels:\n                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65)\n            else:\n                encoded_char = char.swapcase()\n            encoded_str += encoded_char\n        else:\n            encoded_str += char\n    \n    encoded_blocks = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    cyclic_shifted_blocks = [(block[1:] + block[0]) for block in encoded_blocks]\n    \n    return ''.join(cyclic_shifted_blocks)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    encoded_str = ''\n    \n    # Toggle case of each character\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encoded_str += char.upper()\n            else:\n                encoded_str += char.lower()\n        else:\n            encoded_str += char\n    \n    # Substitute vowels with vowels two letters forward\n    for char in encoded_str:\n        if char in vowels:\n            if char == 'a':\n                encoded_str = encoded_str.replace(char, 'c')\n            elif char == 'e':\n                encoded_str = encoded_str.replace(char, 'g')\n            elif char == 'i':\n                encoded_str = encoded_str.replace(char, 'k')\n            elif char == 'o':\n                encoded_str = encoded_str.replace(char, 'q')\n            elif char == 'u':\n                encoded_str = encoded_str.replace(char, 'w')\n    \n    # Split string into blocks of three characters and cycle each block\n    result = ''\n    for i in range(0, len(encoded_str), 3):\n        block = encoded_str[i:i+3]\n        cycled_block = block[1:] + block[0]\n        result += cycled_block\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    # Toggle case of each character\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    # Substitute vowels with vowels two letters forward in the alphabet\n    for char in result:\n        if char in vowels:\n            if char == 'a':\n                result = result.replace('a', 'c')\n            elif char == 'e':\n                result = result.replace('e', 'g')\n            elif char == 'i':\n                result = result.replace('i', 'k')\n            elif char == 'o':\n                result = result.replace('o', 'q')\n            elif char == 'u':\n                result = result.replace('u', 'w')\n    \n    # Split the string into blocks of three characters and cycle each block\n    encoded = ''\n    for i in range(0, len(result), 3):\n        block = result[i:i+3]\n        block = block[1:] + block[0]\n        encoded += block\n    \n    return encoded\n```", "```python\ndef encode_cyclic_shift(s):\n    # Convert the case of each alphabet\n    s = s.swapcase()\n    \n    # Define vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Shift vowels ahead by two positions in the alphabet\n    s = ''.join(chr(ord(char) + 2) if char in vowels else char for char in s)\n    \n    # Segment the string into trios and reposition the first character to the end in each trio\n    encoded_str = ''\n    for i in range(0, len(s), 3):\n        trio = s[i:i+3]\n        encoded_str += trio[1:] + trio[0]\n    \n    return encoded_str\n```", "```python\ndef encode_cyclic_shift(input_string):\n    # Convert the case of each alphabet in the string\n    modified_string = \"\".join([char.lower() if char.isupper() else char.upper() for char in input_string])\n\n    # Shift each vowel in the new string ahead by two positions in the alphabet\n    vowels = \"aeiou\"\n    shifted_string = \"\".join([chr(ord(char) + 2) if char.lower() in vowels else char for char in modified_string])\n\n    # Segment the altered string into trios of characters and reposition the first character to the end in each trio\n    trio_list = [shifted_string[i:i+3] for i in range(0, len(shifted_string), 3)]\n    restructured_string = \"\".join([trio[1:] + trio[0] for trio in trio_list])\n\n    return restructured_string\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            shifted_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            if char.isupper():\n                return shifted_char.upper()\n            else:\n                return shifted_char\n        return char\n    \n    s = ''.join([shift_vowel(c) for c in s])\n    segments = [s[i:i+3] for i in range(0, len(s), 3)]\n    encoded_segments = [segment[1:] + segment[0] for segment in segments]\n    \n    return ''.join(encoded_segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_vowels(s):\n        vowels = \"aeiouAEIOU\"\n        shifted_vowels = \"\"\n        for char in s:\n            if char in vowels:\n                char_index = (ord(char.lower()) - ord('a') + 2) % 26\n                shifted_char = chr(ord('a') + char_index)\n                shifted_vowels += shifted_char\n            else:\n                shifted_vowels += char\n        return shifted_vowels\n\n    def reposition_trios(s):\n        trios = [s[i:i+3] for i in range(0, len(s), 3)]\n        repositioned_trios = [trio[1:] + trio[0] for trio in trios]\n        return \"\".join(repositioned_trios)\n\n    s = s.swapcase()\n    s = shift_vowels(s)\n    s = reposition_trios(s)\n\n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr((ord(char) - ord('A' if char.isupper() else 'a') + 2) % 26 + ord('A' if char.isupper() else 'a'))\n        return char\n    \n    s = ''.join([shift_vowel(c) for c in s])\n    s = [s[i:i+3] for i in range(0, len(s), 3)]\n    s = [s[i][1:] + s[i][0] + s[i][2] for i in range(len(s))]\n    \n    return ''.join(s)\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    # Flip the case of all alphabetic characters\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    # Shift each vowel forward by two characters in the alphabet\n    encoded = ''\n    for char in result:\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            if char.islower():\n                encoded += chr(ord('a') + index)\n            else:\n                encoded += chr(ord('A') + index)\n        else:\n            encoded += char\n    \n    # Break the string into groups of three characters and move the first character to the end\n    final_encoded = ''\n    for i in range(0, len(encoded), 3):\n        group = encoded[i:i+3]\n        final_encoded += group[1:] + group[0]\n    \n    return final_encoded\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    encoded = ''\n    for char in result:\n        if char in vowels:\n            encoded += chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded += char\n    \n    temp = [encoded[i:i+3] for i in range(0, len(encoded), 3)]\n    shifted = [group[1:] + group[0] for group in temp]\n    \n    return ''.join(shifted)\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift_char(char, shift):\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            shifted = chr((ord(char) - base + shift) % 26 + base)\n            return shifted\n        return char\n    \n    def encode_vowels(s):\n        vowels = set('aeiouAEIOU')\n        return ''.join([shift_char(char, 2) if char in vowels else char for char in s])\n    \n    def group_and_shift(s):\n        groups = [s[i:i+3] for i in range(0, len(s), 3)]\n        shifted_groups = [group[1:] + group[0] for group in groups]\n        return ''.join(shifted_groups)\n    \n    s = ''.join([char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s])\n    s = encode_vowels(s)\n    s = group_and_shift(s)\n    \n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    def shift(char):\n        if char in 'aeiouAEIOU':\n            return chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n        return char\n\n    result = ''.join([shift(c) if c.isalpha() else c for c in s.swapcase()])\n    result = [result[i:i+3] for i in range(0, len(result), 3)]\n    return ''.join([group[1:] + group[0] for group in result])\n```  ", "```python\ndef encode_cyclic_shift(s):\n    vowels = \"AEIOUaeiou\"\n    encoded_str = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                encoded_str += chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encoded_str += char.swapcase()\n        else:\n            encoded_str += char\n\n    groups = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    encoded_groups = [group[1:] + group[0] for group in groups]\n    \n    return ''.join(encoded_groups)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def replace_vowels(s):\n        vowels = 'aeiou'\n        result = ''\n        for char in s:\n            if char.lower() in vowels:\n                index = (vowels.index(char.lower()) + 2) % 5\n                result += vowels[index] if char.islower() else vowels[index].upper()\n            else:\n                result += char\n        return result\n\n    def cycle_groups(s):\n        result = ''\n        for i in range(0, len(s), 3):\n            group = s[i:i+3]\n            result += group[1:] + group[0]\n        return result\n\n    s = switch_case(s)\n    s = replace_vowels(s)\n    s = cycle_groups(s)\n\n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    vowels = 'AEIOUaeiou'\n    encoded_str = ''\n    \n    # Step 1: Switch case of each character\n    switched_case = ''.join([char.swapcase() for char in s])\n    \n    # Step 2: Replace vowels with vowels two steps later in the alphabet\n    for char in switched_case:\n        if char in vowels:\n            encoded_str += chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            encoded_str += char\n    \n    # Step 3: Divide into groups of three characters and cyclic shift\n    groups = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)]\n    for group in groups:\n        encoded_str += group[1:] + group[0]\n    \n    return encoded_str\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join(char.upper() if char.islower() else char.lower() for char in s)\n\n    def replace_vowels(s):\n        vowels = 'aeiou'\n        return \"\".join(chr(ord(char)+2) if char in vowels else char for char in s)\n\n    def cycle_groups(s):\n        groups = [s[i:i+3] for i in range(0, len(s), 3)]\n        return \"\".join(group[1:] + group[0] for group in groups)\n\n    s = switch_case(s)\n    s = replace_vowels(s)\n    s = cycle_groups(s)\n    \n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def shift_vowels(s):\n        vowels = 'AEIOUaeiou'\n        result = ''\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                result += vowels[index]\n            else:\n                result += char\n        return result\n\n    def cycle_groups(s):\n        if len(s) % 3 != 0:\n            s += ' ' * (3 - len(s) % 3)\n        result = ''\n        for i in range(0, len(s), 3):\n            result += s[i+1] + s[i+2] + s[i]\n        return result\n\n    s = switch_case(s)\n    s = shift_vowels(s)\n    s = cycle_groups(s)\n\n    return s\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def replace_vowels(s):\n        vowels = \"AEIOUaeiou\"\n        result = \"\"\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                result += vowels[index]\n            else:\n                result += char\n        return result\n    \n    def cycle_groups(s):\n        result = \"\"\n        for i in range(0, len(s), 3):\n            result += s[i+1:i+3] + s[i]\n        return result\n    \n    s = switch_case(s)\n    s = replace_vowels(s)\n    s = cycle_groups(s)\n    \n    return s\n```"], "level 3": ["```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                new_s += vowels[index]\n            else:\n                new_s += char\n        return new_s\n    \n    m = vowel_change(switch_case(s))\n    result = ''\n    for i in range(0, len(m), 3):\n        if i + 3 <= len(m):\n            result += m[i+1:i+3] + m[i]\n        else:\n            result += m[i:]\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        return ''.join(chr(ord(char) + 2) if char in vowels else char for char in s)\n    \n    m = vowel_change(switch_case(s))\n    \n    result = ''\n    for i in range(0, len(m), 3):\n        if i+3 <= len(m):\n            result += m[i+1] + m[i+2] + m[i]\n        else:\n            result += m[i:]\n    \n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        return ''.join([chr(ord(char)+2) if char in vowels else char for char in s])\n\n    m = vowel_change(switch_case(s))\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    \n    for i in range(len(groups)):\n        if len(groups[i]) == 3:\n            groups[i] = groups[i][1:] + groups[i][0]\n    \n    return ''.join(groups)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        new_s = \"\"\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                new_s += vowels[index]\n            else:\n                new_s += char\n        return new_s\n    \n    m = vowel_change(switch_case(s))\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    \n    encoded = \"\"\n    for group in groups:\n        if len(group) == 3:\n            encoded += group[1] + group[2] + group[0]\n    \n    return encoded\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        new_s = ''\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                new_s += vowels[index]\n            else:\n                new_s += char\n        return new_s\n\n    m = vowel_change(switch_case(s))\n    grouped_m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(grouped_m)):\n        if len(grouped_m[i]) == 3:\n            grouped_m[i] = grouped_m[i][1:] + grouped_m[i][0]\n    return ''.join(grouped_m)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        result = \"\"\n        for char in s:\n            if char in vowels:\n                index = (ord(char.lower()) - ord('a') + 2) % 26\n                new_char = chr(ord('a') + index)\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result\n    \n    m = vowel_change(switch_case(s))\n    \n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(segments)):\n        if len(segments[i]) == 3:\n            segments[i] = segments[i][1:] + segments[i][0]\n    \n    return \"\".join(segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        result = \"\"\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                result += vowels[index]\n            else:\n                result += char\n        return result\n\n    m = vowel_change(switch_case(s))\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(0, len(segments), 3):\n        segments[i] = segments[i][1:] + segments[i][0]\n    return ''.join(segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return \"\".join([char.lower() if char.isupper() else char.upper() for char in s])\n\n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        result = \"\"\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                result += vowels[index]\n            else:\n                result += char\n        return result\n\n    m = vowel_change(switch_case(s))\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    rotated_segments = [seg if len(seg) != 3 else seg[1:] + seg[:1] for seg in segments]\n    return \"\".join(rotated_segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n    \n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        result = []\n        for char in s:\n            if char in vowels:\n                if char == 'y':\n                    result.append('a')\n                elif char == 'Y':\n                    result.append('A')\n                else:\n                    index = (vowels.index(char) + 2) % len(vowels)\n                    result.append(vowels[index])\n            else:\n                result.append(char)\n        return ''.join(result)\n    \n    def rotate_segment(segment):\n        if len(set(segment)) == 1:\n            return segment[::-1]\n        else:\n            return segment\n    \n    m = vowel_change(switch_case(s))\n    segments = [m[i:i+3] for i in range(0, len(m), 3)]\n    processed_segments = [rotate_segment(segment) for segment in segments]\n    \n    return ''.join(processed_segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join([chr(ord(ch) + 2) if ch in vowels else ch for ch in s])\n\n    modified_s = vowel_change(switch_case(s))\n    segments = [modified_s[i:i+3] if len(modified_s[i:i+3])==3 else modified_s[i:i+3][1:] + modified_s[i:i+3][0] for i in range(0, len(modified_s), 3)]\n    \n    return ''.join(segments)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n    \n    def vowel_change(c):\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            index = (vowels.index(c.lower()) + 2) % len(vowels)\n            return vowels[index]\n        return c\n    \n    m = ''.join(vowel_change(switch_case(c)) for c in s)\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    result = ''\n    for trio in trios:\n        if len(trio) == 3:\n            result += trio[1] + trio[2] + trio[0]\n        else:\n            result += trio\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    switch_case = lambda x: x.lower() if x.isupper() else x.upper()\n    vowel_change = lambda x: chr((ord(x) - 65 + 2) % 26 + 65) if x.lower() in 'aeiou' else x\n    m = ''.join(vowel_change(switch_case(char)) for char in s)\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    result = ''.join([group[1:] + group[0] if len(group) == 3 else group for group in groups])\n    return result\n```  ", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    \n    def vowel_change(s):\n        vowels = 'AEIOUaeiou'\n        result = ''\n        for char in s:\n            if char in vowels:\n                index = (vowels.index(char) + 2) % len(vowels)\n                result += vowels[index]\n            else:\n                result += char\n        return result\n\n    m = vowel_change(switch_case(s))\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(trios)):\n        trios[i] = trios[i][1:] + trios[i][0]\n    return ''.join(trios)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    m = ''.join([vowel_change(switch_case(char)) for char in s])\n    trios = [m[i:i+3] for i in range(0, len(m), 3)]\n    \n    for i in range(len(trios)):\n        if len(trios[i]) == 3:\n            trios[i] = trios[i][1:] + trios[i][0]\n    \n    return ''.join(trios)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join([chr(ord(char)+2) if char in vowels else char for char in s])\n\n    m = vowel_change(switch_case(s))\n    return ''.join([m[i+1]+m[i+2]+m[i] if i+2 < len(m) else m[i+1]+m[i] for i in range(0, len(m), 3)])\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def vowel_change(char):\n        vowels = \"AEIOUaeiou\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n\n    m = \"\".join(vowel_change(switch_case(char)) for char in s)\n\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(chunks)):\n        chunks[i] = chunks[i][1:] + chunks[i][0]\n\n    return \"\".join(chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        else:\n            return c.lower()\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    m = ''.join([vowel_change(switch_case(c)) for c in s])\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(chunks[-1]) < 3:\n        last_chunk = chunks.pop()\n        last_chunk += last_chunk[0]\n        chunks.append(last_chunk)\n    return ''.join(chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        return c.lower() if c.isupper() else c.upper()    \n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    m = ''.join(vowel_change(switch_case(c)) for c in s)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n\n    for i in range(len(m)):\n        m[i] = m[i][1:] + m[i][0]\n\n    return ''.join(m)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    m = ''.join([vowel_change(switch_case(ch)) for ch in s])\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    shifted_chunks = [chunk[1:] + chunk[0] for chunk in chunks]\n    return ''.join(shifted_chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    m = ''.join([switch_case(c) for c in s])\n    m = ''.join([vowel_change(c) for c in m])\n\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(chunks[-1]) < 3:\n        chunks[-1] = chunks[-1].ljust(3, chunks[-1][0])\n\n    encoded_str = ''.join([chunk[1:] + chunk[0] for chunk in chunks])\n    \n    return encoded_str\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    s = ''.join(switch_case(c) for c in s)\n    m = ''.join(vowel_change(c) for c in s)\n\n    groups_of_three = [m[i:i+3] for i in range(0, len(m), 3)]\n    restructured = [group[1:] + group[0] for group in groups_of_three]\n\n    return ''.join(restructured)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def vowel_change(c):\n        vowels = \"AEIOUaeiou\"\n        if c in vowels:\n            idx = (vowels.index(c) + 2) % len(vowels)\n            return vowels[idx]\n        else:\n            return c\n\n    s = ''.join([switch_case(c) for c in s])\n    m = ''.join([vowel_change(c) for c in s])\n\n    groups = [m[i:i+3] for i in range(0, len(m), 3)]\n    result = ''\n    for group in groups:\n        if len(group) == 3:\n            result += group[1:] + group[0]\n        else:\n            result += group\n\n    return result\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in s:\n            if char in vowels:\n                if char == 'z':\n                    result += 'a' if char.islower() else 'A'\n                elif char == 'Z':\n                    result += 'A' if char.isupper() else 'a'\n                else:\n                    result += chr(ord(char) + 2)\n            else:\n                result += char\n        return result\n\n    m = vowel_change(switch_case(s))\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(chunks)):\n        if len(chunks[i]) == 3:\n            chunks[i] = chunks[i][1:] + chunks[i][0]\n    return ''.join(chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n    \n    def vowel_change(s):\n        vowels = \"aeiou\"\n        result = \"\"\n        for char in s:\n            if char.lower() in vowels:\n                index = (ord(char.lower()) - ord('a') + 2) % 26\n                new_char = chr(ord('a') + index)\n                result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result\n    \n    s = switch_case(s)\n    m = vowel_change(s)\n    \n    # Break 'm' into groups of three characters and rearrange\n    groups_of_three = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(groups_of_three[-1]) < 3:\n        groups_of_three[-1] = groups_of_three[-1].ljust(3, 'X')\n    final_result = ''.join([group[1:] + group[0] for group in groups_of_three])\n    \n    return final_result\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        elif ch.isupper():\n            return ch.lower()\n        else:\n            return ch\n\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n\n    s = ''.join([switch_case(ch) for ch in s])\n    m = ''.join([vowel_change(ch) for ch in s])\n\n    chunks = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(chunks[-1]) < 3:\n        last_chunk = chunks.pop()\n        last_chunk += ' ' * (3 - len(last_chunk))\n        last_chunk = last_chunk[1:] + last_chunk[0]\n        chunks.append(last_chunk)\n\n    return ''.join(chunks)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n\n    def vowel_change(s):\n        vowels = 'aeiouAEIOU'\n        shifted = ''\n        for char in s:\n            if char.lower() in vowels:\n                index = (ord(char) - ord('a') + 2) % 26\n                shifted += chr(ord('a') + index).swapcase()\n            else:\n                shifted += char\n        return shifted\n\n    m = vowel_change(switch_case(s))\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(m[-1]) < 3:\n        m[-1] += m[0][0]\n        m[0] = m[0][1:]\n\n    return ''.join(m)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n        \n    def vowel_change(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return char\n        \n    m = ''.join([vowel_change(switch_case(char)) for char in s])\n    \n    result = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(result[-1]) < 3:\n        result[-1] += result[0][0]\n        result[0] = result[0][1:]\n    \n    return ''.join(result)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            idx = (vowels.index(c) + 2) % len(vowels)\n            return vowels[idx]\n        return c\n\n    m = ''.join(vowel_change(switch_case(c)) for c in s)\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    for i in range(len(m)//3):\n        m.append(m.pop(0))\n    return ''.join(m)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return vowels[(vowels.index(c) + 2) % 10]\n        return c\n    \n    m = ''.join(vowel_change(switch_case(c)) for c in s)\n    \n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(m[-1]) < 3:\n        m[-1] = m[-1] + m[0][0]  # cyclic shift\n    \n    return ''.join(m)\n```", "```python\ndef encode_cyclic_shift(s):\n    def switch_case(s):\n        return s.swapcase()\n\n    def vowel_change(s):\n        vowels = \"aeiouAEIOU\"\n        shifted_vowels = {vowels[i]: vowels[(i+2)%10] for i in range(10)}\n        return \"\".join([shifted_vowels[char] if char in vowels else char for char in s])\n\n    m = vowel_change(switch_case(s))\n    m = [m[i:i+3] for i in range(0, len(m), 3)]\n    if len(m[-1]) < 3:\n        m[-1] += m[0][0]\n\n    return \"\".join(m)\n```"]}, "4": {"level 1": ["```python\ndef solve_with_vowel(s):\n    if s.isalpha():\n        vowels = 'aeiou'\n        return ''.join(c.swapcase() if c.isalpha() else c for c in [chr((ord(char.lower()) - 97 + 2) % 26 + 97) if char.lower() in vowels else char for char in s])\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    if all(char.isalpha() == False for char in s):\n        return s[::-1]\n    \n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    \n    return result[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    if s.isalpha():\n        vowels = 'AEIOUaeiou'\n        result = ''\n        for char in s:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n                else:\n                    new_char = char.swapcase()\n                result += new_char\n            else:\n                result += char\n        return result\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    import string\n    \n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    \n    if any(char.isalpha() for char in s):\n        for char in s:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    index = (string.ascii_lowercase.index(char.lower()) + 2) % 26\n                    new_char = string.ascii_lowercase[index] if char.islower() else string.ascii_uppercase[index]\n                    result += new_char\n                else:\n                    result += char.swapcase()\n            else:\n                result += char\n    else:\n        result = s[::-1]\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    if s.isalpha():\n        vowels = 'AEIOUaeiou'\n        return ''.join(chr(ord(char) + 2) if char in vowels else char.swapcase() for char in s[::-1])\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    if any(char.isalpha() for char in s):\n        result = ''\n        vowels = 'aeiou'\n        for char in s:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    result += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    if char.islower():\n                        result += char.upper()\n                    else:\n                        result += char.lower()\n            else:\n                result += char\n        return result\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        result.append(new_char)\n    \n    return ''.join(result)\n```", "```python\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result\n```", "```python\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += vowels[char.lower()]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return result\n```  ", "```python\ndef solve_with_vowel(s):\n    def flip_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def next_letter_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            next_char = chr((ord(char) + 2 - 65) % 26 + 65)\n            return next_char.lower() if char.islower() else next_char.upper()\n        return char\n\n    modified_str = ''.join(flip_case(next_letter_vowel(char)) for char in s)\n    \n    if any(char.isalpha() for char in s):\n        return modified_str\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_voucher(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    result = []\n    \n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            if char.lower() in vowels:\n                new_char = vowels[(vowels.index(char.lower()) + 2) % len(vowels)]\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        result.append(new_char)\n    \n    if has_alpha:\n        return ''.join(result)\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_voucher(s):\n    vowels = set('aeiouAEIOU')\n    result = ''\n    has_alpha = False\n    \n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                if char.islower():\n                    new_char = char.upper()\n                else:\n                    new_char = char.lower()\n        else:\n            result = char + result\n    \n    if has_alpha:\n        result = result + new_char\n    else:\n        result = s[::-1]\n    \n    return result\n```", "```python\ndef solve_with_voucher(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    if any(char.isalpha() for char in s):\n        result = ''\n        for char in s:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    new_char = vowels[(vowels.index(char.lower()) + 2) % len(vowels)]\n                    result += new_char.upper() if char.isupper() else new_char\n                else:\n                    new_char = alphabet[(alphabet.index(char.lower()) + 1) % len(alphabet)]\n                    result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        return result\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_voucher(s):\n    import string\n    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    has_alpha = any(char.isalpha() for char in s)\n    \n    if has_alpha:\n        for char in s:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A')) if char.isupper() else chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n                else:\n                    new_char = char.swapcase()\n            else:\n                new_char = char\n            result += new_char\n    else:\n        result = s[::-1]\n    \n    return result\n```  ", "```python\ndef solve_with_voucher(s):\n    result = \"\"\n    vowels = \"AEIOUaeiou\"\n    \n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            if char.lower() in vowels:\n                index = (ord(char.lower()) - ord('a') + 2) % 26\n                shifted_char = chr(ord('a') + index)\n                if char.isupper():\n                    result += shifted_char.upper()\n                else:\n                    result += shifted_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    if has_alpha:\n        return result\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n            result += new_char\n        else:\n            result += char\n    \n    return result if any(char.isalpha() for char in s) else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    \n    if all(ch not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" for ch in s):\n        return s[::-1]\n    \n    for ch in s:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                new_ch = chr((ord(ch) + 2 - 65) % 26 + 65) if ch.isupper() else chr((ord(ch) + 2 - 97) % 26 + 97)\n            else:\n                new_ch = ch.swapcase()\n            result += new_ch\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    \n    if all(ch not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' for ch in s):\n        return s[::-1]\n    \n    for ch in s:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                shifted_ch = chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                shifted_ch = ch.swapcase()\n            result += shifted_ch\n        else:\n            result += ch\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A')) if char.isupper() else chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result if any(char.isalpha() for char in s) else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def transform(letter):\n        vowels = 'aeiouAEIOU'\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                return chr((ord(letter) - 65 + 2) % 26 + 65) if letter.isupper() else chr((ord(letter) - 97 + 2) % 26 + 97)\n            else:\n                return letter.swapcase()\n        else:\n            return letter\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(transform(char) for char in s)\n```", "```python\ndef solve_with_vowel(s):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        new_str += new_char\n    \n    return new_str if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    \n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        result.append(new_char)\n    \n    return ''.join(result)\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            if char == 'u':\n                return 'a'\n            elif char == 'U':\n                return 'A'\n            else:\n                return chr(ord(char) + 2)\n        return char\n\n    modified = ''.join([advance_vowel(char.swapcase()) if char.isalpha() else char for char in s])\n    \n    if any(char.isalpha() for char in s):\n        return modified\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    letter_flag = False\n    new_str = \"\"\n    for char in s:\n        if char.isalpha():\n            letter_flag = True\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_str += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).swapcase()\n            else:\n                new_str += char.swapcase()\n        else:\n            new_str += char\n    if not letter_flag:\n        return s[::-1]\n    return new_str\n```", "```python\ndef solve_with_vowel(s):\n    vowels = 'aeiou'\n    new_str = ''\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.lower() in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        new_str += new_char\n    \n    if has_letter:\n        return new_str\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def toggle_case(char):\n        if char.isalpha():\n            if char.islower():\n                return char.upper()\n            else:\n                return char.lower()\n        return char\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            if char.isupper():\n                return chr(index + ord('A'))\n            else:\n                return chr(index + ord('a'))\n        return char\n\n    transformed = ''.join(replace_vowel(toggle_case(char)) for char in s)\n    return transformed[::-1] if not any(char.isalpha() for char in transformed) else transformed\n```", "```python\ndef solve_with_vowel(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += vowels[char.lower()].upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    \n    return result[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        result += new_char\n    if result.isalpha():\n        return result[::-1]\n    else:\n        return result\n```", "```python\ndef solve_with_vowel(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if all(c not in 'abcdefghijklmnopqrstuvwxyz' for c in s):\n        return s[::-1]\n    else:\n        transformed_string = ''\n        for char in s:\n            if char.lower() in vowels:\n                next_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                transformed_string += next_char.upper() if char.isupper() else next_char\n            elif char.isalpha():\n                transformed_string += char.swapcase()\n            else:\n                transformed_string += char\n        return transformed_string\n```", "```python\ndef solve_with_vowel(s):\n    def is_letter(char):\n        return char.isalpha()\n\n    def toggle_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n\n    def next_two_letters_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char.lower() in vowels:\n            next_char = chr(ord(char) + 1)\n            if next_char.lower() in vowels:\n                return next_char + chr(ord(next_char) + 1)\n        return char\n\n    result = []\n    for char in s:\n        if is_letter(char):\n            result.append(next_two_letters_vowel(toggle_case(char)))\n        else:\n            result.append(char)\n\n    result_str = ''.join(result)\n    if all(not c.isalpha() for c in result_str):\n        return result_str[::-1]\n    return result_str\n```"], "level 2": ["```python\ndef solve_with_vowel(s):\n    def replace_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char.lower() in vowels:\n            index = (ord(char.lower()) + 2 - ord('a')) % 26\n            return chr(ord('a') + index).upper() if char.isupper() else chr(ord('a') + index)\n        return char\n\n    letters_found = False\n    new_str = \"\"\n    for char in s:\n        if char.isalpha():\n            letters_found = True\n            new_str += char.swapcase()\n        else:\n            new_str += char\n\n    if not letters_found:\n        return new_str[::-1]\n    \n    return \"\".join(replace_vowel(char) for char in new_str)\n```", "```python\ndef solve_with_vowel(s):\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            new_char = chr(ord('a') + index)\n            return new_char.upper() if char.isupper() else new_char\n        return char\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    return ''.join(replace_vowel(char) if char.isalpha() else char for char in s)\n```", "```python\ndef solve_with_vowel(s):\n\n    def replace_vowel(char):\n        vowels = 'AEIOUaeiou'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n\n    return ''.join(replace_vowel(char) for char in result)\n```", "```python\ndef solve_with_vowel(s):\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            new_char = chr(ord('a') + index)\n            return new_char.upper() if char.isupper() else new_char\n        return char\n\n    has_letters = any(char.isalpha() for char in s)\n\n    if not has_letters:\n        return s[::-1]\n\n    new_string = ''\n    for char in s:\n        if char.isalpha():\n            new_string += char.swapcase()\n        else:\n            new_string += char\n\n    return ''.join(replace_vowel(char) for char in new_string)\n```", "```python\ndef solve_with_vowel(s):\n    def replace_vowel(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            index = (ord(letter.lower()) - ord('a') + 2) % 26\n            if letter.isupper():\n                return chr(ord('A') + index)\n            else:\n                return chr(ord('a') + index\n        else:\n            return letter\n\n    new_str = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_str += char.swapcase()\n        else:\n            new_str += char\n\n    if not has_letter:\n        return new_str[::-1]\n\n    return ''.join([replace_vowel(char) for char in new_str])\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return vowels[(vowels.index(char) + 2) % len(vowels)]\n        return char\n        \n    modified_str = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                modified_str += char.upper()\n            else:\n                modified_str += char.lower()\n        else:\n            modified_str += shift_vowel(char)\n    \n    if not has_letter:\n        return modified_str[::-1]\n    return modified_str\n```", "```python\ndef solve_with_vowel(s):\n    \n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % len(vowels)\n            return vowels[index] if char.islower() else vowels[index].upper()\n        return char\n\n    modified_str = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            modified_str += char.swapcase()\n        else:\n            modified_str += char\n\n    if not has_letter:\n        return modified_str[::-1]\n\n    return ''.join([shift_vowel(char) for char in modified_str])\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = \"AEIOUaeiou\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n    \n    modified_string = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                modified_string += char.upper()\n            else:\n                modified_string += char.lower()\n        else:\n            modified_string += char\n    \n    if not has_letter:\n        return modified_string[::-1]\n    \n    result = \"\"\n    for char in modified_string:\n        result += shift_vowel(char)\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    \n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            idx = (ord(char.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + idx)\n        return char\n        \n    modified = ''\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                modified += char.upper()\n            else:\n                modified += char.lower()\n        else:\n            modified += shift_vowel(char)\n\n    if not has_letter:\n        return modified[::-1]\n    \n    return modified\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char.lower() in vowels:\n            if char.islower():\n                return chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                return chr((ord(char) - 65 + 2) % 26 + 65)\n        return char\n\n    processed = [shift_vowel(c.swapcase()) if c.isalpha() else c for c in s]\n    result = ''.join(processed)\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n        \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            return chr((ord(char) - 65 + 2) % 26 + 65) if char.isupper() else chr((ord(char) - 97 + 2) % 26 + 97)\n        return char\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    return ''.join(advance_vowel(char.swapcase()) if char.isalpha() else char for char in s)\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(letter):\n        vowels = 'aeiouAEIOU'\n        if letter in vowels:\n            return chr((ord(letter.lower()) - 97 + 2) % 26 + 97)\n        return letter\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    modified_string = ''\n    for char in s:\n        if char.isalpha():\n            modified_string += char.swapcase()\n            modified_string += advance_vowel(char)\n        else:\n            modified_string += char\n    return modified_string\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            vowels = vowels + vowels.lower()\n            index = vowels.index(char) + 2\n            return vowels[index]\n        return char\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    return \"\".join(advance_vowel(char.swapcase()) if char.isalpha() else char for char in s)\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index).upper() if char.isupper() else chr(ord('a') + index)\n        return char\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    return ''.join(advance_vowel(char) if char.isalpha() else char for char in s)\n```", "```python\ndef solve_with_vowel(s):\n    def advance_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c.lower() in vowels:\n            index = (ord(c.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index).upper() if c.isupper() else chr(ord('a') + index)\n        else:\n            return c\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    return ''.join(advance_vowel(char) if char.isalpha() else char for char in s)\n```", "```python\ndef solve_with_vowel(s):\n    def move_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        return c\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += move_vowel(char.swapcase())\n        else:\n            result += char\n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def move_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (ord(c.lower()) - ord('a') + 2) % 26\n            return vowels[index] if c.islower() else vowels[index].upper()\n        return c\n    \n    result = ''\n    has_alpha = False\n    \n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            result += char.swapcase()\n            result += move_vowel(char)\n        else:\n            result += char\n    \n    if not has_alpha:\n        return s[::-1]\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def move_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return c\n\n    result = ''\n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            if char.islower():\n                result += char.upper()\n            elif char.isupper():\n                result += char.lower()\n            result += move_vowel(char)\n        else:\n            result += char\n\n    if not has_alpha:\n        return s[::-1]\n    \n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def move_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (ord(char.lower()) - ord('a') + 2) % 26\n            return chr(ord('a') + index).swapcase()\n        return char\n\n    result = \"\"\n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n        result += move_vowel(char)\n\n    if not has_alpha:\n        return result[::-1]\n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def move_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            return chr((ord(c) - 65 + 2) % 32 + 65)\n        return c\n\n    transformed = ''\n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            transformed += move_vowel(char.swapcase())\n        else:\n            transformed += char\n    \n    if not has_alpha:\n        return s[::-1]\n    return transformed\n```", "```python\ndef solve_with_vowel(s):\n    def increase_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    modified_s = ''\n    has_alpha = False\n\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            if char.islower():\n                modified_s += char.upper()\n            else:\n                modified_s += char.lower()\n            modified_s += increase_vowel(char)\n        else:\n            modified_s += char\n\n    if not has_alpha:\n        return s[::-1]\n    return modified_s\n\n# Example\nprint(solve_with_vowel('abc123'))  # Output: 'AbDeF123'\n```", "```python\ndef solve_with_vowel(s):\n    def increase_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n    \n    new_str = ''\n    has_alpha = False\n\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            new_str += char.swapcase()\n        else:\n            new_str += char\n    \n    if not has_alpha:\n        return s[::-1]\n    \n    return ''.join(increase_vowel(char) for char in new_str)\n```", "```python\ndef solve_with_vowel(s):\n    def increase_vowel(c):\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            index = (vowels.index(c) + 2) % len(vowels)\n            return vowels[index]\n        return c\n    \n    modified_str = \"\"\n    has_alphabetic = False\n    \n    for char in s:\n        if char.isalpha():\n            has_alphabetic = True\n            if char.islower():\n                modified_str += char.upper()\n            else:\n                modified_str += char.lower() \n            modified_str += increase_vowel(char)\n        else:\n            modified_str += char\n    \n    if not has_alphabetic:\n        return s[::-1]\n    \n    return modified_str\n```  ", "```python\ndef solve_with_vowel(s):\n    def increase_vowel_position(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(ord(char) + 2)\n        return char\n        \n    modified_s = ''\n    has_alphabetic = False\n    \n    for char in s:\n        if char.isalpha():\n            has_alphabetic = True\n            if char.islower():\n                modified_s += char.upper()\n            else:\n                modified_s += char.lower()\n            modified_s += increase_vowel_position(char)\n        else:\n            modified_s += char\n    \n    if not has_alphabetic:\n        return s[::-1]\n    \n    return modified_s\n```  ", "```python\ndef solve_with_vowel(s):\n    def increase_vowel(char):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % 5\n            return vowels[index] if char.islower() else vowels[index].upper()\n        return char\n\n    modified_str = ''\n    \n    has_alpha = False\n    for char in s:\n        if char.isalpha():\n            has_alpha = True\n            modified_str += char.swapcase()\n            modified_str = ''.join([increase_vowel(c) for c in modified_str])\n        else:\n            modified_str += char\n    \n    if not has_alpha:\n        return s[::-1]\n    \n    return modified_str\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(c):\n        vowels = \"aeiouAEIOU\"\n        if c in vowels:\n            idx = (vowels.index(c) + 2) % len(vowels)\n            return vowels[idx]\n        return c\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    modified = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                modified += char.upper() if char.lower() in 'aeiou' else char.lower()\n            else:\n                modified += char.lower() if char.upper() in 'AEIOU' else char.upper()\n        else:\n            modified += char\n    \n    return modified\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n    \n    modified = ''\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.lower() in 'aeiou':\n                modified += shift_vowel(char.lower())\n            else:\n                modified += char.swapcase()\n        else:\n            modified += char\n    \n    if not has_letter:\n        return s[::-1]\n    \n    return modified\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % 10\n            return vowels[index]\n        return char\n    \n    modified_string = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                modified_string += char.upper() if char.islower() else char.lower()\n            else:\n                modified_string += shift_vowel(char)\n        else:\n            modified_string += char\n    \n    return modified_string if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = (vowels.index(char) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    result = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper() if char.islower() else char.lower()\n            else:\n                result += shift_vowel(char)\n        else:\n            result += char\n    \n    if not has_letter:\n        return s[::-1]\n    return result\n```", "```python\ndef solve_with_vowel(s):\n    def shift_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % len(vowels)\n            return vowels[index]\n        return char\n\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower() if char.lower() not in 'aeiou' else shift_vowel(char)\n            elif char.islower():\n                result += char.upper() if char.upper() not in 'AEIOU' else shift_vowel(char)\n        else:\n            result += char\n    \n    return result\n```"], "level 3": ["```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in \"aeiou\":\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            return ch.swapcase()\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char).swapcase()\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch.lower() in vowels:\n            new_ord = ord(ch) + 2\n            if ch.isupper():\n                return chr(new_ord).upper()\n            else:\n                return chr(new_ord)\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = vowel_change(char.swapcase())\n            ans += new_char\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in \"aeiou\":\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            return ch.swapcase()\n        else:\n            return ch\n\n    ans = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.swapcase())\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in \"aeiou\":\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in \"bcdfghjklmnpqrstvwxyz\":\n            return chr((ord(ch) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            return ch\n    \n    ans = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.swapcase())\n        else:\n            ans += char\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return ch\n          \n    ans = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            modified_char = vowel_change(char.swapcase())\n            ans += modified_char if modified_char is not None else \"\"\n        else:\n            ans += char\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return vowels[(vowels.index(ch) + 2) % len(vowels)]\n        return ch\n\n    ans = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = vowel_change(char.swapcase())\n            ans += new_char\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr((ord(ch) - ord('a') + 1) % 26 + ord('a'))\n        return ch\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            char = char.swapcase()\n            char = vowel_change(char)\n            ans += char\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return vowels[(vowels.index(ch) + 2) % len(vowels)]\n        return ch\n    \n    ans = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = vowel_change(char.swapcase())\n            ans += new_char\n        else:\n            ans += char\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr((ord(ch.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n        elif ch.lower() in 'AEIOU':\n            return chr((ord(ch.lower()) - ord('A') + 2) % 26 + ord('A')).lower()\n        else:\n            return ch\n\n    ans = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = vowel_change(char.swapcase())\n            ans += new_char\n        else:\n            ans += char\n\n    if not has_letter:\n        return s[::-1]\n    return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr((ord(ch) - ord('a') + 1) % 26 + ord('a'))\n        elif ch.lower() in 'AEIOU':\n            return chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n        elif ch.lower() in 'BCDFGHJKLMNPQRSTVWXYZ':\n            return chr((ord(ch) - ord('A') + 1) % 26 + ord('A'))\n        return ch\n\n    ans = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = vowel_change(char.swapcase())\n            ans += new_char\n        else:\n            ans += char\n\n    return s[::-1] if not has_letter else ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        elif char.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr(ord(char) - 32)\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        return char\n\n    ans = \"\"\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.swapcase())\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        elif char.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr(ord(char) - 2)\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.swapcase())\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            return chr(ord(c) + 2)\n        elif c.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr(ord(c) - 32)  # Change case for consonants\n        else:\n            return c\n\n    ans = \"\"\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n```  ", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr(ord(char) + 2)\n        elif char.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr(ord(char) - 32)\n        return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    if has_letter:\n        return ans\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    \n    def vowel_change(letter):\n        vowels = 'aeiouAEIOU'\n        if letter.lower() in vowels:\n            index = (vowels.index(letter.lower()) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return letter\n\n    ans = ''\n    has_letter = any(char.isalpha() for char in s)\n    \n    for char in s:\n        if char.isalpha():\n            ans += vowel_change(char.lower()).upper() if char.isupper() else vowel_change(char)\n        else:\n            ans += char\n    \n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            vowels = 'aeiouAEIOU'\n            return vowels[(vowels.index(char.lower()) + 2) % 10]\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        vowels = 'aeiouAEIOU'\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % len(vowels)\n            return vowels[index].swapcase()\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            ans += vowel_change(char)\n            has_letter = True\n        else:\n            ans += char\n\n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        vowels = 'aeiouAEIOU'\n        if c.lower() in vowels:\n            index = (vowels.index(c.lower()) + 2) % len(vowels)\n            return vowels[index] if c.islower() else vowels[index].upper()\n        return c\n    \n    ans = ''\n    has_letter = any(c.isalpha() for c in s)\n    \n    for c in s:\n        if c.isalpha():\n            ans += vowel_change(c)\n        else:\n            ans += c\n    \n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            vowels = 'aeiou'\n            if c.isupper():\n                vowels = vowels.upper()\n            return vowels[(vowels.index(c.lower()) + 2) % 5]\n        return c\n    \n    ans = ''\n    has_letter = any(char.isalpha() for char in s)\n    \n    for char in s:\n        if char.isalpha():\n            ans += vowel_change(char)\n        else:\n            ans += char\n    \n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch.lower() in vowels:\n            index = (vowels.index(ch.lower()) + 2) % len(vowels)\n            return vowels[index].swapcase()\n        return ch\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.swapcase())\n        else:\n            ans += char\n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            index = (vowels.index(ch) + 2) % len(vowels)\n            return vowels[index]\n        else:\n            return ch\n        \n    ans = ''\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            new_char = char.swapcase()\n            new_char = vowel_change(new_char)\n            ans += new_char\n        else:\n            ans += char\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    \n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            return vowels[(vowels.index(ch) + 2) % len(vowels)]\n        return ch\n    \n    def has_letter(s):\n        for ch in s:\n            if ch.isalpha():\n                return True\n        return False\n    \n    ans = ''\n    for ch in s:\n        if ch.isalpha():\n            new_ch = vowel_change(ch.lower()).swapcase()\n            ans += new_ch\n        else:\n            ans += ch\n    \n    if not has_letter(s):\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        vowels = 'aeiouAEIOU'\n        if ch.lower() in vowels:\n            idx = (vowels.index(ch.lower()) + 2) % len(vowels)\n            return vowels[idx].swapcase()\n        return ch\n\n    def has_letter(s):\n        for char in s:\n            if char.isalpha():\n                return True\n        return False\n\n    ans = ''\n    for char in s:\n        if char.isalpha():\n            ans += vowel_change(char.lower()).swapcase()\n        else:\n            ans += char\n\n    if not has_letter(s):\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(ch):\n        if ch.lower() in 'aeiou':\n            return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n        elif ch.lower() in 'bcdfghjklmnpqrstvwxyz':\n            return chr((ord(ch) - ord('a') + 1) % 26 + ord('a')\n        return ch\n\n    has_letter = any(letter.isalpha() for letter in s)\n    ans = ''.join(vowel_change(letter.swapcase()) if letter.isalpha() else letter for letter in s)\n    \n    if not has_letter:\n        return s[::-1]\n    else:\n        return ans\n```", "```python\ndef solve_with_vowel(s):\n    \n    def vowel_change(letter):\n        if letter.lower() in 'aeiou':\n            if letter.isupper():\n                return chr((ord(letter) - 65 + 2) % 26 + 65)\n            else:\n                return chr((ord(letter) - 97 + 2) % 26 + 97)\n        else:\n            return letter\n    \n    def solve(s):\n        ans = ''\n        has_letter = False\n        for char in s:\n            if char.isalpha():\n                has_letter = True\n                new_char = vowel_change(char)\n                ans += new_char\n            else:\n                ans += char\n        if has_letter:\n            return ans\n        else:\n            return s[::-1]\n    \n    return solve(s)\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char.lower() in 'aeiou':\n            return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        elif char.lower() in 'bcdefghijklmnopqrstuvwxy':\n            return chr((ord(char) - ord('a') + 1) % 26 + ord('a')\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char.lower()).upper() if char.isupper() else vowel_change(char)\n        else:\n            ans += char\n\n    return ans if has_letter else s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(char):\n        if char in 'aeiou':\n            return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        elif char in 'AEIOU':\n            return chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return char\n\n    ans = ''\n    has_letter = False\n\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n\n    return ans if has_letter else s[::-1]\n```  ", "```python\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            return chr((ord(c) + 2 - ord('a')) % 26 + ord('a'))\n        elif c.lower() in 'bcdefghijklmnopqrstuvwxz':\n            return chr((ord(c) + 1 - ord('a')) % 26 + ord('a'))\n        else:\n            return c\n        \n    def has_letter(s):\n        for char in s:\n            if char.isalpha():\n                return True\n        return False\n    \n    ans = \"\"\n    for char in s:\n        if char.isalpha():\n            modified_char = vowel_change(char)\n            if char.islower():\n                ans += modified_char.lower()\n            else:\n                ans += modified_char.upper()\n        else:\n            ans += char\n    \n    if has_letter(s):\n        return ans\n    else:\n        return s[::-1]\n```", "```python\ndef solve_with_vowel(s):\n    def vowel_change(c):\n        if c.lower() in 'aeiou':\n            if c.islower():\n                return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    ans = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            ans += vowel_change(char)\n        else:\n            ans += char\n    \n    return ans if has_letter else s[::-1]\n```"]}}